[{"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\index.js":"1","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\store\\index.js":"2","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\RegisterPage.js":"3","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\LandingPage.js":"4","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\helpers\\themeStyles.js":"5","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\settingsSlice.js":"6","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\index.js":"7","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\NoTasks.js":"8","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\TaskInput.js":"9","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\AutoMarkDone.js":"10","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\NotesViewToggle.js":"11","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\menu\\Menu.js":"12","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\TaskLabelSelect.js":"13","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\notes\\NewNoteButton.js":"14","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\focusBoard\\FocusBoard.js":"15","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\customIcons\\index.js":"16","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\FocusBoard\\FocussedTask.js":"17","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MiscBoard\\TimeProgressCard.js":"18","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MusicBox\\MusicVolumeControl.js":"19","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\hooks\\useTimer.js":"20","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\dashboard\\DashboardHero.js":"21","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\Navbar\\Navbar.js":"22","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\taskBoard\\TaskBoard.js":"23","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\login\\LoginPage.js":"24","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\store\\localStorageUtils.js":"25","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\taskBoard\\taskBoardSlice.js":"26","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\dashboard\\index.js":"27","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\Divider.js":"28","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\helpers\\constants.js":"29","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\DefaultTaskTime.js":"30","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\dashboard\\DashboardMain.js":"31","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\notes\\NotesPreview.js":"32","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\notes\\NoteCard.js":"33","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\dashBoard\\DayDate.js":"34","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\FocusBoard\\EmptyFocusBox.js":"35","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MiscBoard\\ProgressRings.js":"36","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\App.js":"37","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\mobileView\\index.js":"38","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\helpers\\index.js":"39","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\TaskCard.js":"40","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\helpers\\quotes.js":"41","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MiscBoard\\EmptyLabelPie.js":"42","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\DefaultTaskLabel.js":"43","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\notes\\index.js":"44","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\helpers\\fokusUsageTips.js":"45","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MusicBox\\musicUtils.js":"46","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\notes\\NotesListArea.js":"47","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\TaskFeedback.js":"48","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\notes\\NoteSearchInput.js":"49","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\miscBoard\\MiscBoard.js":"50","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MiscBoard\\LabelPie.js":"51","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MiscBoard\\TaskProgressCard.js":"52","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MusicBox\\Soundscapes.js":"53","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\notes\\notesSlice.js":"54","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\serviceWorker.js":"55"},{"size":720,"mtime":1667764343366,"results":"56","hashOfConfig":"57"},{"size":810,"mtime":1667325383593,"results":"58","hashOfConfig":"57"},{"size":3250,"mtime":1667820571076,"results":"59","hashOfConfig":"57"},{"size":1159,"mtime":1667798209368,"results":"60","hashOfConfig":"57"},{"size":651,"mtime":1667325383121,"results":"61","hashOfConfig":"57"},{"size":1348,"mtime":1667325383080,"results":"62","hashOfConfig":"57"},{"size":2171,"mtime":1667325383075,"results":"63","hashOfConfig":"57"},{"size":715,"mtime":1667325382722,"results":"64","hashOfConfig":"57"},{"size":7123,"mtime":1667325382731,"results":"65","hashOfConfig":"57"},{"size":1057,"mtime":1667325383054,"results":"66","hashOfConfig":"57"},{"size":1799,"mtime":1667325383072,"results":"67","hashOfConfig":"57"},{"size":4652,"mtime":1667754010923,"results":"68","hashOfConfig":"57"},{"size":1410,"mtime":1667325382734,"results":"69","hashOfConfig":"57"},{"size":1829,"mtime":1667325382745,"results":"70","hashOfConfig":"57"},{"size":2151,"mtime":1667325382809,"results":"71","hashOfConfig":"57"},{"size":2339,"mtime":1667808392369,"results":"72","hashOfConfig":"57"},{"size":11579,"mtime":1667808591408,"results":"73","hashOfConfig":"57"},{"size":3195,"mtime":1667325382702,"results":"74","hashOfConfig":"57"},{"size":1627,"mtime":1667325382704,"results":"75","hashOfConfig":"57"},{"size":1021,"mtime":1667810547223,"results":"76","hashOfConfig":"57"},{"size":1947,"mtime":1667423479564,"results":"77","hashOfConfig":"57"},{"size":236,"mtime":1667401208698,"results":"78","hashOfConfig":"57"},{"size":6614,"mtime":1667325383085,"results":"79","hashOfConfig":"57"},{"size":2961,"mtime":1667820674184,"results":"80","hashOfConfig":"57"},{"size":2307,"mtime":1667325383597,"results":"81","hashOfConfig":"57"},{"size":15006,"mtime":1667325383088,"results":"82","hashOfConfig":"57"},{"size":844,"mtime":1667325382803,"results":"83","hashOfConfig":"57"},{"size":2730,"mtime":1667325382718,"results":"84","hashOfConfig":"57"},{"size":115,"mtime":1667325383103,"results":"85","hashOfConfig":"57"},{"size":2289,"mtime":1667325383071,"results":"86","hashOfConfig":"57"},{"size":540,"mtime":1667325382801,"results":"87","hashOfConfig":"57"},{"size":7666,"mtime":1667723045325,"results":"88","hashOfConfig":"57"},{"size":2306,"mtime":1667325382747,"results":"89","hashOfConfig":"57"},{"size":1476,"mtime":1667808523876,"results":"90","hashOfConfig":"57"},{"size":6428,"mtime":1667767345278,"results":"91","hashOfConfig":"57"},{"size":4356,"mtime":1667325382699,"results":"92","hashOfConfig":"57"},{"size":3264,"mtime":1667745132469,"results":"93","hashOfConfig":"57"},{"size":999,"mtime":1667325382829,"results":"94","hashOfConfig":"57"},{"size":3069,"mtime":1667325383115,"results":"95","hashOfConfig":"57"},{"size":17625,"mtime":1667325382726,"results":"96","hashOfConfig":"57"},{"size":20730,"mtime":1667325383118,"results":"97","hashOfConfig":"57"},{"size":713,"mtime":1667325382695,"results":"98","hashOfConfig":"57"},{"size":2274,"mtime":1667325383068,"results":"99","hashOfConfig":"57"},{"size":750,"mtime":1667325382833,"results":"100","hashOfConfig":"57"},{"size":2807,"mtime":1667325383109,"results":"101","hashOfConfig":"57"},{"size":1338,"mtime":1667325382714,"results":"102","hashOfConfig":"57"},{"size":2514,"mtime":1667325382752,"results":"103","hashOfConfig":"57"},{"size":4330,"mtime":1667325382729,"results":"104","hashOfConfig":"57"},{"size":1860,"mtime":1667325382750,"results":"105","hashOfConfig":"57"},{"size":4867,"mtime":1667325382825,"results":"106","hashOfConfig":"57"},{"size":2904,"mtime":1667325382697,"results":"107","hashOfConfig":"57"},{"size":2127,"mtime":1667325382700,"results":"108","hashOfConfig":"57"},{"size":4596,"mtime":1667820493711,"results":"109","hashOfConfig":"57"},{"size":1462,"mtime":1667325382835,"results":"110","hashOfConfig":"57"},{"size":5141,"mtime":1667747436605,"results":"111","hashOfConfig":"57"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"115"},"sni1sc",{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"148"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"136"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"115"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"115"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"115"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"133"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"195"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"144"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"136"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"115"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"218"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"144"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"115"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"115"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\index.js",["246"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport store from './store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactGA from 'react-ga4';\r\nReactGA.initialize('G-D6X2VXVV7T');\r\nReactGA.send(\"pageview\");\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n",["247","248"],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\store\\index.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\RegisterPage.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\LandingPage.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\helpers\\themeStyles.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\settingsSlice.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\index.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\NoTasks.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\TaskInput.js",["249"],"import React, { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { create, incrementGlobalKey, focusOnTask, updateLabelCount } from \"./../../containers/taskBoard/taskBoardSlice\";\r\nimport styled from \"styled-components\";\r\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\r\nimport { TaskFeedback } from \"./TaskFeedback\";\r\nimport { debounce } from \"../../helpers\";\r\n\r\nconst TaskInputContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin: 20px 0 10px 0;\r\n    width: 90%;\r\n    max-width: 396px;\r\n    border-radius: 10px;\r\n    background-color: ${(p) => p.theme.backgroundSecondary};\r\n    height: 50px;\r\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\r\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\r\n`;\r\n\r\nconst TaskContentInputDiv = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: 90%;\r\n    width: 70%;\r\n    margin-left: 10px;\r\n    svg {\r\n        font-size: 1.3em;\r\n        margin-right: 5px;\r\n        color: #fabb18;\r\n    }\r\n`;\r\n\r\nconst TaskContentInputField = styled.input`\r\n    height: 100%;\r\n    width: 90%;\r\n    font-size: 0.9em;\r\n    background-color: ${(p) => p.theme.backgroundSecondary};\r\n    color: ${(p) => p.theme.primaryText};\r\n    border: 0;\r\n    outline: none;\r\n    font-weight: bold;\r\n    &::placeholder {\r\n        color: #c1c1d7;\r\n    }\r\n`;\r\n\r\nconst TaskTimeInputDiv = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    height: 90%;\r\n    width: 25%;\r\n    color: #c1c1d7;\r\n    span {\r\n        font-size: 0.7em;\r\n        font-weight: bold;\r\n    }\r\n    svg {\r\n        font-size: 1.2em;\r\n        color: #fabb18;\r\n    }\r\n`;\r\n\r\nconst TaskTimeInputField = styled.input`\r\n    height: 100%;\r\n    width: 30%;\r\n    font-size: 0.9em;\r\n    text-align: center;\r\n    background-color: ${(p) => p.theme.backgroundSecondary};\r\n    color: ${(p) => p.theme.primaryText};\r\n    border: 0;\r\n    outline: none;\r\n    font-weight: bold;\r\n    &::placeholder {\r\n        color: #c1c1d7;\r\n    }\r\n    &::-webkit-inner-spin-button,\r\n    &::-webkit-outer-spin-button {\r\n        -webkit-appearance: none;\r\n        -moz-appearance: none;\r\n        appearance: none;\r\n        margin: 0;\r\n    }\r\n        input[type=\"number\"] { \r\n        -moz-appearance: textfield;   \r\n    }\r\n`;\r\n\r\nexport default function TaskInput() {\r\n\r\n    const defaultTime = useSelector((s) => s.settings.defaultTime);\r\n    const defaultLabel = useSelector((s) => s.settings.defaultLabel);\r\n\r\n    const [task, setTask] = useState(\"\");\r\n    const [time, setTime] = useState(defaultTime);\r\n\r\n    const [generateFeedbackForTask, setGenerateFeedbackForTask] = useState(undefined);\r\n    const [generateFeedbackForTime, setGenerateFeedbackForTime] = useState(undefined);\r\n    const [isInputValid,setInputValid] = useState(false);\r\n\r\n    let taskContentInputRef, taskTimeInputRef;\r\n    const meta = useSelector((s) => s.tasks.meta);\r\n    const labels = useSelector((s) => s.tasks.labels);\r\n    const dispatch = useDispatch();\r\n\r\n    function submitTask(e) {\r\n        if (e.key === \"Enter\" && task.trim().length >= 1 && isInputValid) {\r\n            let temp = task.trim().split(\" \");\r\n            // add a max time limit\r\n            let taskTime = time;\r\n            let label = defaultLabel;\r\n            if (temp.length !== 1) {\r\n                if (!isNaN(parseInt(temp[temp.length - 1]))) {\r\n                    taskTime = parseInt(temp.pop());\r\n                } else if (temp[temp.length - 1][0] === \"#\" && temp[temp.length - 1].length > 1 && \"wpfmeWPFME\".includes(temp[temp.length - 1][1])) {\r\n                    let userLabel = temp[temp.length - 1].substring(1).toLowerCase();\r\n                    let found = false;\r\n                    for (let validLabel in labels) {\r\n                        found = validLabel.includes(userLabel);\r\n                        console.log(userLabel, validLabel);\r\n                        if (found) {\r\n                            label = validLabel;\r\n                            temp.pop();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            temp = temp.join(\" \");\r\n            let newTask = {\r\n                id: Math.floor(Math.random() * 10000),\r\n                globalKey: meta.globalKey,\r\n                content: temp,\r\n                time: taskTime,\r\n                remainingTime: taskTime,\r\n                isRunning: false,\r\n                isCompleted: false,\r\n                createdAt: new Date().toISOString(),\r\n                label: label,\r\n            };\r\n            if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\r\n            dispatch(create(newTask));\r\n            dispatch(incrementGlobalKey());\r\n            if (label !== null) dispatch(updateLabelCount({ oldLabel: null, newLabel: label }));\r\n            setTask(\"\");\r\n            setTime(defaultTime);\r\n            taskContentInputRef.value = \"\";\r\n            taskTimeInputRef.value = \"\";\r\n            taskContentInputRef.focus();\r\n        }\r\n    }\r\n\r\n    const debouncedGenerateInputFeedback = useCallback(\r\n        debounce((task, time) => {\r\n            if (task !== undefined) setGenerateFeedbackForTask(task);\r\n            if (time !== undefined) setGenerateFeedbackForTime(time);\r\n        }, 150),\r\n        []\r\n    );\r\n\r\n    function onTaskInputChangeHandler(task) {\r\n        setTask(task);\r\n        debouncedGenerateInputFeedback(task, undefined);\r\n    }\r\n\r\n    function onTimeInputChangeHandler(time) {\r\n        setTime(time);\r\n        debouncedGenerateInputFeedback(undefined, time);\r\n    }\r\n\r\n    // improve logic - both onKeyDown and onChange executing - combining will be better.\r\n    return (\r\n        <>\r\n            <TaskInputContainer>\r\n                <TaskContentInputDiv>\r\n                    <AiFillPlusCircle onClick={() => taskContentInputRef.focus()} />\r\n                    <TaskContentInputField\r\n                        type=\"text\"\r\n                        placeholder=\"i have to focus on ...\"\r\n                        ref={(el) => (taskContentInputRef = el)}\r\n                        onChange={(e) => onTaskInputChangeHandler(e.target.value)}\r\n                        onKeyDown={submitTask}\r\n                    />\r\n                </TaskContentInputDiv>\r\n                <TaskTimeInputDiv>\r\n                    <AiFillClockCircle onClick={() => taskTimeInputRef.focus()} />\r\n                    <TaskTimeInputField\r\n                        type=\"number\"\r\n                        placeholder={defaultTime}\r\n                        ref={(el) => (taskTimeInputRef = el)}\r\n                        onChange={(e) => onTimeInputChangeHandler(e.target.value)}\r\n                        onKeyDown={submitTask}\r\n                    />\r\n                    <span>mins</span>\r\n                </TaskTimeInputDiv>\r\n            </TaskInputContainer>\r\n            <TaskFeedback task={generateFeedbackForTask} time={generateFeedbackForTime} setInputValid={setInputValid}/>\r\n        </>\r\n    );\r\n}\r\n",["250","251"],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\AutoMarkDone.js",[],["252","253"],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\NotesViewToggle.js",["254"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { setGridView } from \"./settingsSlice\";\r\nimport { FaThList } from \"react-icons/fa\";\r\nimport { BsFillGrid3X3GapFill } from \"react-icons/bs\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst NotesViewDiv = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    width: 80%;\r\n    height: 70px;\r\n    background-color: ${(p) => p.theme.backgroundSecondary};\r\n    p {\r\n        margin: 0;\r\n    }\r\n`;\r\n\r\nexport const Options = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 120px;\r\n    svg{\r\n        cursor: pointer;\r\n        margin:3px;\r\n        font-size: 1.2em;\r\n    }\r\n    #list-view-opt {\r\n        color: ${(p) => (p.isGridView ? p.theme.primaryText : \"#fabb18\")};\r\n    }\r\n    #grid-view-opt {\r\n        color: ${(p) => (p.isGridView ? \"#fabb18\" : p.theme.primaryText)};\r\n    }\r\n`;\r\n\r\nexport function NotesViewToggle() {\r\n    const isGridView = useSelector((s) => s.settings.isGridView);\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <NotesViewDiv>\r\n            <p>Notes View Layout</p>\r\n            <Options isGridView={isGridView}>\r\n                <FaThList id=\"list-view-opt\" data-for=\"list-view\" data-tip=\"\" onClick={() => {console.log('fd');dispatch(setGridView(false))}} />\r\n                <BsFillGrid3X3GapFill id=\"grid-view-opt\" data-for=\"grid-view\" data-tip=\"\" onClick={() => dispatch(setGridView(true))} />\r\n                <ReactTooltip id=\"list-view\" getContent={() => \"List View\"} />\r\n                <ReactTooltip id=\"grid-view\" getContent={() => \"Grid View\"} />\r\n            </Options>\r\n        </NotesViewDiv>\r\n    );\r\n}\r\n",["255","256"],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\menu\\Menu.js",["257","258","259","260","261"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { MdDashboard, MdSettings } from \"react-icons/md\";\r\nimport { IoMdAnalytics } from \"react-icons/io\";\r\nimport { BiExclude, BiNotepad } from \"react-icons/bi\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport logo from \"./../../images/DEF.png\";\r\n// import namedLogoLight from \"./../../images/abcd.png\";\r\nimport \"./Menu.css\"\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\r\n\r\nconst MenuContainer = styled.div`\r\n    width: 10%;\r\n    max-width: 200px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    background-color: #020202;\r\n    border-radius: 0 10px 10px 0;\r\n    border-left: 15px solid #fabb18;\r\n    position: relative;\r\n`;\r\n\r\nconst AppLogoContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n    width: 100%;\r\n    top: 25px;\r\n    left: 5px;\r\n        img {\r\n        width: 50%;\r\n    }\r\n    /* background-color:pink; */\r\n`;\r\n\r\nconst AppTextLogoContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: absolute;\r\n    width: 100%;\r\n    bottom: 15px;\r\n    margin-right: 20px;\r\n\r\n    img {\r\n        width: 75%;\r\n    }\r\n    /* background-color:purple; */\r\n`;\r\n\r\nconst activeClassName = \"nav-item-active\";\r\nconst MenuOptions = styled(NavLink).attrs({ activeClassName })`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 10px 0;\r\n    border-radius: 0 5px 5px 0;\r\n    background-color: #020202;\r\n    svg {\r\n        font-size: 1.8em;\r\n        color: #fff;\r\n        margin: 10px 0;\r\n    }\r\n    &.${activeClassName} {\r\n        svg {\r\n            color: #fabb18;\r\n        }\r\n    }\r\n    width: 100%;\r\n    transition: width 0.2s;\r\n    &:hover {\r\n        svg {\r\n            color: #fff;\r\n        }\r\n        width: 125%;\r\n        background-color: #fabb18;\r\n    }\r\n`;\r\n\r\nconst DummyMenuOptions = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 7px 0;\r\n    border-radius: 0 5px 5px 0;\r\n    background-color: #020202;\r\n    svg {\r\n        font-size: 1.8em;\r\n        color: #fff;\r\n        margin: 10px 0;\r\n    }\r\n    width: 100%;\r\n    transition: width 0.2s;\r\n    &:hover {\r\n        svg {\r\n            color: #fff;\r\n        }\r\n        width: 125%;\r\n        background-color: #fabb18;\r\n    }\r\n`;\r\n\r\nexport default function Menu() {\r\n    //     function dropdown(){\r\n    //         return(\r\n    \r\n    //         )\r\n\r\n    //     }\r\n\r\n\r\n    return (\r\n        <MenuContainer>\r\n            <AppLogoContainer>\r\n                <div class=\"dropdown\">\r\n                    <img src={logo} alt=\"logo\" className=\"mylogo\" style={{ \"width\": \"50px\", \"height\": \"50px \" }} />\r\n                    <a class=\"btn btn-secondary dropdown-toggle mybtn\" href=\"#\" role=\"button\" id=\"dropdownMenuLink\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n\r\n                    </a>\r\n\r\n                    <div class=\"dropdown-menu\" aria-labelledby=\"dropdownMenuLink\">\r\n                    <Link to=\"/login\">\r\n                            <button className=\"butt\"> Log out </button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </AppLogoContainer>\r\n            <MenuOptions exact to=\"/dashboard\">\r\n                <MdDashboard data-tip=\"\" data-for=\"dashboard\" />\r\n                <ReactTooltip id=\"dashboard\" getContent={() => \"Dashboard\"} />\r\n            </MenuOptions>\r\n\r\n            <MenuOptions exact to=\"/notes\">\r\n                <BiNotepad data-tip=\"\" data-for=\"notes\" />\r\n                <ReactTooltip id=\"notes\" getContent={() => \"Notes\"} />\r\n            </MenuOptions>\r\n\r\n            <MenuOptions exact to=\"/pomodoro\">\r\n                <BiNotepad data-tip=\"\" data-for=\"/PomodoroFile\" />\r\n                <ReactTooltip id=\"App2\" getContent={() => \"App2\"} />\r\n            </MenuOptions>\r\n\r\n            <DummyMenuOptions>\r\n                <BiExclude data-tip=\"\" data-for=\"analytics\" />\r\n                <ReactTooltip id=\"analytics\" getContent={() => \"Coming Soon\"} />\r\n            </DummyMenuOptions>\r\n\r\n            <MenuOptions exact to=\"/settings\">\r\n                <MdSettings data-tip=\"\" data-for=\"settings\" />\r\n                <ReactTooltip id=\"settings\" getContent={() => \"Settings\"} />\r\n            </MenuOptions>\r\n\r\n            {/* <AppTextLogoContainer>\r\n                {/* <img src={namedLogoLight} alt=\"fokus\" /> */}\r\n            {/* </AppTextLogoContainer>  */}\r\n        </MenuContainer>\r\n    );\r\n}\r\n",["262","263"],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\TaskLabelSelect.js",["264"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TaskSelectInput = styled.select`\r\n    font-weight: bold;\r\n    text-align: center;\r\n    border:0;\r\n    background-color:${p=>p.theme.backgroundSecondary};\r\n    color:${p=>p.theme.primaryText};\r\n    option{\r\n        font-weight:bold;\r\n    }\r\n`;\r\n\r\nexport default function TaskLabel(p) {\r\n    const labels = useSelector((s) => s.tasks.labels);\r\n    const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\r\n\r\n    return (\r\n        // <div style={{ height: \"100%\", width: 80 }}>\r\n        <TaskSelectInput\r\n        autoFocus\r\n            name=\"labels\"\r\n            onBlur={() => p.onBlur(p.taskId,p.taskLabel, updatedLabel)}\r\n            defaultValue={updatedLabel}\r\n            onChange={(e) => setUpdatedLabel(e.target.value)}\r\n            onKeyDown={(e) => (e.key === \"Enter\" ? p.onBlur(p.taskId,p.taskLabel, updatedLabel) : null)}\r\n        >\r\n            <option value=\"none\">none</option> \r\n            {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\r\n            {Object.keys(labels).map((e, idx) => (\r\n                <option style={{color:`${labels[e].color}`}} key={idx} value={e}>\r\n                    {e}\r\n                </option>\r\n            ))}\r\n        </TaskSelectInput>\r\n        // </div>\r\n    );\r\n}\r\n",["265","266"],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\notes\\NewNoteButton.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\focusBoard\\FocusBoard.js",["267"],"import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport { FocussedTask } from \"./../../components/FocusBoard/FocussedTask\";\r\nimport { EmptyFocusBox } from \"./../../components/FocusBoard/EmptyFocusBox\";\r\nimport { Soundscapes } from \"./../../components/MusicBox/Soundscapes\";\r\n\r\nconst FocusBoardContainer = styled.div`\r\n    flex: 1 1 0;\r\n    min-width: 346px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    margin:0 0 0 20px;\r\n    height:100%;\r\n    /* background-color:silver; */\r\n`;\r\n\r\nconst FocussedTaskContainer = styled.div`\r\n    display: flex;\r\n    align-items:center;\r\n    justify-content: space-between;\r\n    flex-direction: column;\r\n    width: 80%;\r\n    max-width: 326px;\r\n    height: 226px;\r\n    margin: 10px 0;\r\n    /* background-color: green; */\r\n`;\r\n\r\nconst MusicBoxContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 80%;\r\n    max-width: 326px;\r\n    height: 186px;\r\n    margin: 10px 0;\r\n    background-color:${p=>p.theme.backgroundSecondary};\r\n    border-radius: 20px;\r\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\r\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\r\n`;\r\n\r\n// this can be improved as right now whole focus board is re-rendered and not just the focus task containter\r\n\r\nexport function FocusBoard() {\r\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\r\n    const noTasks = useSelector((s) => s.tasks.taskArray.length===s.tasks.meta.completedTasksCount?true:false);\r\n    const noChoice = useSelector((s) => s.tasks.taskArray.length-s.tasks.meta.completedTasksCount<=1?true:false);\r\n    return (\r\n        <FocusBoardContainer>\r\n            <FocussedTaskContainer>\r\n                {focussedTaskIndex !== -1 ? <FocussedTask /> : <EmptyFocusBox noChoice={noChoice} noTasks={noTasks}/>}\r\n            </FocussedTaskContainer>\r\n            <MusicBoxContainer>\r\n                <Soundscapes />\r\n            </MusicBoxContainer>\r\n        </FocusBoardContainer>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\customIcons\\index.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\FocusBoard\\FocussedTask.js",["268","269","270","271"],"import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n    toggleIsRunning,\r\n    tick,\r\n    updateTaskTimeByVal,\r\n    resetTaskTimer,\r\n    toggleSoundscapeState,\r\n    toggleIsCompleted,\r\n    resetFocussedTask,\r\n    rearrange,\r\n} from \"./../../containers/taskBoard/taskBoardSlice\";\r\nimport useTimer from \"../../hooks/useTimer\";\r\nimport { CircularProgressbarWithChildren, buildStyles } from \"react-circular-progressbar\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport { ResetIcon } from \"./../../components/customIcons\";\r\nimport dingSound from \"./../../sounds/ding.mp3\";\r\nimport { BsFillPauseFill, BsFillPlayFill } from \"react-icons/bs\";\r\nimport { FaClipboardCheck } from \"react-icons/fa\";\r\nimport { formattedTimeStringv2, updatePageTitle } from \"./../../helpers\";\r\nimport { MIN_TO_MS } from \"../../helpers/constants\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nlet dingSoundElement = new Audio(dingSound);\r\n\r\nconst FocussedTaskDiv = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    position: relative;\r\n    background-color: #fabb18;\r\n    width: 100%;\r\n    height: 100%;\r\n    border-radius: 20px;\r\n`;\r\n\r\nconst FocussedTaskPlayer = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 55%;\r\n    /* background-color: red; */\r\n`;\r\n\r\nconst FocussedTaskContent = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    text-align: center;\r\n    padding: 5px;\r\n    height: 30%;\r\n    width: 90%;\r\n    max-width: 376px;\r\n    border-radius: 10px;\r\n    border: 3px solid black;\r\n    word-wrap: break-word;\r\n    background-color: ${(p) => p.theme.backgroundSecondary};\r\n    color: ${(p) => p.theme.primaryText};\r\n    text-shadow: 0 0 4px rgb(248, 185, 23, 0.4);\r\n    p {\r\n        min-width: 0;\r\n        font-weight: bold;\r\n        font-size: 0.9em;\r\n        margin: 3px;\r\n    }\r\n    position: relative;\r\n    /* -webkit-box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8);\r\n    box-shadow: 0 1px 8px rgb(248, 185, 23, 0.8); */\r\n`;\r\n\r\nconst TotalTaskTimeBadge = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    text-align: center;\r\n    border-radius: 3px;\r\n    p {\r\n        font-size: 0.7em;\r\n        color: ${(p) => p.theme.secondaryText};\r\n        margin: 3px 5px;\r\n    }\r\n    background-color: #fabb18;\r\n    position: absolute;\r\n    top: 3px;\r\n    right: 3px;\r\n    opacity: 0.6;\r\n    &:hover {\r\n        opacity: 1;\r\n    }\r\n`;\r\n\r\nconst FocussedTaskTimer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    height: 80%;\r\n    width: 50%;\r\n    /* background-color: #df1aa1; */\r\n`;\r\n\r\nconst CountdownTimerDiv = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 85%;\r\n    height: 85%;\r\n    background-color: ${(p) => (p.theme.type === \"l\" ? \"#FFF\" : \"#FFE39E\")};\r\n    color: #000;\r\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\r\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.2);\r\n    border-radius: 50%;\r\n    font-weight: bold;\r\n    p {\r\n        margin: 0;\r\n        font-size: 0.9em;\r\n    }\r\n    span {\r\n        margin: 0 2px;\r\n        font-size: 0.7em;\r\n    }\r\n`;\r\n\r\nconst FocussedTaskController = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    height: 90%;\r\n    width: 30%;\r\n    /* background-color: #f1f7dd; */\r\n`;\r\n\r\nconst PlayPauseButtonDiv = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: #000;\r\n    border-radius: 50%;\r\n    margin: 10px 20px;\r\n    svg {\r\n        color: #fabb18;\r\n        font-size: 1.5em;\r\n        margin-left: ${(p) => (p.isPlayBtn ? \"3px\" : \"0\")};\r\n    }\r\n    cursor: pointer;\r\n`;\r\n\r\nconst TaskCompletedDiv = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 45px;\r\n    height: 45px;\r\n    margin: 10px 20px;\r\n    svg {\r\n        color: ${(p) => p.theme.secondaryText};\r\n        font-size: 2em;\r\n    }\r\n`;\r\n\r\nconst UpdateTimeButtonDiv = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 25px;\r\n    height: 25px;\r\n    cursor: ${(p) => (p.isDisabled ? \"default\" : \"pointer\")};\r\n    color: ${(p) => (p.isDisabled ? \"#777672\" : \"#000\")};\r\n`;\r\n\r\nconst ResetButtonDiv = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    position: absolute;\r\n    border-radius: 50%;\r\n    width: 30px;\r\n    height: 30px;\r\n    top: 7px;\r\n    left: 7px;\r\n    cursor: pointer;\r\n    background-color: #000;\r\n    svg {\r\n        color: #fabb18;\r\n        width: 20px;\r\n    }\r\n`;\r\n\r\nexport function FocussedTask() {\r\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\r\n    const autoCompleteZeroTimeTask = useSelector((s) => s.settings.autoCompleteZeroTimeTask);\r\n    let focussedTask = useSelector((state) => (focussedTaskIndex !== -1 ? state.tasks.taskArray[focussedTaskIndex] : null));\r\n    const dispatch = useDispatch();\r\n    const delay = 1010; // to account for the delay in executing code.\r\n    useTimer(\r\n        (deltaMS) => {\r\n            if (focussedTask === null) return;\r\n            else if (focussedTask.remainingTime > 0) {\r\n                dispatch(tick({ focussedTaskIndex, deltaMS }));\r\n            } else if (focussedTask.remainingTime === 0) {\r\n                dingSoundElement.play();\r\n                if (document.hidden) updatePageTitle(`Fokus: TIMER UP!!!`);\r\n                dispatch(toggleSoundscapeState(false));\r\n                dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\r\n                if (autoCompleteZeroTimeTask) {\r\n                    dispatch(resetFocussedTask());\r\n                    dispatch(toggleIsCompleted(focussedTask.id));\r\n                    dispatch(rearrange({ id: focussedTask.id, markedAsComplete: true }));\r\n                }\r\n            }\r\n        },\r\n        focussedTask !== null && focussedTask.isRunning ? delay : null\r\n    );\r\n\r\n    function updateTaskTimeHandler(val) {\r\n        if (focussedTask.time + val * MIN_TO_MS < 0) return;\r\n        if (focussedTask.time + val * MIN_TO_MS > 120 * MIN_TO_MS) return;\r\n        if (focussedTask.isRunning) dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\r\n        dispatch(updateTaskTimeByVal({ focussedTaskIndex, val }));\r\n        dispatch(toggleSoundscapeState(false));\r\n    }\r\n\r\n    function playPauseHandler(focussedTaskIndex, wasTaskRunning) {\r\n        dispatch(toggleIsRunning({ idx: focussedTaskIndex }));\r\n        if (wasTaskRunning) {\r\n            updatePageTitle(\"Task Started\");\r\n            dispatch(toggleSoundscapeState(false));\r\n\r\n        } else {\r\n            updatePageTitle(`Task: ${focussedTask.content}`);\r\n            dispatch(toggleSoundscapeState(true));\r\n            \r\n            let timeout1;\r\n            let timeout2;\r\n            let timeout3;\r\n            let timeout4;\r\n            timeout1 = setTimeout(alertFunc1, 60000);\r\n            timeout2 = setTimeout(alertFunc2, 300000);\r\n            timeout3 = setTimeout(alertFunc3, 600000);\r\n            timeout4 = setTimeout(alertFunc4, 900000);\r\n\r\n            function alertFunc1() {\r\n                dingSoundElement.play();\r\n                alert(\"Reminder!! 1 minute completed\");\r\n            }\r\n\r\n            function alertFunc2() {\r\n                dingSoundElement.play();\r\n                alert(\"Reminder!! 5 minutes completed\");\r\n            }\r\n\r\n            function alertFunc3() {\r\n                dingSoundElement.play();\r\n                alert(\"Reminder!! 10 minutes completed\");\r\n            }\r\n\r\n            function alertFunc4() {\r\n                dingSoundElement.play();\r\n                alert(\"Reminder!! 15 minutes completed\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const countdownObj = formattedTimeStringv2(focussedTask.remainingTime);\r\n    let countdownMins = countdownObj.mins;\r\n    let countdownSecs = countdownObj.secs;\r\n\r\n    const totalTaskTimeObj = formattedTimeStringv2(focussedTask.time);\r\n    let totalTaskMins = totalTaskTimeObj.mins;\r\n\r\n    return (\r\n        <FocussedTaskDiv>\r\n            <FocussedTaskPlayer>\r\n                <FocussedTaskTimer>\r\n                    <div style={{ width: 100, height: 100 }}>\r\n                        <CircularProgressbarWithChildren\r\n                            value={focussedTask.time !== 0 ? Math.floor((focussedTask.remainingTime / focussedTask.time) * 100) : 0}\r\n                            styles={buildStyles({\r\n                                strokeLinecap: \"butt\",\r\n                                pathColor: \"#121212\",\r\n                                trailColor: \"#F0F8FF\",\r\n                            })}\r\n                            strokeWidth={9}\r\n                        >\r\n                            <CountdownTimerDiv>\r\n                                <p>{countdownMins}</p>\r\n                                <span>m</span>\r\n                                <p>{countdownSecs}</p>\r\n                                <span>s</span>\r\n                            </CountdownTimerDiv>\r\n                        </CircularProgressbarWithChildren>\r\n                    </div>\r\n                </FocussedTaskTimer>\r\n\r\n                <FocussedTaskController>\r\n                    <UpdateTimeButtonDiv isDisabled={focussedTask.time + 5 * MIN_TO_MS > 120 * MIN_TO_MS} onClick={() => updateTaskTimeHandler(5)}>\r\n                        <h4>+5</h4>\r\n                    </UpdateTimeButtonDiv>\r\n\r\n                    {focussedTask.remainingTime !== 0 ? (\r\n                        <PlayPauseButtonDiv isPlayBtn={!focussedTask.isRunning} onClick={() => playPauseHandler(focussedTaskIndex, focussedTask.isRunning)}>\r\n                            {focussedTask.isRunning ? <BsFillPauseFill /> : <BsFillPlayFill />}\r\n                        </PlayPauseButtonDiv>\r\n                    ) : (\r\n                        <TaskCompletedDiv data-tip=\"\" data-for=\"taskCompleted\">\r\n                            <FaClipboardCheck />\r\n                            <ReactTooltip id=\"taskCompleted\" getContent={() => \"Task Completed\"} />\r\n                        </TaskCompletedDiv>\r\n                    )}\r\n\r\n                    <UpdateTimeButtonDiv isDisabled={focussedTask.time - 5 * MIN_TO_MS < 0} onClick={() => updateTaskTimeHandler(-5)}>\r\n                        <h4>-5</h4>\r\n                    </UpdateTimeButtonDiv>\r\n                </FocussedTaskController>\r\n\r\n                <ResetButtonDiv\r\n                    onClick={() => {\r\n                        dispatch(toggleSoundscapeState(false));\r\n                        dispatch(resetTaskTimer(focussedTaskIndex));\r\n                    }}\r\n                    data-for=\"reset\"\r\n                    data-tip=\"\"\r\n                >\r\n                    <ResetIcon />\r\n                    <ReactTooltip id=\"reset\" getContent={() => \"Reset\"} />\r\n                </ResetButtonDiv>\r\n            </FocussedTaskPlayer>\r\n            <FocussedTaskContent>\r\n                <p>{focussedTask.content}</p>\r\n                <TotalTaskTimeBadge data-tip=\"\" data-for=\"totalTimeBadge\">\r\n                    <p>{totalTaskMins}m</p>\r\n                    <ReactTooltip id=\"totalTimeBadge\" getContent={() => \"Task's total time\"} />\r\n                </TotalTaskTimeBadge>\r\n            </FocussedTaskContent>\r\n        </FocussedTaskDiv>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MiscBoard\\TimeProgressCard.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MusicBox\\MusicVolumeControl.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\hooks\\useTimer.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\dashboard\\DashboardHero.js",["272","273","274"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport betaLogoLight from \"./../../images/abcd.png\";\r\nimport betaLogoDark from \"./../../images/betaLogoDark.svg\";\r\nimport { DayDate } from \"./../../components/dashBoard/DayDate\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getFokusUsageTip } from \"./../../helpers/fokusUsageTips\";\r\n//Dashboard hero is the header of the homepage\r\n\r\nconst DashboardHeroContainer = styled.div`\r\n    flex: 1 1 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding-top:20px;\r\n    /* background-color: purple; */\r\n`;\r\n\r\nconst DashboardHeroDiv = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    width: 80%;\r\n    max-width: 736px;\r\n    height: 85%;\r\n    img {\r\n        width: 45%;\r\n    }\r\n`;\r\n\r\nconst FokusUsageTips = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 80%;\r\n    height: 12%;\r\n    p {\r\n        margin: 0;\r\n        font-size:0.8em;\r\n        font-weight:bold;\r\n        color:${p=>p.theme.primaryText}\r\n    }\r\n    //background-color: cyan; \r\n`;\r\n\r\nconst TipIcon = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 40px;\r\n    height: 100%;\r\n    border-radius: 3px;\r\n    background-color: #77dd77;a\r\n    color: ${(p) => p.theme.secondaryText};\r\n    span {\r\n        font-size: 0.9em;\r\n        font-weight: bold;\r\n    }\r\n    margin: 0 10px;\r\n`;\r\n\r\nexport function DashboardHero(p) {\r\n    const darkTheme = useSelector((s) => s.settings.darkTheme);\r\n    return (\r\n        <DashboardHeroContainer>\r\n        {/* <div> */}\r\n\r\n            <DashboardHeroDiv>\r\n                <img src={darkTheme ? betaLogoDark : betaLogoLight} alt=\"fokus\" />\r\n                <DayDate />\r\n            </DashboardHeroDiv>\r\n            \r\n        </DashboardHeroContainer>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\Navbar\\Navbar.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\taskBoard\\TaskBoard.js",["275","276","277"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { updateOrder } from \"./taskBoardSlice\";\r\nimport TaskCard from \"./../../components/TaskBoard/TaskCard\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { Flipper } from \"react-flip-toolkit\";\r\nimport { focusOnTask } from \"./taskBoardSlice\";\r\nimport styled from \"styled-components\";\r\nimport TaskInput from \"./../../components/TaskBoard/TaskInput\";\r\nimport Divider from \"./../../components/TaskBoard/Divider\";\r\nimport NoTasks from \"../../components/TaskBoard/NoTasks\";\r\n\r\nconst TaskBoardContainer = styled.div`\r\n    flex: 1 1 0;\r\n    display: flex;\r\n    min-width: 396px;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    overflow-y: scroll; // to enable scrolling by default for this flex-container only\r\n`;\r\n\r\nconst EmptySpace = styled.div`\r\n    display: flex;\r\n    min-width: 10px;\r\n    min-height: 10px;\r\n    margin: 10px;\r\n`;\r\n\r\nexport function TaskBoard() {\r\n    const tasks = useSelector((state) => state.tasks.taskArray);\r\n    const meta = useSelector((state) => state.tasks.meta);\r\n    let focussedTask = meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex] : null;\r\n    const dispatch = useDispatch();\r\n\r\n    function handleOnDragEnd(result) {\r\n        if (!result.destination) return;\r\n\r\n        let items = [...tasks.map((i) => ({ ...i }))];\r\n        const [reorderedItem] = items.splice(result.source.index, 1);\r\n        items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n        let i = result.source.index;\r\n        let direction = result.destination.index > result.source.index; // direction true means moving right & swapping\r\n        // below is logic to reset globalKeys to maintain correct sort order.\r\n        // below is logic to reset globalKeys to maintain correct sort order.\r\n        // below is logic to reset globalKeys to maintain correct sort order.\r\n        while (i != result.destination.index) {\r\n            if (direction) {\r\n                items[i].globalKey = tasks[i].globalKey;\r\n                i++;\r\n            } else {\r\n                items[i].globalKey = tasks[i].globalKey;\r\n                i--;\r\n            }\r\n\r\n            if (i == result.destination.index) {\r\n                items[i].globalKey = tasks[i].globalKey;\r\n            }\r\n        }\r\n\r\n        if (meta.focussedTaskIndex !== -1) {\r\n            let greaterIndex = Math.max(result.destination.index, result.source.index);\r\n            let smallerIndex = Math.min(result.destination.index, result.source.index);\r\n\r\n            if (result.source.index === meta.focussedTaskIndex) {\r\n                dispatch(focusOnTask(result.destination.index));\r\n            } else if (meta.focussedTaskIndex >= smallerIndex && meta.focussedTaskIndex <= greaterIndex) {\r\n                if (result.destination.index > result.source.index) {\r\n                    dispatch(focusOnTask(meta.focussedTaskIndex - 1)); // -1\r\n                } else {\r\n                    dispatch(focusOnTask(meta.focussedTaskIndex + 1)); // +1\r\n                }\r\n            }\r\n        }\r\n\r\n        dispatch(updateOrder(items)); // order is imp. focus then updateOrder\r\n    }\r\n\r\n    function getFlipKey() {\r\n        let flipKey = \"\";\r\n        tasks.forEach((i) => {\r\n            flipKey += `${i.globalKey}`;\r\n        });\r\n        flipKey += `${meta.completedTaskStartIndex}`;\r\n        return flipKey;\r\n    }\r\n\r\n    function isFocussed(id) {\r\n        if (focussedTask !== null && focussedTask.id === id) return true;\r\n        return false;\r\n    }\r\n\r\n    // input has both onChange and onKeyDown - can be optimised by using one and combining\r\n\r\n    return (\r\n        <TaskBoardContainer>\r\n            <TaskInput focussedTaskIndex={meta.focussedTaskIndex} />\r\n            {tasks.length === 0 ? <NoTasks /> : tasks.length === meta.completedTasksCount && <NoTasks allCompleted={true} />}\r\n            <Flipper flipKey={getFlipKey()}>\r\n                <DragDropContext onDragEnd={handleOnDragEnd}>\r\n                    <Droppable droppableId=\"dropArea\">\r\n                        {(provided) => (\r\n                            <div {...provided.droppableProps} ref={provided.innerRef}>\r\n                                {tasks.map((i, index) =>\r\n                                    !i.isCompleted ? (\r\n                                        <Draggable isDragDisabled={i.isCompleted} key={i.id} draggableId={`${i.id}`} index={index}>\r\n                                            {(provided2) => (\r\n                                                <TaskCard\r\n                                                    focussedTaskIndex={meta.focussedTaskIndex}\r\n                                                    focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\r\n                                                    taskIndex={index}\r\n                                                    forwardRBDProvided={provided2}\r\n                                                    task={i}\r\n                                                    isFocussed={isFocussed(i.id)}\r\n                                                />\r\n                                            )}\r\n                                        </Draggable>\r\n                                    ) : (\r\n                                        \"\"\r\n                                    )\r\n                                )}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n\r\n                {meta.completedTaskStartIndex !== -1 && <Divider />}\r\n\r\n                {meta.showCompletedTasks &&\r\n                    tasks.map((i, index) =>\r\n                        i.isCompleted ? (\r\n                            <TaskCard\r\n                                focussedTaskIndex={meta.focussedTaskIndex}\r\n                                focussedTaskGlobalKey={meta.focussedTaskIndex !== -1 ? tasks[meta.focussedTaskIndex].globalKey : -1}\r\n                                taskIndex={index}\r\n                                key={i.id}\r\n                                forwardRBDProvided={{ innerRef: null }}\r\n                                task={i}\r\n                                isFocussed={isFocussed(i.id)}\r\n                            />\r\n                        ) : (\r\n                            \"\"\r\n                        )\r\n                    )}\r\n            </Flipper>\r\n            <EmptySpace />\r\n        </TaskBoardContainer>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\login\\LoginPage.js",["278","279"],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\store\\localStorageUtils.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\taskBoard\\taskBoardSlice.js",["280","281","282","283","284"],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { MIN_TO_MS } from \"./../../helpers/constants\";\r\nimport { updatePageTitle } from \"./../../helpers\";\r\n\r\nconst labelOptions = {\r\n    work: {\r\n        color: \"#de1738\",\r\n        count: 0,\r\n    },\r\n    personal: {\r\n        color: \"#89CFF0\",\r\n        count: 0,\r\n    },\r\n    fitness: {\r\n        color: \"#76ff7a\",\r\n        count: 0,\r\n    },\r\n    metime: {\r\n        color: \"#7442c8\",\r\n        count: 0,\r\n    },\r\n    explore: {\r\n        color: \"#efc0fe\",\r\n        count: 0,\r\n    },\r\n};\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        taskArray: [],\r\n        labels: labelOptions,\r\n        soundscape: {\r\n            track: \"mute\",\r\n            isPlaying: false,\r\n            volume: 0.7,\r\n        },\r\n        meta: {\r\n            globalKey: 0,\r\n            completedTaskStartIndex: -1,\r\n            focussedTaskIndex: -1,\r\n            showCompletedTasks: true,\r\n            completedTasksCount: 0,\r\n            totalTaskListTime: 0,\r\n            remainingTaskListTime: 0,\r\n        },\r\n    },\r\n    reducers: {\r\n        create: (tasks, { payload }) => {\r\n            payload.time = payload.time * MIN_TO_MS;\r\n            payload.remainingTime = payload.remainingTime * MIN_TO_MS;\r\n            tasks.taskArray.unshift(payload);\r\n            tasks.meta.totalTaskListTime += payload.time;\r\n            tasks.meta.remainingTaskListTime += payload.time;\r\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\r\n        },\r\n        remove: (tasks, { payload }) => {\r\n            tasks.taskArray = tasks.taskArray.filter((i) => {\r\n                if (i.id !== payload) return true;\r\n                else {\r\n                    if (!i.isCompleted) {\r\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\r\n                    } else {\r\n                        tasks.meta.completedTasksCount--;\r\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\r\n                            tasks.meta.completedTaskStartIndex = -1;\r\n                        }\r\n                    }\r\n\r\n                    if (!i.isCompleted) {\r\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\r\n                    }\r\n                    tasks.meta.totalTaskListTime -= i.time;\r\n\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        updateTaskObject: (tasks, { payload }) => {\r\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\r\n        },\r\n        updateTaskContent: ({ taskArray }, { payload }) => {\r\n            taskArray.forEach((i) => {\r\n                if (i.id === payload.id) {\r\n                    i.content = payload.updatedTaskContent;\r\n                }\r\n            });\r\n        },\r\n        updateTaskLabel: ({ taskArray }, { payload }) => {\r\n            taskArray.forEach((i) => {\r\n                if (i.id === payload.id) {\r\n                    i.label = payload.label;\r\n                }\r\n            });\r\n        },\r\n        updateTaskTime: (tasks, { payload }) => {\r\n            tasks.taskArray.forEach((i) => {\r\n                if (i.id === payload.id) {\r\n                    tasks.meta.totalTaskListTime -= i.time;\r\n                    tasks.meta.remainingTaskListTime -= i.remainingTime;\r\n                    tasks.meta.totalTaskListTime += payload.updatedTime * MIN_TO_MS;\r\n                    tasks.meta.remainingTaskListTime += payload.updatedTime * MIN_TO_MS;\r\n                    i.remainingTime = payload.updatedTime * MIN_TO_MS;\r\n                    i.time = payload.updatedTime * MIN_TO_MS;\r\n                }\r\n            });\r\n        },\r\n        updateTaskTimeByVal: (tasks, { payload }) => {\r\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime + payload.val * MIN_TO_MS < 0) {\r\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\r\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\r\n            } else {\r\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\r\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * MIN_TO_MS;\r\n                tasks.meta.remainingTaskListTime += tasks.taskArray[payload.focussedTaskIndex].remainingTime;\r\n            }\r\n\r\n            if (tasks.taskArray[payload.focussedTaskIndex].time + payload.val * MIN_TO_MS < 0) {\r\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\r\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\r\n            } else {\r\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\r\n                tasks.taskArray[payload.focussedTaskIndex].time += payload.val * MIN_TO_MS;\r\n                tasks.meta.totalTaskListTime += tasks.taskArray[payload.focussedTaskIndex].time;\r\n            }\r\n        },\r\n        updateOrder: (tasks, { payload }) => {\r\n            tasks.taskArray = payload;\r\n        },\r\n        focusOnTask: (tasks, { payload }) => {\r\n            if (typeof payload === \"number\") {\r\n                tasks.meta.focussedTaskIndex = payload;\r\n            } else {\r\n                // done tasks, remaining time = 0 tasks shouldnt be picked.\r\n                let completedTaskStartIndex = tasks.meta.completedTaskStartIndex !== -1 ? tasks.meta.completedTaskStartIndex : tasks.taskArray.length;\r\n                let index = -1;\r\n                if (payload === \"smallest\") {\r\n                    let time,\r\n                        lowest = Number.POSITIVE_INFINITY;\r\n                    for (let i = 0; i < completedTaskStartIndex; i++) {\r\n                        time = tasks.taskArray[i].remainingTime;\r\n                        if (time < 1000) continue; // rem. time less than second(1000ms)\r\n                        if (time < lowest) {\r\n                            lowest = time;\r\n                            index = i;\r\n                        }\r\n                    }\r\n                } else if (payload === \"largest\") {\r\n                    let time,\r\n                        highest = Number.NEGATIVE_INFINITY;\r\n                    for (let i = 0; i < completedTaskStartIndex; i++) {\r\n                        time = tasks.taskArray[i].remainingTime;\r\n                        if (time < 1000) continue; // rem. time less than second(1000ms)\r\n                        if (time > highest) {\r\n                            highest = time;\r\n                            index = i;\r\n                        }\r\n                    }\r\n                }\r\n                updatePageTitle(`Fokus: ${tasks.taskArray[index].content}`);\r\n                tasks.meta.focussedTaskIndex = index;\r\n            }\r\n        },\r\n        resetFocussedTask: (tasks) => {\r\n            tasks.meta.focussedTaskIndex = -1;\r\n        },\r\n        tick: (tasks, { payload }) => {\r\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime -= payload.deltaMS;\r\n            tasks.meta.remainingTaskListTime -= payload.deltaMS;\r\n\r\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\r\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\r\n            }\r\n            if (tasks.meta.remainingTaskListTime < 0) {\r\n                tasks.meta.remainingTaskListTime = 0;\r\n            }\r\n        },\r\n        resetTaskTimer: (tasks, { payload }) => {\r\n            tasks.taskArray[payload].isRunning = false;\r\n\r\n            tasks.meta.remainingTaskListTime -= tasks.taskArray[payload].remainingTime;\r\n            tasks.meta.remainingTaskListTime += tasks.taskArray[payload].time;\r\n\r\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\r\n        },\r\n        toggleIsRunning: (tasks, { payload }) => {\r\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\r\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\r\n        },\r\n        toggleShowCompletedTasks: (tasks) => {\r\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\r\n        },\r\n        toggleIsCompleted: (tasks, { payload }) => {\r\n            tasks.taskArray.forEach((i) => {\r\n                if (i.id === payload) {\r\n                    if (i.isCompleted) {\r\n                        tasks.meta.remainingTaskListTime += i.remainingTime;\r\n                        --tasks.meta.completedTasksCount;\r\n                    } else {\r\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\r\n                        ++tasks.meta.completedTasksCount;\r\n                    }\r\n\r\n                    i.isCompleted = !i.isCompleted;\r\n                }\r\n            });\r\n        },\r\n        clearCompletedTasks: (tasks) => {\r\n            if (tasks.meta.completedTaskStartIndex !== -1) {\r\n                for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\r\n                    if (tasks.taskArray[i].label !== null) tasks.labels[tasks.taskArray[i].label].count--;\r\n\r\n                    tasks.meta.totalTaskListTime -= tasks.taskArray[i].time;\r\n                }\r\n\r\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\r\n                tasks.meta.completedTaskStartIndex = -1;\r\n                tasks.meta.completedTasksCount = 0;\r\n            }\r\n        },\r\n        updateLabelCount: (tasks, { payload }) => {\r\n            if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\r\n            if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\r\n        },\r\n        incrementGlobalKey: ({ meta }) => {\r\n            ++meta.globalKey;\r\n        },\r\n        rearrange: (tasks, { payload }) => {\r\n            let id = payload.id;\r\n\r\n            if (payload.markedAsComplete) {\r\n                if (tasks.meta.completedTaskStartIndex === -1) {\r\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\r\n                    let found = false;\r\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\r\n                        if (found) {\r\n                            let temp = tasks.taskArray[i];\r\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\r\n                            tasks.taskArray[i + 1] = temp;\r\n                        } else if (tasks.taskArray[i].id === id) {\r\n                            found = true;\r\n                            let temp = tasks.taskArray[i];\r\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\r\n                            tasks.taskArray[i + 1] = temp;\r\n                        }\r\n                    }\r\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\r\n                } else {\r\n                    let task, idx;\r\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\r\n                        if (tasks.taskArray[i].id === id) {\r\n                            task = tasks.taskArray[i];\r\n                            idx = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    let pos = -1;\r\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\r\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\r\n                        else {\r\n                            pos = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (pos === -1) {\r\n                        tasks.taskArray.push(task);\r\n                    } else {\r\n                        tasks.taskArray.splice(pos, 0, task);\r\n                    }\r\n                    tasks.taskArray.splice(idx, 1);\r\n                    tasks.meta.completedTaskStartIndex -= 1;\r\n                }\r\n            } else {\r\n                if (tasks.meta.completedTaskStartIndex == 0) {\r\n                    let task, idx;\r\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\r\n                        if (tasks.taskArray[i].id === id) {\r\n                            task = tasks.taskArray[i];\r\n                            idx = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    tasks.taskArray.splice(idx, 1);\r\n                    tasks.taskArray.unshift(task);\r\n                    tasks.meta.completedTaskStartIndex = 1;\r\n                } else {\r\n                    let task, idx;\r\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\r\n                        if (tasks.taskArray[i].id === id) {\r\n                            task = tasks.taskArray[i];\r\n                            idx = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    let start = tasks.meta.completedTaskStartIndex - 1;\r\n                    let pos = -1;\r\n                    for (let i = start; i >= 0; i--) {\r\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\r\n                        else {\r\n                            pos = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    tasks.taskArray.splice(idx, 1);\r\n                    if (pos === -1) {\r\n                        tasks.taskArray.unshift(task);\r\n                    } else {\r\n                        pos++;\r\n                        tasks.taskArray.splice(pos, 0, task);\r\n                    }\r\n                    tasks.meta.completedTaskStartIndex += 1;\r\n                }\r\n\r\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\r\n                    tasks.meta.completedTaskStartIndex = -1;\r\n                }\r\n            }\r\n        },\r\n        changeSoundscapeTrack: ({ soundscape }, { payload }) => {\r\n            soundscape.track = payload;\r\n        },\r\n        toggleSoundscapeState: ({ soundscape }, { payload }) => {\r\n            soundscape.isPlaying = payload;\r\n        },\r\n        updateSoundscapeVolume: ({ soundscape }, { payload }) => {\r\n            soundscape.volume = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    create,\r\n    remove,\r\n    updateTaskObject,\r\n    updateTaskContent,\r\n    updateTaskLabel,\r\n    updateTaskTime,\r\n    updateTaskTimeByVal,\r\n    focusOnTask,\r\n    resetFocussedTask,\r\n    tick,\r\n    resetTaskTimer,\r\n    toggleIsRunning,\r\n    toggleShowCompletedTasks,\r\n    toggleIsCompleted,\r\n    clearCompletedTasks,\r\n    updateOrder,\r\n    updateLabelCount,\r\n    incrementGlobalKey,\r\n    rearrange,\r\n    changeSoundscapeTrack,\r\n    toggleSoundscapeState,\r\n    updateSoundscapeVolume,\r\n} = tasksSlice.actions;\r\n\r\nexport default tasksSlice.reducer;\r\n","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\dashboard\\index.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\Divider.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\helpers\\constants.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\DefaultTaskTime.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\dashboard\\DashboardMain.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\notes\\NotesPreview.js",["285","286"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { AnimatePresence } from \"framer-motion\";\r\nimport { FaArrowRight, FaTrash, FaClipboard } from \"react-icons/fa\";\r\nimport { colorOptions, create, update, remove } from \"../../containers/notes/notesSlice\";\r\nimport { motion } from \"framer-motion\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport { AiFillEye } from \"react-icons/ai\";\r\nimport { RiFileEditFill } from \"react-icons/ri\";\r\nimport { debounce } from \"./../../helpers\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst NotesPreviewContainer = styled(motion.div)`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 0 1 0;\r\n    position: relative;\r\n    border-left: solid 1px #fabb18;\r\n    background-color: ${(p) => p.theme.backgroundSecondary};\r\n`;\r\n\r\nconst NoteContentDiv = styled.div`\r\n    width: 100%;\r\n    height: 95%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    overflow-y: auto;\r\n`;\r\n\r\nconst EditNoteInput = styled.textarea`\r\n    resize: none;\r\n    height: 100%;\r\n    padding: 20px 0 0 25px;\r\n    font-size: 1em;\r\n    font-family: monospace;\r\n    vertical-align: center;\r\n    border: none;\r\n    outline: none;\r\n    background-color: ${(p) => p.theme.backgroundSecondary};\r\n    color: ${(p) => p.theme.primaryText};\r\n    &::placeholder {\r\n        color: #c1c1d7;\r\n    }\r\n    &:focus {\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nconst MarkdownWrapper = styled.div`\r\n    padding: 20px 0 0 25px;\r\n    color: ${(p) => p.theme.primaryText};\r\n`;\r\n\r\nconst NoteActionMenu = styled.div`\r\n    width: 100%;\r\n    height: 5%;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    background-color: #fabb18;\r\n`;\r\n\r\nconst MenuActionButtonGroup = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n`;\r\n\r\nconst MenuActionButton = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 100%;\r\n    cursor: pointer;\r\n    svg {\r\n        padding: 1px 1px;\r\n        color: ${(p) => p.theme.primaryText};\r\n        font-size: 1.5em;\r\n    }\r\n    &:hover {\r\n        background-color: ${(p) => p.theme.backgroundSecondary};\r\n    }\r\n`;\r\n\r\nconst NoteColorSelectionBox = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 8px;\r\n    height: 100%;\r\n    width: 180px;\r\n    margin: 4px;\r\n`;\r\n\r\nconst ColorOption = styled.div`\r\n    display: inline-block;\r\n    width: 20px;\r\n    height: 20px;\r\n    border-radius: 50%;\r\n    cursor: pointer;\r\n    background-color: ${(p) => p.color};\r\n    background-clip: content-box;\r\n    padding: 2px;\r\n    margin: 0 3px;\r\n    border: ${(p) => (p.isSelected ? \"3px solid black\" : \"\")};\r\n`;\r\n\r\nconst debouncedUpdateNoteContent = debounce((dispatch, id, updatedNoteContent) => {\r\n    dispatch(update({ id: id, noteContent: updatedNoteContent.trim() }));\r\n}, 1000);\r\n\r\nexport default function NotesPreview({ note, setNoteInPreview }) {\r\n    const dispatch = useDispatch();\r\n    const [editNote, setEditNote] = useState();\r\n    const [noteContent, setNoteContent] = useState();\r\n    const [noteColor, setNoteColor] = useState();\r\n\r\n    useEffect(() => {\r\n        if (note !== null) {\r\n            setNoteContent(note.content);\r\n            setNoteColor(note.color);\r\n            setEditNote(true);\r\n        }\r\n    }, [note]);\r\n\r\n    const handleContentChange = (updatedNoteContent) => {\r\n        setNoteContent(updatedNoteContent);\r\n        debouncedUpdateNoteContent(dispatch, note.id, updatedNoteContent);\r\n    };\r\n\r\n    const handleColorUpdate = (note, noteColor) => {\r\n        let updatePayload = {\r\n            id: note.id,\r\n            noteColor,\r\n        };\r\n        dispatch(update(updatePayload));\r\n        setNoteColor(noteColor);\r\n    };\r\n\r\n    const handleDeleteNoteAction = (id) => {\r\n        dispatch(remove(id));\r\n        setNoteInPreview(null);\r\n    };\r\n\r\n    const handleCloseAction = () => {\r\n        dispatch(remove(null)); // clears all empty body notes\r\n        setNoteInPreview(null);\r\n    };\r\n\r\n    return (\r\n        <AnimatePresence>\r\n            <NotesPreviewContainer\r\n                initial={{\r\n                    flex: note === null ? \"0 1 0\" : \"2 1 0\",\r\n                }}\r\n                animate={{\r\n                    flex: note === null ? \"0 1 0\" : \"2 1 0\",\r\n                }}\r\n            >\r\n                {note !== null && (\r\n                    <>\r\n                        <NoteActionMenu>\r\n                            <MenuActionButtonGroup>\r\n                                <MenuActionButton onClick={() => handleCloseAction()}>\r\n                                    <FaArrowRight data-for=\"closeAction\" data-tip=\"\" />\r\n                                    <ReactTooltip id=\"closeAction\" getContent={() => \"Close Note\"} />\r\n                                </MenuActionButton>\r\n                                <MenuActionButton data-for=\"viewOrEditAction\" data-tip=\"\" onClick={() => setEditNote(!editNote)}>\r\n                                    {editNote ? <AiFillEye /> : <RiFileEditFill />}\r\n                                    <ReactTooltip id=\"viewOrEditAction\" getContent={() => (editNote ? \"View Markdown\" : \"Edit Note\")} />\r\n                                </MenuActionButton>\r\n                                <MenuActionButton onClick={() => navigator.clipboard.writeText(noteContent)}>\r\n                                    <FaClipboard data-for=\"copyAction\" data-tip=\"\" />\r\n                                    <ReactTooltip id=\"copyAction\" getContent={() => \"Copy Note\"} />\r\n                                </MenuActionButton>\r\n\r\n                                <MenuActionButton onClick={() => handleDeleteNoteAction(note.id)}>\r\n                                    <FaTrash data-for=\"deleteAction\" data-tip=\"\" />\r\n                                    <ReactTooltip id=\"deleteAction\" getContent={() => \"Delete Note\"} />\r\n                                </MenuActionButton>\r\n                            </MenuActionButtonGroup>\r\n                            <NoteColorSelectionBox>\r\n                                {Object.keys(colorOptions).map((color, idx) => (\r\n                                    <ColorOption\r\n                                        key={idx}\r\n                                        onClick={() => handleColorUpdate(note, colorOptions[color])}\r\n                                        isSelected={noteColor === colorOptions[color]}\r\n                                        color={colorOptions[color]}\r\n                                    />\r\n                                ))}\r\n                            </NoteColorSelectionBox>\r\n                        </NoteActionMenu>\r\n                        <NoteContentDiv>\r\n                            {editNote ? (\r\n                                <EditNoteInput\r\n                                    placeholder=\"Type note here..\"\r\n                                    autoFocus\r\n                                    type=\"text\"\r\n                                    value={noteContent}\r\n                                    onChange={(e) => handleContentChange(e.target.value)}\r\n                                />\r\n                            ) : (\r\n                                <MarkdownWrapper>\r\n                                    <ReactMarkdown children={noteContent} />\r\n                                </MarkdownWrapper>\r\n                            )}\r\n                        </NoteContentDiv>\r\n                    </>\r\n                )}\r\n            </NotesPreviewContainer>\r\n        </AnimatePresence>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\notes\\NoteCard.js",[],["287","288"],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\dashBoard\\DayDate.js",["289"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { BsCalendar } from \"react-icons/bs\";\r\nimport { getFormattedDate, getOrdinalSuffix } from \"../../helpers\";\r\n\r\nconst DayDateDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    justify-content: space-around;\r\n    width: 25%;\r\n    height: 55%;\r\n`;\r\n\r\nconst CalendarIconDiv = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 20%;\r\n    svg {\r\n        color: #fabb18;\r\n        font-size: 1.4em;\r\n    }\r\n`;\r\n\r\nconst DayDateText = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    justify-content: center;\r\n    width: 70%;\r\n    font-weight: bold;\r\n    font-size: 0.8em;\r\n    color: ${(p) => p.theme.primaryText};\r\n    p {\r\n        margin: 0;\r\n    }\r\n    sup {\r\n        font-size: 0.5em;\r\n    }\r\n`;\r\n\r\nexport function DayDate() {\r\n    const DateObj = getFormattedDate();\r\n    return (\r\n        <DayDateDiv>\r\n            <CalendarIconDiv>\r\n                <BsCalendar />\r\n            </CalendarIconDiv>\r\n            <DayDateText>\r\n                <span>\r\n                    {DateObj.day} {DateObj.date}\r\n                    <sup>{getOrdinalSuffix(DateObj.date)}</sup>\r\n                </span>\r\n                <p>\r\n                    {DateObj.month}, {DateObj.year}\r\n                </p>\r\n            </DayDateText>\r\n        </DayDateDiv>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\FocusBoard\\EmptyFocusBox.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MiscBoard\\ProgressRings.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\App.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\mobileView\\index.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\helpers\\index.js",["290","291","292","293","294","295","296","297","298","299","300","301"],"export function formattedTimeString(x) {\r\n    x = Math.floor(x / 1000);\r\n    let secs = x % 60;\r\n    let mins = Math.floor(x / 60);\r\n\r\n    if (secs == 0) {\r\n        secs = `00`;\r\n    } else if (secs < 10) {\r\n        secs = `0${secs}`;\r\n    }\r\n    if (mins == 0) {\r\n        mins = `00`;\r\n    } else if (mins < 10) {\r\n        mins = `0${mins}`;\r\n    }\r\n\r\n    return `${mins}:${secs}`;\r\n}\r\n\r\nexport function formattedTimeStringv2(x) {\r\n    x = Math.floor(x / 1000);\r\n    let secs = x % 60;\r\n    let mins = Math.floor(x / 60);\r\n\r\n    if (secs == 0) {\r\n        secs = `00`;\r\n    } else if (secs < 10) {\r\n        secs = `0${secs}`;\r\n    }\r\n    if (mins == 0) {\r\n        mins = `00`;\r\n    } else if (mins < 10) {\r\n        mins = `0${mins}`;\r\n    }\r\n\r\n    return { mins, secs };\r\n}\r\n\r\nexport function getFormattedDate() {\r\n    let d = new Date();\r\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\r\n    return {\r\n        day: days[d.getDay()],\r\n        month: months[d.getMonth()],\r\n        date: d.getDate(),\r\n        year: d.getFullYear(),\r\n    };\r\n}\r\n\r\nexport function getFormattedListTimeSummary(x) {\r\n    x = Math.floor(x / 1000);\r\n    let mins = Math.floor((x % 3600) / 60);\r\n    let hours = Math.floor(x / 3600);\r\n\r\n    if (mins == 0) {\r\n        mins = `00`;\r\n    } else if (mins < 10) {\r\n        mins = `0${mins}`;\r\n    }\r\n    if (hours == 0) {\r\n        hours = `0`;\r\n    } else if (hours < 10) {\r\n        hours = `${hours}`;\r\n    }\r\n\r\n    return { hours, mins };\r\n}\r\n\r\nexport function debounce(fn, wait) {\r\n    let t;\r\n    return function () {\r\n        clearTimeout(t);\r\n        t = setTimeout(() => fn.apply(this, arguments), wait);\r\n    };\r\n}\r\n\r\nexport function updatePageTitle(title) {\r\n    document.title = title;\r\n}\r\n\r\nexport function getOrdinalSuffix(i) {\r\n    let j = i % 10,\r\n        k = i % 100;\r\n    if (j == 1 && k != 11) {\r\n        return \"st\";\r\n    }\r\n    if (j == 2 && k != 12) {\r\n        return \"nd\";\r\n    }\r\n    if (j == 3 && k != 13) {\r\n        return \"rd\";\r\n    }\r\n    return \"th\";\r\n}\r\n\r\nconst MILLI_IN_30_DAYS = 2592000000;\r\nconst MILLI_IN_A_DAY = 86400000;\r\nconst MILLI_IN_A_HOUR = 3600000;\r\nconst MILLI_IN_A_MIN = 60000;\r\n\r\nexport function getTimeDifferenceForNotes(d1, d2) {\r\n    let difference = d2 - d1;\r\n\r\n    if (difference < MILLI_IN_A_HOUR) {\r\n        let minsGap = Math.floor(difference / MILLI_IN_A_MIN);\r\n        return minsGap === 0 ? `recently` : `${minsGap}mins ago`;\r\n    } else if (difference < MILLI_IN_A_DAY) {\r\n        let hoursGap = Math.floor(difference / MILLI_IN_A_HOUR);\r\n        if (hoursGap <= 1) return `${hoursGap}hr ago`;\r\n        else return `${hoursGap}hrs ago`;\r\n    } else if (difference < MILLI_IN_30_DAYS) {\r\n        let daysGap = Math.floor(difference / MILLI_IN_A_DAY);\r\n        if (daysGap <= 1) return `${daysGap}day ago`;\r\n        else return `${daysGap}days ago`;\r\n    } else {\r\n        return `30+days ago`;\r\n    }\r\n}\r\n","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\TaskCard.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\helpers\\quotes.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MiscBoard\\EmptyLabelPie.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\settings\\DefaultTaskLabel.js",[],["302","303"],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\notes\\index.js",["304"],"import React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport NotesListArea from \"./../../components/notes/NotesListArea\";\r\nimport NotesPreview from \"./../../components/notes/NotesPreview\";\r\nimport Menu from \"../menu/Menu\"\r\n\r\n\r\nconst NotesContainer = styled.div`\r\n    display: flex;\r\n    width: 100%;\r\n`;\r\n\r\nexport default function Notes() {\r\n    let [noteInPreview, setNoteInPreview] = useState(null);\r\n    return (\r\n        <>\r\n        <Menu />\r\n        <NotesContainer>\r\n            <NotesListArea setNoteInPreview={setNoteInPreview}/>\r\n            <NotesPreview setNoteInPreview={setNoteInPreview} note={noteInPreview} />\r\n        </NotesContainer>\r\n        </>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\helpers\\fokusUsageTips.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MusicBox\\musicUtils.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\notes\\NotesListArea.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\TaskBoard\\TaskFeedback.js",["305"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { debounce, getFormattedListTimeSummary } from \"../../helpers\";\r\nimport { FaClock } from \"react-icons/fa\";\r\n\r\nconst TaskFeedbackContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 80%;\r\n    margin: 0 0 10px 0;\r\n`;\r\n\r\nconst RemainingTaskListTimeDiv = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    color:${p=>p.theme.primaryText};\r\n    p {\r\n        margin: 0 3px;\r\n        font-weight: bold;\r\n        font-size: 0.8em;\r\n    }\r\n    svg {\r\n        font-size: 0.8em;\r\n        margin: 0 3px;\r\n    }\r\n    span {\r\n        margin: 0 2px;\r\n        font-size: 0.8em;\r\n    }\r\n`;\r\n\r\nconst ErrorMessage = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    color: red;\r\n    p {\r\n        margin: 0;\r\n        font-size: 0.8em;\r\n    }\r\n`;\r\n\r\nexport function TaskFeedback({ task, time, setInputValid }) {\r\n    let [error, setError] = useState(undefined);\r\n\r\n    useEffect(() => {\r\n        let errorGenerated = false;\r\n        if (task !== undefined) {\r\n            // if time is there, it should be stripped and validated first before the actual task content\r\n            let temp = task?.trim().split(\" \");\r\n            if (temp !== undefined && !isNaN(parseInt(temp[temp.length - 1]))) {\r\n                let taskTime = parseInt(temp.pop());\r\n                if (taskTime <= 0) {\r\n                    setError(\"Hmmm. Time for this task seems weird,no?\");\r\n                    errorGenerated = true;\r\n                    setInputValid(false);\r\n                    return;\r\n                } else if (taskTime > 120) {\r\n                    setError(\"Time should be <120mins for better focus !\");\r\n                    errorGenerated = true;\r\n                    setInputValid(false);\r\n                    return;\r\n                }\r\n            }\r\n            temp = temp?.join(\" \");\r\n\r\n            if (temp?.length === 0) {\r\n                setError(undefined);\r\n                errorGenerated = true;\r\n                setInputValid(false);\r\n            } else if (temp?.length < 3) {\r\n                setError(\"Task should be atleast 3 characters long.\");\r\n                errorGenerated = true;\r\n                setInputValid(false);\r\n            } else if (temp?.length > 100) {\r\n                setError(\"Hey, that's too long. Keep it short and simple.\");\r\n                errorGenerated = true;\r\n                setInputValid(false);\r\n            } else {\r\n                setError(undefined);\r\n                setInputValid(true);\r\n            }\r\n        }\r\n\r\n        if (!errorGenerated) {\r\n            // will check for error in time only if no error in task\r\n            if (time !== undefined && time !== \"\") {\r\n                let numericTime = parseInt(time);\r\n                if (numericTime <= 0 || numericTime > 120) {\r\n                    setError(\"Time should be between 1-120 mins\");\r\n                    setInputValid(false);\r\n                } else {\r\n                    setError(undefined);\r\n                    setInputValid(true);\r\n                }\r\n            }\r\n        }\r\n    }, [task, time, setInputValid]);\r\n\r\n    const remainingTaskListTime = useSelector((s) => s.tasks.meta.remainingTaskListTime);\r\n    const rTLTObj = getFormattedListTimeSummary(remainingTaskListTime);\r\n    let rTLTHours = rTLTObj.hours;\r\n    let rTLTMins = rTLTObj.mins;\r\n\r\n    return (\r\n        <TaskFeedbackContainer>\r\n            {error === undefined ? (\r\n                <RemainingTaskListTimeDiv>\r\n                    {remainingTaskListTime === 0 ? (\r\n                        <p>Create New Task</p>\r\n                    ) : (\r\n                        <>\r\n                            <FaClock />\r\n                            <p>list time:</p>\r\n                            {rTLTHours !== \"0\" && <span>{rTLTHours}h</span>}\r\n                            {rTLTMins !== \"00\" && <span>{rTLTMins}m</span>}\r\n                        </>\r\n                    )}\r\n                </RemainingTaskListTimeDiv>\r\n            ) : (\r\n                <ErrorMessage>\r\n                    <p>{error}</p>\r\n                </ErrorMessage>\r\n            )}\r\n        </TaskFeedbackContainer>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\notes\\NoteSearchInput.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\miscBoard\\MiscBoard.js",["306","307"],"import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport { LabelPie } from \"./../../components/MiscBoard/LabelPie\";\r\nimport { ProgressRings } from \"./../../components/MiscBoard/ProgressRings\";\r\nimport { TimeProgressCard } from \"./../../components/MiscBoard/TimeProgressCard\";\r\nimport { TaskProgressCard } from \"./../../components/MiscBoard/TaskProgressCard\";\r\nimport { getTodaysQuote } from \"./../../helpers/quotes\";\r\n\r\nconst MiscBoardContainer = styled.div`\r\n    flex: 1 1 0;\r\n    min-width: 346px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    justify-content: center;\r\n    height: 100%;\r\n    /* background-color:orange; */\r\n`;\r\n\r\nconst MainSummaryContainer = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    width: 80%;\r\n    max-width: 326px;\r\n    height: 226px;\r\n    margin: 10px 0;\r\n    border-radius: 20px;\r\n    background-color:${p=>p.theme.backgroundSecondary};\r\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\r\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\r\n    /* backface-visibility: hidden;\r\n    transform: translateZ(0);\r\n    transition: box-shadow 0.2s ease-in-out,transform 0.2s ease-in-out ;\r\n    &:hover {\r\n        transform: scale(1.02);\r\n        -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\r\n        box-shadow: 0 2px 10px rgba(166, 173, 201, 0.8);\r\n    } */\r\n`;\r\n\r\nconst ProgressRingContainer = styled.div`\r\n    display: flex;\r\n    width: 50%;\r\n    height: 95%;\r\n    border-radius: 10px;\r\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\r\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);*/\r\n    /* background-color: #f7f7fa;  */\r\n`;\r\n\r\nconst ProgressCardContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    width: 40%;\r\n    height: 95%;\r\n    border-radius: 10px;\r\n    /* -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\r\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\r\n    background-color: #f7adfa; */\r\n`;\r\n\r\nconst QuoteAndLabelContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    width: 80%;\r\n    max-width: 326px;\r\n    height: 186px;\r\n    margin: 10px 0;\r\n    /* background-color: purple; */\r\n`;\r\n\r\nconst LabelPieContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 45%;\r\n    height: 90%;\r\n    border-radius: 10px;\r\n    background-color:${p=>p.theme.backgroundSecondary};\r\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\r\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\r\n`;\r\n\r\nfunction getQuoteFontSize(letterCount){\r\n    let size = -0.0035*letterCount+1.3; // eqn of line with 40 - 1.1em and 180 - 0.6em\r\n    size = size.toPrecision(3);\r\n    return `${size}em`\r\n}\r\nconst QuoteContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 50%;\r\n    height: 100%;\r\n    border-radius: 10px;\r\n    position: relative;\r\n    backface-visibility: hidden;\r\n    -webkit-backface-visibility: hidden;\r\n    transform: translateZ(0);\r\n    font-weight: bold;\r\n    color:${p=>p.theme.primaryText};\r\n    p {\r\n        margin: 0 3px;\r\n        font-size: ${p=>getQuoteFontSize(p.length)};\r\n        &::before{\r\n            color:#fabb18;\r\n            content:\"“ \";\r\n        }\r\n        &::after{\r\n            color:#fabb18;\r\n            content:\" ”\";\r\n        }\r\n    }\r\n    span {\r\n        position: absolute;\r\n        bottom: 0;\r\n        right: 0;\r\n        margin: 5px;\r\n        font-size: 0.65em;\r\n        color:#fabb18;\r\n    }\r\n    transition: transform 0.2s ease-in-out;\r\n    &:hover {\r\n        transform: scale(1.2);\r\n    }\r\n`;\r\n\r\nexport function MiscBoard() {\r\n\r\n    let todaysQuote = getTodaysQuote();\r\n    return (\r\n        <MiscBoardContainer>\r\n            <MainSummaryContainer>\r\n                <ProgressRingContainer>\r\n                    <ProgressRings />\r\n                </ProgressRingContainer>\r\n                <ProgressCardContainer>\r\n                    <TaskProgressCard />\r\n                    <TimeProgressCard />\r\n                </ProgressCardContainer>\r\n            </MainSummaryContainer>\r\n\r\n            <QuoteAndLabelContainer>\r\n                <QuoteContainer length={todaysQuote.length}>\r\n                    <p>\r\n                        {todaysQuote.quote}\r\n                    </p>\r\n                    <span>&mdash; {todaysQuote.author} </span>\r\n                </QuoteContainer>\r\n                <LabelPieContainer>\r\n                    <LabelPie />\r\n                </LabelPieContainer>\r\n            </QuoteAndLabelContainer>\r\n        </MiscBoardContainer>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MiscBoard\\LabelPie.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MiscBoard\\TaskProgressCard.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\components\\MusicBox\\Soundscapes.js",["308"],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\containers\\notes\\notesSlice.js",[],"C:\\fokus3\\Productivity-App\\mini_project_main\\src\\serviceWorker.js",[],{"ruleId":"309","severity":1,"message":"310","line":7,"column":13,"nodeType":"311","messageId":"312","endLine":7,"endColumn":26},{"ruleId":"313","replacedBy":"314"},{"ruleId":"315","replacedBy":"316"},{"ruleId":"317","severity":1,"message":"318","line":157,"column":44,"nodeType":"311","endLine":157,"endColumn":55},{"ruleId":"313","replacedBy":"319"},{"ruleId":"315","replacedBy":"320"},{"ruleId":"313","replacedBy":"321"},{"ruleId":"315","replacedBy":"322"},{"ruleId":"309","severity":1,"message":"323","line":1,"column":17,"nodeType":"311","messageId":"312","endLine":1,"endColumn":25},{"ruleId":"313","replacedBy":"324"},{"ruleId":"315","replacedBy":"325"},{"ruleId":"309","severity":1,"message":"326","line":4,"column":10,"nodeType":"311","messageId":"312","endLine":4,"endColumn":23},{"ruleId":"309","severity":1,"message":"327","line":11,"column":27,"nodeType":"311","messageId":"312","endLine":11,"endColumn":33},{"ruleId":"309","severity":1,"message":"328","line":11,"column":41,"nodeType":"311","messageId":"312","endLine":11,"endColumn":46},{"ruleId":"309","severity":1,"message":"329","line":40,"column":7,"nodeType":"311","messageId":"312","endLine":40,"endColumn":27},{"ruleId":"330","severity":1,"message":"331","line":120,"column":21,"nodeType":"332","endLine":120,"endColumn":183},{"ruleId":"313","replacedBy":"333"},{"ruleId":"315","replacedBy":"334"},{"ruleId":"309","severity":1,"message":"335","line":2,"column":23,"nodeType":"311","messageId":"312","endLine":2,"endColumn":34},{"ruleId":"313","replacedBy":"336"},{"ruleId":"315","replacedBy":"337"},{"ruleId":"309","severity":1,"message":"335","line":2,"column":23,"nodeType":"311","messageId":"312","endLine":2,"endColumn":34},{"ruleId":"309","severity":1,"message":"338","line":241,"column":13,"nodeType":"311","messageId":"312","endLine":241,"endColumn":21},{"ruleId":"309","severity":1,"message":"339","line":242,"column":13,"nodeType":"311","messageId":"312","endLine":242,"endColumn":21},{"ruleId":"309","severity":1,"message":"340","line":243,"column":13,"nodeType":"311","messageId":"312","endLine":243,"endColumn":21},{"ruleId":"309","severity":1,"message":"341","line":244,"column":13,"nodeType":"311","messageId":"312","endLine":244,"endColumn":21},{"ruleId":"309","severity":1,"message":"342","line":7,"column":10,"nodeType":"311","messageId":"312","endLine":7,"endColumn":26},{"ruleId":"309","severity":1,"message":"343","line":32,"column":7,"nodeType":"311","messageId":"312","endLine":32,"endColumn":21},{"ruleId":"309","severity":1,"message":"344","line":47,"column":7,"nodeType":"311","messageId":"312","endLine":47,"endColumn":14},{"ruleId":"309","severity":1,"message":"323","line":1,"column":17,"nodeType":"311","messageId":"312","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"346","line":47,"column":18,"nodeType":"347","messageId":"348","endLine":47,"endColumn":20},{"ruleId":"345","severity":1,"message":"349","line":56,"column":19,"nodeType":"347","messageId":"348","endLine":56,"endColumn":21},{"ruleId":"309","severity":1,"message":"350","line":1,"column":27,"nodeType":"311","messageId":"312","endLine":1,"endColumn":36},{"ruleId":"309","severity":1,"message":"351","line":2,"column":10,"nodeType":"311","messageId":"312","endLine":2,"endColumn":29},{"ruleId":"345","severity":1,"message":"346","line":55,"column":52,"nodeType":"347","messageId":"348","endLine":55,"endColumn":54},{"ruleId":"345","severity":1,"message":"346","line":62,"column":64,"nodeType":"347","messageId":"348","endLine":62,"endColumn":66},{"ruleId":"345","severity":1,"message":"349","line":65,"column":64,"nodeType":"347","messageId":"348","endLine":65,"endColumn":66},{"ruleId":"345","severity":1,"message":"349","line":275,"column":56,"nodeType":"347","messageId":"348","endLine":275,"endColumn":58},{"ruleId":"345","severity":1,"message":"349","line":318,"column":56,"nodeType":"347","messageId":"348","endLine":318,"endColumn":58},{"ruleId":"309","severity":1,"message":"352","line":2,"column":23,"nodeType":"311","messageId":"312","endLine":2,"endColumn":34},{"ruleId":"309","severity":1,"message":"353","line":6,"column":24,"nodeType":"311","messageId":"312","endLine":6,"endColumn":30},{"ruleId":"313","replacedBy":"354"},{"ruleId":"315","replacedBy":"355"},{"ruleId":"309","severity":1,"message":"323","line":1,"column":17,"nodeType":"311","messageId":"312","endLine":1,"endColumn":25},{"ruleId":"345","severity":1,"message":"349","line":6,"column":14,"nodeType":"347","messageId":"348","endLine":6,"endColumn":16},{"ruleId":"345","severity":1,"message":"349","line":11,"column":14,"nodeType":"347","messageId":"348","endLine":11,"endColumn":16},{"ruleId":"345","severity":1,"message":"349","line":25,"column":14,"nodeType":"347","messageId":"348","endLine":25,"endColumn":16},{"ruleId":"345","severity":1,"message":"349","line":30,"column":14,"nodeType":"347","messageId":"348","endLine":30,"endColumn":16},{"ruleId":"345","severity":1,"message":"349","line":56,"column":14,"nodeType":"347","messageId":"348","endLine":56,"endColumn":16},{"ruleId":"345","severity":1,"message":"349","line":61,"column":15,"nodeType":"347","messageId":"348","endLine":61,"endColumn":17},{"ruleId":"345","severity":1,"message":"349","line":85,"column":11,"nodeType":"347","messageId":"348","endLine":85,"endColumn":13},{"ruleId":"345","severity":1,"message":"346","line":85,"column":21,"nodeType":"347","messageId":"348","endLine":85,"endColumn":23},{"ruleId":"345","severity":1,"message":"349","line":88,"column":11,"nodeType":"347","messageId":"348","endLine":88,"endColumn":13},{"ruleId":"345","severity":1,"message":"346","line":88,"column":21,"nodeType":"347","messageId":"348","endLine":88,"endColumn":23},{"ruleId":"345","severity":1,"message":"349","line":91,"column":11,"nodeType":"347","messageId":"348","endLine":91,"endColumn":13},{"ruleId":"345","severity":1,"message":"346","line":91,"column":21,"nodeType":"347","messageId":"348","endLine":91,"endColumn":23},{"ruleId":"313","replacedBy":"356"},{"ruleId":"315","replacedBy":"357"},{"ruleId":"309","severity":1,"message":"352","line":2,"column":10,"nodeType":"311","messageId":"312","endLine":2,"endColumn":21},{"ruleId":"309","severity":1,"message":"358","line":4,"column":10,"nodeType":"311","messageId":"312","endLine":4,"endColumn":18},{"ruleId":"309","severity":1,"message":"352","line":2,"column":10,"nodeType":"311","messageId":"312","endLine":2,"endColumn":21},{"ruleId":"309","severity":1,"message":"335","line":2,"column":23,"nodeType":"311","messageId":"312","endLine":2,"endColumn":34},{"ruleId":"309","severity":1,"message":"359","line":103,"column":36,"nodeType":"311","messageId":"312","endLine":103,"endColumn":61},"no-unused-vars","'serviceWorker' is defined but never used.","Identifier","unusedVar","no-native-reassign",["360"],"no-negated-in-lhs",["361"],"react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.",["360"],["361"],["360"],["361"],"'useState' is defined but never used.",["360"],["361"],"'IoMdAnalytics' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'AppTextLogoContainer' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["360"],["361"],"'useDispatch' is defined but never used.",["360"],["361"],"'timeout1' is assigned a value but never used.","'timeout2' is assigned a value but never used.","'timeout3' is assigned a value but never used.","'timeout4' is assigned a value but never used.","'getFokusUsageTip' is defined but never used.","'FokusUsageTips' is assigned a value but never used.","'TipIcon' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","'useEffect' is defined but never used.","'BsFillBackspaceFill' is defined but never used.","'useSelector' is defined but never used.","'create' is defined but never used.",["360"],["361"],["360"],["361"],"'debounce' is defined but never used.","'setSoundscapeAudioElement' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]