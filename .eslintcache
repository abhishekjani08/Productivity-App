[{"C:\\fokus3\\Productivity-App\\src\\index.js":"1","C:\\fokus3\\Productivity-App\\src\\store\\index.js":"2","C:\\fokus3\\Productivity-App\\src\\containers\\LandingPage.js":"3","C:\\fokus3\\Productivity-App\\src\\containers\\RegisterPage.js":"4","C:\\fokus3\\Productivity-App\\src\\helpers\\themeStyles.js":"5","C:\\fokus3\\Productivity-App\\src\\containers\\Navbar\\Navbar.js":"6","C:\\fokus3\\Productivity-App\\src\\containers\\mobileView\\index.js":"7","C:\\fokus3\\Productivity-App\\src\\containers\\settings\\settingsSlice.js":"8","C:\\fokus3\\Productivity-App\\src\\store\\localStorageUtils.js":"9","C:\\fokus3\\Productivity-App\\src\\components\\TaskBoard\\TaskCard.js":"10","C:\\fokus3\\Productivity-App\\src\\helpers\\index.js":"11","C:\\fokus3\\Productivity-App\\src\\containers\\dashboard\\DashboardHero.js":"12","C:\\fokus3\\Productivity-App\\src\\containers\\settings\\DefaultTaskLabel.js":"13","C:\\fokus3\\Productivity-App\\src\\components\\notes\\NotesPreview.js":"14","C:\\fokus3\\Productivity-App\\src\\components\\TaskBoard\\TaskFeedback.js":"15","C:\\fokus3\\Productivity-App\\src\\containers\\focusBoard\\FocusBoard.js":"16","C:\\fokus3\\Productivity-App\\src\\components\\dashBoard\\DayDate.js":"17","C:\\fokus3\\Productivity-App\\src\\components\\customIcons\\index.js":"18","C:\\fokus3\\Productivity-App\\src\\components\\MiscBoard\\ProgressRings.js":"19","C:\\fokus3\\Productivity-App\\src\\components\\FocusBoard\\EmptyFocusBox.js":"20","C:\\fokus3\\Productivity-App\\src\\components\\MusicBox\\Soundscapes.js":"21","C:\\fokus3\\Productivity-App\\src\\components\\MiscBoard\\EmptyLabelPie.js":"22","C:\\fokus3\\Productivity-App\\src\\hooks\\useTimer.js":"23","C:\\fokus3\\Productivity-App\\src\\serviceWorker.js":"24","C:\\fokus3\\Productivity-App\\src\\containers\\taskBoard\\taskBoardSlice.js":"25","C:\\fokus3\\Productivity-App\\src\\containers\\dashboard\\index.js":"26","C:\\fokus3\\Productivity-App\\src\\components\\TaskBoard\\TaskInput.js":"27","C:\\fokus3\\Productivity-App\\src\\containers\\settings\\AutoMarkDone.js":"28","C:\\fokus3\\Productivity-App\\src\\components\\notes\\NotesListArea.js":"29","C:\\fokus3\\Productivity-App\\src\\components\\TaskBoard\\TaskLabelSelect.js":"30","C:\\fokus3\\Productivity-App\\src\\components\\notes\\NewNoteButton.js":"31","C:\\fokus3\\Productivity-App\\src\\helpers\\quotes.js":"32","C:\\fokus3\\Productivity-App\\src\\components\\MiscBoard\\LabelPie.js":"33","C:\\fokus3\\Productivity-App\\src\\components\\MiscBoard\\TimeProgressCard.js":"34","C:\\fokus3\\Productivity-App\\src\\components\\MusicBox\\musicUtils.js":"35","C:\\fokus3\\Productivity-App\\src\\containers\\settings\\index.js":"36","C:\\fokus3\\Productivity-App\\src\\components\\TaskBoard\\Divider.js":"37","C:\\fokus3\\Productivity-App\\src\\helpers\\fokusUsageTips.js":"38","C:\\fokus3\\Productivity-App\\src\\components\\FocusBoard\\FocussedTask.js":"39","C:\\fokus3\\Productivity-App\\src\\containers\\App.js":"40","C:\\fokus3\\Productivity-App\\src\\containers\\settings\\NotesViewToggle.js":"41","C:\\fokus3\\Productivity-App\\src\\components\\notes\\NoteSearchInput.js":"42","C:\\fokus3\\Productivity-App\\src\\components\\MusicBox\\MusicVolumeControl.js":"43"},{"size":720,"mtime":1667764343366,"results":"44","hashOfConfig":"45"},{"size":810,"mtime":1667325383593,"results":"46","hashOfConfig":"45"},{"size":1159,"mtime":1667798209368,"results":"47","hashOfConfig":"45"},{"size":3250,"mtime":1671954647137,"results":"48","hashOfConfig":"45"},{"size":651,"mtime":1667325383121,"results":"49","hashOfConfig":"45"},{"size":236,"mtime":1667401208698,"results":"50","hashOfConfig":"45"},{"size":999,"mtime":1667325382829,"results":"51","hashOfConfig":"45"},{"size":1348,"mtime":1667325383080,"results":"52","hashOfConfig":"45"},{"size":2307,"mtime":1667325383597,"results":"53","hashOfConfig":"45"},{"size":17625,"mtime":1667325382726,"results":"54","hashOfConfig":"45"},{"size":3069,"mtime":1667325383115,"results":"55","hashOfConfig":"45"},{"size":1947,"mtime":1667423479564,"results":"56","hashOfConfig":"45"},{"size":2274,"mtime":1667325383068,"results":"57","hashOfConfig":"45"},{"size":7666,"mtime":1667723045325,"results":"58","hashOfConfig":"45"},{"size":4330,"mtime":1667325382729,"results":"59","hashOfConfig":"45"},{"size":2151,"mtime":1667325382809,"results":"60","hashOfConfig":"45"},{"size":1476,"mtime":1667808523876,"results":"61","hashOfConfig":"45"},{"size":2339,"mtime":1667808392369,"results":"62","hashOfConfig":"45"},{"size":4356,"mtime":1667325382699,"results":"63","hashOfConfig":"45"},{"size":6428,"mtime":1667767345278,"results":"64","hashOfConfig":"45"},{"size":4596,"mtime":1667820493711,"results":"65","hashOfConfig":"45"},{"size":713,"mtime":1667325382695,"results":"66","hashOfConfig":"45"},{"size":1021,"mtime":1667810547223,"results":"67","hashOfConfig":"45"},{"size":5141,"mtime":1667747436605,"results":"68","hashOfConfig":"45"},{"size":15006,"mtime":1667325383088,"results":"69","hashOfConfig":"45"},{"size":844,"mtime":1667325382803,"results":"70","hashOfConfig":"45"},{"size":7123,"mtime":1667325382731,"results":"71","hashOfConfig":"45"},{"size":1057,"mtime":1667325383054,"results":"72","hashOfConfig":"45"},{"size":2514,"mtime":1667325382752,"results":"73","hashOfConfig":"45"},{"size":1410,"mtime":1667325382734,"results":"74","hashOfConfig":"45"},{"size":1829,"mtime":1667325382745,"results":"75","hashOfConfig":"45"},{"size":20730,"mtime":1667325383118,"results":"76","hashOfConfig":"45"},{"size":2904,"mtime":1667325382697,"results":"77","hashOfConfig":"45"},{"size":3195,"mtime":1667325382702,"results":"78","hashOfConfig":"45"},{"size":1338,"mtime":1667325382714,"results":"79","hashOfConfig":"45"},{"size":2171,"mtime":1667325383075,"results":"80","hashOfConfig":"45"},{"size":2730,"mtime":1667325382718,"results":"81","hashOfConfig":"45"},{"size":2807,"mtime":1667325383109,"results":"82","hashOfConfig":"45"},{"size":11579,"mtime":1667808591408,"results":"83","hashOfConfig":"45"},{"size":3104,"mtime":1689933451661,"results":"84","hashOfConfig":"45"},{"size":1799,"mtime":1667325383072,"results":"85","hashOfConfig":"45"},{"size":1860,"mtime":1667325382750,"results":"86","hashOfConfig":"45"},{"size":1627,"mtime":1667325382704,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1gf8lq",{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"105"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"100"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"105"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"105"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"105"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"105"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"105"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"158"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\fokus3\\Productivity-App\\src\\index.js",["183"],"C:\\fokus3\\Productivity-App\\src\\store\\index.js",[],"C:\\fokus3\\Productivity-App\\src\\containers\\LandingPage.js",[],"C:\\fokus3\\Productivity-App\\src\\containers\\RegisterPage.js",[],"C:\\fokus3\\Productivity-App\\src\\helpers\\themeStyles.js",[],"C:\\fokus3\\Productivity-App\\src\\containers\\Navbar\\Navbar.js",[],["184","185"],"C:\\fokus3\\Productivity-App\\src\\containers\\mobileView\\index.js",[],"C:\\fokus3\\Productivity-App\\src\\containers\\settings\\settingsSlice.js",[],["186","187"],"C:\\fokus3\\Productivity-App\\src\\store\\localStorageUtils.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\TaskBoard\\TaskCard.js",[],"C:\\fokus3\\Productivity-App\\src\\helpers\\index.js",["188","189","190","191","192","193","194","195","196","197","198","199"],"C:\\fokus3\\Productivity-App\\src\\containers\\dashboard\\DashboardHero.js",["200","201","202"],"import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport betaLogoLight from \"./../../images/abcd.png\";\r\nimport betaLogoDark from \"./../../images/betaLogoDark.svg\";\r\nimport { DayDate } from \"./../../components/dashBoard/DayDate\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getFokusUsageTip } from \"./../../helpers/fokusUsageTips\";\r\n//Dashboard hero is the header of the homepage\r\n\r\nconst DashboardHeroContainer = styled.div`\r\n    flex: 1 1 0;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding-top:20px;\r\n    /* background-color: purple; */\r\n`;\r\n\r\nconst DashboardHeroDiv = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n    width: 80%;\r\n    max-width: 736px;\r\n    height: 85%;\r\n    img {\r\n        width: 45%;\r\n    }\r\n`;\r\n\r\nconst FokusUsageTips = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 80%;\r\n    height: 12%;\r\n    p {\r\n        margin: 0;\r\n        font-size:0.8em;\r\n        font-weight:bold;\r\n        color:${p=>p.theme.primaryText}\r\n    }\r\n    //background-color: cyan; \r\n`;\r\n\r\nconst TipIcon = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 40px;\r\n    height: 100%;\r\n    border-radius: 3px;\r\n    background-color: #77dd77;a\r\n    color: ${(p) => p.theme.secondaryText};\r\n    span {\r\n        font-size: 0.9em;\r\n        font-weight: bold;\r\n    }\r\n    margin: 0 10px;\r\n`;\r\n\r\nexport function DashboardHero(p) {\r\n    const darkTheme = useSelector((s) => s.settings.darkTheme);\r\n    return (\r\n        <DashboardHeroContainer>\r\n        {/* <div> */}\r\n\r\n            <DashboardHeroDiv>\r\n                <img src={darkTheme ? betaLogoDark : betaLogoLight} alt=\"fokus\" />\r\n                <DayDate />\r\n            </DashboardHeroDiv>\r\n            \r\n        </DashboardHeroContainer>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\src\\containers\\settings\\DefaultTaskLabel.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\notes\\NotesPreview.js",["203","204"],"C:\\fokus3\\Productivity-App\\src\\components\\TaskBoard\\TaskFeedback.js",["205"],"C:\\fokus3\\Productivity-App\\src\\containers\\focusBoard\\FocusBoard.js",["206"],"import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport \"react-circular-progressbar/dist/styles.css\";\r\nimport { FocussedTask } from \"./../../components/FocusBoard/FocussedTask\";\r\nimport { EmptyFocusBox } from \"./../../components/FocusBoard/EmptyFocusBox\";\r\nimport { Soundscapes } from \"./../../components/MusicBox/Soundscapes\";\r\n\r\nconst FocusBoardContainer = styled.div`\r\n    flex: 1 1 0;\r\n    min-width: 346px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    margin:0 0 0 20px;\r\n    height:100%;\r\n    /* background-color:silver; */\r\n`;\r\n\r\nconst FocussedTaskContainer = styled.div`\r\n    display: flex;\r\n    align-items:center;\r\n    justify-content: space-between;\r\n    flex-direction: column;\r\n    width: 80%;\r\n    max-width: 326px;\r\n    height: 226px;\r\n    margin: 10px 0;\r\n    /* background-color: green; */\r\n`;\r\n\r\nconst MusicBoxContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    width: 80%;\r\n    max-width: 326px;\r\n    height: 186px;\r\n    margin: 10px 0;\r\n    background-color:${p=>p.theme.backgroundSecondary};\r\n    border-radius: 20px;\r\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\r\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.4);\r\n`;\r\n\r\n// this can be improved as right now whole focus board is re-rendered and not just the focus task containter\r\n\r\nexport function FocusBoard() {\r\n    const focussedTaskIndex = useSelector((state) => state.tasks.meta.focussedTaskIndex);\r\n    const noTasks = useSelector((s) => s.tasks.taskArray.length===s.tasks.meta.completedTasksCount?true:false);\r\n    const noChoice = useSelector((s) => s.tasks.taskArray.length-s.tasks.meta.completedTasksCount<=1?true:false);\r\n    return (\r\n        <FocusBoardContainer>\r\n            <FocussedTaskContainer>\r\n                {focussedTaskIndex !== -1 ? <FocussedTask /> : <EmptyFocusBox noChoice={noChoice} noTasks={noTasks}/>}\r\n            </FocussedTaskContainer>\r\n            <MusicBoxContainer>\r\n                <Soundscapes />\r\n            </MusicBoxContainer>\r\n        </FocusBoardContainer>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\src\\components\\dashBoard\\DayDate.js",["207"],"import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { BsCalendar } from \"react-icons/bs\";\r\nimport { getFormattedDate, getOrdinalSuffix } from \"../../helpers\";\r\n\r\nconst DayDateDiv = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    justify-content: space-around;\r\n    width: 25%;\r\n    height: 55%;\r\n`;\r\n\r\nconst CalendarIconDiv = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 20%;\r\n    svg {\r\n        color: #fabb18;\r\n        font-size: 1.4em;\r\n    }\r\n`;\r\n\r\nconst DayDateText = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-end;\r\n    justify-content: center;\r\n    width: 70%;\r\n    font-weight: bold;\r\n    font-size: 0.8em;\r\n    color: ${(p) => p.theme.primaryText};\r\n    p {\r\n        margin: 0;\r\n    }\r\n    sup {\r\n        font-size: 0.5em;\r\n    }\r\n`;\r\n\r\nexport function DayDate() {\r\n    const DateObj = getFormattedDate();\r\n    return (\r\n        <DayDateDiv>\r\n            <CalendarIconDiv>\r\n                <BsCalendar />\r\n            </CalendarIconDiv>\r\n            <DayDateText>\r\n                <span>\r\n                    {DateObj.day} {DateObj.date}\r\n                    <sup>{getOrdinalSuffix(DateObj.date)}</sup>\r\n                </span>\r\n                <p>\r\n                    {DateObj.month}, {DateObj.year}\r\n                </p>\r\n            </DayDateText>\r\n        </DayDateDiv>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\src\\components\\customIcons\\index.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\MiscBoard\\ProgressRings.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\FocusBoard\\EmptyFocusBox.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\MusicBox\\Soundscapes.js",["208"],"C:\\fokus3\\Productivity-App\\src\\components\\MiscBoard\\EmptyLabelPie.js",[],"C:\\fokus3\\Productivity-App\\src\\hooks\\useTimer.js",[],"C:\\fokus3\\Productivity-App\\src\\serviceWorker.js",[],"C:\\fokus3\\Productivity-App\\src\\containers\\taskBoard\\taskBoardSlice.js",["209","210","211","212","213"],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { MIN_TO_MS } from \"./../../helpers/constants\";\r\nimport { updatePageTitle } from \"./../../helpers\";\r\n\r\nconst labelOptions = {\r\n    work: {\r\n        color: \"#de1738\",\r\n        count: 0,\r\n    },\r\n    personal: {\r\n        color: \"#89CFF0\",\r\n        count: 0,\r\n    },\r\n    fitness: {\r\n        color: \"#76ff7a\",\r\n        count: 0,\r\n    },\r\n    metime: {\r\n        color: \"#7442c8\",\r\n        count: 0,\r\n    },\r\n    explore: {\r\n        color: \"#efc0fe\",\r\n        count: 0,\r\n    },\r\n};\r\n\r\nexport const tasksSlice = createSlice({\r\n    name: \"tasks\",\r\n    initialState: {\r\n        taskArray: [],\r\n        labels: labelOptions,\r\n        soundscape: {\r\n            track: \"mute\",\r\n            isPlaying: false,\r\n            volume: 0.7,\r\n        },\r\n        meta: {\r\n            globalKey: 0,\r\n            completedTaskStartIndex: -1,\r\n            focussedTaskIndex: -1,\r\n            showCompletedTasks: true,\r\n            completedTasksCount: 0,\r\n            totalTaskListTime: 0,\r\n            remainingTaskListTime: 0,\r\n        },\r\n    },\r\n    reducers: {\r\n        create: (tasks, { payload }) => {\r\n            payload.time = payload.time * MIN_TO_MS;\r\n            payload.remainingTime = payload.remainingTime * MIN_TO_MS;\r\n            tasks.taskArray.unshift(payload);\r\n            tasks.meta.totalTaskListTime += payload.time;\r\n            tasks.meta.remainingTaskListTime += payload.time;\r\n            if (tasks.meta.completedTaskStartIndex != -1) ++tasks.meta.completedTaskStartIndex;\r\n        },\r\n        remove: (tasks, { payload }) => {\r\n            tasks.taskArray = tasks.taskArray.filter((i) => {\r\n                if (i.id !== payload) return true;\r\n                else {\r\n                    if (!i.isCompleted) {\r\n                        if (tasks.meta.completedTaskStartIndex != -1) --tasks.meta.completedTaskStartIndex;\r\n                    } else {\r\n                        tasks.meta.completedTasksCount--;\r\n                        if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length - 1) {\r\n                            tasks.meta.completedTaskStartIndex = -1;\r\n                        }\r\n                    }\r\n\r\n                    if (!i.isCompleted) {\r\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\r\n                    }\r\n                    tasks.meta.totalTaskListTime -= i.time;\r\n\r\n                    return false;\r\n                }\r\n            });\r\n        },\r\n        updateTaskObject: (tasks, { payload }) => {\r\n            tasks.taskArray = tasks.taskArray.map((i) => (i.id === payload.id ? payload : i));\r\n        },\r\n        updateTaskContent: ({ taskArray }, { payload }) => {\r\n            taskArray.forEach((i) => {\r\n                if (i.id === payload.id) {\r\n                    i.content = payload.updatedTaskContent;\r\n                }\r\n            });\r\n        },\r\n        updateTaskLabel: ({ taskArray }, { payload }) => {\r\n            taskArray.forEach((i) => {\r\n                if (i.id === payload.id) {\r\n                    i.label = payload.label;\r\n                }\r\n            });\r\n        },\r\n        updateTaskTime: (tasks, { payload }) => {\r\n            tasks.taskArray.forEach((i) => {\r\n                if (i.id === payload.id) {\r\n                    tasks.meta.totalTaskListTime -= i.time;\r\n                    tasks.meta.remainingTaskListTime -= i.remainingTime;\r\n                    tasks.meta.totalTaskListTime += payload.updatedTime * MIN_TO_MS;\r\n                    tasks.meta.remainingTaskListTime += payload.updatedTime * MIN_TO_MS;\r\n                    i.remainingTime = payload.updatedTime * MIN_TO_MS;\r\n                    i.time = payload.updatedTime * MIN_TO_MS;\r\n                }\r\n            });\r\n        },\r\n        updateTaskTimeByVal: (tasks, { payload }) => {\r\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime + payload.val * MIN_TO_MS < 0) {\r\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\r\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\r\n            } else {\r\n                tasks.meta.remainingTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].remainingTime;\r\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime += payload.val * MIN_TO_MS;\r\n                tasks.meta.remainingTaskListTime += tasks.taskArray[payload.focussedTaskIndex].remainingTime;\r\n            }\r\n\r\n            if (tasks.taskArray[payload.focussedTaskIndex].time + payload.val * MIN_TO_MS < 0) {\r\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\r\n                tasks.taskArray[payload.focussedTaskIndex].time = 0;\r\n            } else {\r\n                tasks.meta.totalTaskListTime -= tasks.taskArray[payload.focussedTaskIndex].time;\r\n                tasks.taskArray[payload.focussedTaskIndex].time += payload.val * MIN_TO_MS;\r\n                tasks.meta.totalTaskListTime += tasks.taskArray[payload.focussedTaskIndex].time;\r\n            }\r\n        },\r\n        updateOrder: (tasks, { payload }) => {\r\n            tasks.taskArray = payload;\r\n        },\r\n        focusOnTask: (tasks, { payload }) => {\r\n            if (typeof payload === \"number\") {\r\n                tasks.meta.focussedTaskIndex = payload;\r\n            } else {\r\n                // done tasks, remaining time = 0 tasks shouldnt be picked.\r\n                let completedTaskStartIndex = tasks.meta.completedTaskStartIndex !== -1 ? tasks.meta.completedTaskStartIndex : tasks.taskArray.length;\r\n                let index = -1;\r\n                if (payload === \"smallest\") {\r\n                    let time,\r\n                        lowest = Number.POSITIVE_INFINITY;\r\n                    for (let i = 0; i < completedTaskStartIndex; i++) {\r\n                        time = tasks.taskArray[i].remainingTime;\r\n                        if (time < 1000) continue; // rem. time less than second(1000ms)\r\n                        if (time < lowest) {\r\n                            lowest = time;\r\n                            index = i;\r\n                        }\r\n                    }\r\n                } else if (payload === \"largest\") {\r\n                    let time,\r\n                        highest = Number.NEGATIVE_INFINITY;\r\n                    for (let i = 0; i < completedTaskStartIndex; i++) {\r\n                        time = tasks.taskArray[i].remainingTime;\r\n                        if (time < 1000) continue; // rem. time less than second(1000ms)\r\n                        if (time > highest) {\r\n                            highest = time;\r\n                            index = i;\r\n                        }\r\n                    }\r\n                }\r\n                updatePageTitle(`Fokus: ${tasks.taskArray[index].content}`);\r\n                tasks.meta.focussedTaskIndex = index;\r\n            }\r\n        },\r\n        resetFocussedTask: (tasks) => {\r\n            tasks.meta.focussedTaskIndex = -1;\r\n        },\r\n        tick: (tasks, { payload }) => {\r\n            tasks.taskArray[payload.focussedTaskIndex].remainingTime -= payload.deltaMS;\r\n            tasks.meta.remainingTaskListTime -= payload.deltaMS;\r\n\r\n            if (tasks.taskArray[payload.focussedTaskIndex].remainingTime < 0) {\r\n                tasks.taskArray[payload.focussedTaskIndex].remainingTime = 0;\r\n            }\r\n            if (tasks.meta.remainingTaskListTime < 0) {\r\n                tasks.meta.remainingTaskListTime = 0;\r\n            }\r\n        },\r\n        resetTaskTimer: (tasks, { payload }) => {\r\n            tasks.taskArray[payload].isRunning = false;\r\n\r\n            tasks.meta.remainingTaskListTime -= tasks.taskArray[payload].remainingTime;\r\n            tasks.meta.remainingTaskListTime += tasks.taskArray[payload].time;\r\n\r\n            tasks.taskArray[payload].remainingTime = tasks.taskArray[payload].time;\r\n        },\r\n        toggleIsRunning: (tasks, { payload }) => {\r\n            if (payload.val !== undefined) tasks.taskArray[payload.idx].isRunning = payload.val;\r\n            else tasks.taskArray[payload.idx].isRunning = !tasks.taskArray[payload.idx].isRunning;\r\n        },\r\n        toggleShowCompletedTasks: (tasks) => {\r\n            tasks.meta.showCompletedTasks = !tasks.meta.showCompletedTasks;\r\n        },\r\n        toggleIsCompleted: (tasks, { payload }) => {\r\n            tasks.taskArray.forEach((i) => {\r\n                if (i.id === payload) {\r\n                    if (i.isCompleted) {\r\n                        tasks.meta.remainingTaskListTime += i.remainingTime;\r\n                        --tasks.meta.completedTasksCount;\r\n                    } else {\r\n                        tasks.meta.remainingTaskListTime -= i.remainingTime;\r\n                        ++tasks.meta.completedTasksCount;\r\n                    }\r\n\r\n                    i.isCompleted = !i.isCompleted;\r\n                }\r\n            });\r\n        },\r\n        clearCompletedTasks: (tasks) => {\r\n            if (tasks.meta.completedTaskStartIndex !== -1) {\r\n                for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\r\n                    if (tasks.taskArray[i].label !== null) tasks.labels[tasks.taskArray[i].label].count--;\r\n\r\n                    tasks.meta.totalTaskListTime -= tasks.taskArray[i].time;\r\n                }\r\n\r\n                tasks.taskArray.length = tasks.meta.completedTaskStartIndex;\r\n                tasks.meta.completedTaskStartIndex = -1;\r\n                tasks.meta.completedTasksCount = 0;\r\n            }\r\n        },\r\n        updateLabelCount: (tasks, { payload }) => {\r\n            if (payload.oldLabel !== null) tasks.labels[payload.oldLabel].count--;\r\n            if (payload.newLabel !== null) tasks.labels[payload.newLabel].count++;\r\n        },\r\n        incrementGlobalKey: ({ meta }) => {\r\n            ++meta.globalKey;\r\n        },\r\n        rearrange: (tasks, { payload }) => {\r\n            let id = payload.id;\r\n\r\n            if (payload.markedAsComplete) {\r\n                if (tasks.meta.completedTaskStartIndex === -1) {\r\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\r\n                    let found = false;\r\n                    for (let i = 0; i < tasks.taskArray.length - 1; i++) {\r\n                        if (found) {\r\n                            let temp = tasks.taskArray[i];\r\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\r\n                            tasks.taskArray[i + 1] = temp;\r\n                        } else if (tasks.taskArray[i].id === id) {\r\n                            found = true;\r\n                            let temp = tasks.taskArray[i];\r\n                            tasks.taskArray[i] = tasks.taskArray[i + 1];\r\n                            tasks.taskArray[i + 1] = temp;\r\n                        }\r\n                    }\r\n                    tasks.meta.completedTaskStartIndex = tasks.taskArray.length - 1;\r\n                } else {\r\n                    let task, idx;\r\n                    for (let i = 0; i < tasks.taskArray.length; i++) {\r\n                        if (tasks.taskArray[i].id === id) {\r\n                            task = tasks.taskArray[i];\r\n                            idx = i;\r\n                            break;\r\n                        }\r\n                    }\r\n                    let pos = -1;\r\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\r\n                        if (tasks.taskArray[i].globalKey > task.globalKey) continue;\r\n                        else {\r\n                            pos = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (pos === -1) {\r\n                        tasks.taskArray.push(task);\r\n                    } else {\r\n                        tasks.taskArray.splice(pos, 0, task);\r\n                    }\r\n                    tasks.taskArray.splice(idx, 1);\r\n                    tasks.meta.completedTaskStartIndex -= 1;\r\n                }\r\n            } else {\r\n                if (tasks.meta.completedTaskStartIndex == 0) {\r\n                    let task, idx;\r\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\r\n                        if (tasks.taskArray[i].id === id) {\r\n                            task = tasks.taskArray[i];\r\n                            idx = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    tasks.taskArray.splice(idx, 1);\r\n                    tasks.taskArray.unshift(task);\r\n                    tasks.meta.completedTaskStartIndex = 1;\r\n                } else {\r\n                    let task, idx;\r\n                    for (let i = tasks.meta.completedTaskStartIndex; i < tasks.taskArray.length; i++) {\r\n                        if (tasks.taskArray[i].id === id) {\r\n                            task = tasks.taskArray[i];\r\n                            idx = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    let start = tasks.meta.completedTaskStartIndex - 1;\r\n                    let pos = -1;\r\n                    for (let i = start; i >= 0; i--) {\r\n                        if (tasks.taskArray[i].globalKey < task.globalKey) continue;\r\n                        else {\r\n                            pos = i;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    tasks.taskArray.splice(idx, 1);\r\n                    if (pos === -1) {\r\n                        tasks.taskArray.unshift(task);\r\n                    } else {\r\n                        pos++;\r\n                        tasks.taskArray.splice(pos, 0, task);\r\n                    }\r\n                    tasks.meta.completedTaskStartIndex += 1;\r\n                }\r\n\r\n                if (tasks.meta.completedTaskStartIndex == tasks.taskArray.length) {\r\n                    tasks.meta.completedTaskStartIndex = -1;\r\n                }\r\n            }\r\n        },\r\n        changeSoundscapeTrack: ({ soundscape }, { payload }) => {\r\n            soundscape.track = payload;\r\n        },\r\n        toggleSoundscapeState: ({ soundscape }, { payload }) => {\r\n            soundscape.isPlaying = payload;\r\n        },\r\n        updateSoundscapeVolume: ({ soundscape }, { payload }) => {\r\n            soundscape.volume = payload;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    create,\r\n    remove,\r\n    updateTaskObject,\r\n    updateTaskContent,\r\n    updateTaskLabel,\r\n    updateTaskTime,\r\n    updateTaskTimeByVal,\r\n    focusOnTask,\r\n    resetFocussedTask,\r\n    tick,\r\n    resetTaskTimer,\r\n    toggleIsRunning,\r\n    toggleShowCompletedTasks,\r\n    toggleIsCompleted,\r\n    clearCompletedTasks,\r\n    updateOrder,\r\n    updateLabelCount,\r\n    incrementGlobalKey,\r\n    rearrange,\r\n    changeSoundscapeTrack,\r\n    toggleSoundscapeState,\r\n    updateSoundscapeVolume,\r\n} = tasksSlice.actions;\r\n\r\nexport default tasksSlice.reducer;\r\n","C:\\fokus3\\Productivity-App\\src\\containers\\dashboard\\index.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\TaskBoard\\TaskInput.js",["214"],"import React, { useCallback, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { create, incrementGlobalKey, focusOnTask, updateLabelCount } from \"./../../containers/taskBoard/taskBoardSlice\";\r\nimport styled from \"styled-components\";\r\nimport { AiFillPlusCircle, AiFillClockCircle } from \"react-icons/ai\";\r\nimport { TaskFeedback } from \"./TaskFeedback\";\r\nimport { debounce } from \"../../helpers\";\r\n\r\nconst TaskInputContainer = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    margin: 20px 0 10px 0;\r\n    width: 90%;\r\n    max-width: 396px;\r\n    border-radius: 10px;\r\n    background-color: ${(p) => p.theme.backgroundSecondary};\r\n    height: 50px;\r\n    -webkit-box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\r\n    box-shadow: 0 2px 10px rgba(166, 173, 201, 0.3);\r\n`;\r\n\r\nconst TaskContentInputDiv = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    height: 90%;\r\n    width: 70%;\r\n    margin-left: 10px;\r\n    svg {\r\n        font-size: 1.3em;\r\n        margin-right: 5px;\r\n        color: #fabb18;\r\n    }\r\n`;\r\n\r\nconst TaskContentInputField = styled.input`\r\n    height: 100%;\r\n    width: 90%;\r\n    font-size: 0.9em;\r\n    background-color: ${(p) => p.theme.backgroundSecondary};\r\n    color: ${(p) => p.theme.primaryText};\r\n    border: 0;\r\n    outline: none;\r\n    font-weight: bold;\r\n    &::placeholder {\r\n        color: #c1c1d7;\r\n    }\r\n`;\r\n\r\nconst TaskTimeInputDiv = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    height: 90%;\r\n    width: 25%;\r\n    color: #c1c1d7;\r\n    span {\r\n        font-size: 0.7em;\r\n        font-weight: bold;\r\n    }\r\n    svg {\r\n        font-size: 1.2em;\r\n        color: #fabb18;\r\n    }\r\n`;\r\n\r\nconst TaskTimeInputField = styled.input`\r\n    height: 100%;\r\n    width: 30%;\r\n    font-size: 0.9em;\r\n    text-align: center;\r\n    background-color: ${(p) => p.theme.backgroundSecondary};\r\n    color: ${(p) => p.theme.primaryText};\r\n    border: 0;\r\n    outline: none;\r\n    font-weight: bold;\r\n    &::placeholder {\r\n        color: #c1c1d7;\r\n    }\r\n    &::-webkit-inner-spin-button,\r\n    &::-webkit-outer-spin-button {\r\n        -webkit-appearance: none;\r\n        -moz-appearance: none;\r\n        appearance: none;\r\n        margin: 0;\r\n    }\r\n        input[type=\"number\"] { \r\n        -moz-appearance: textfield;   \r\n    }\r\n`;\r\n\r\nexport default function TaskInput() {\r\n\r\n    const defaultTime = useSelector((s) => s.settings.defaultTime);\r\n    const defaultLabel = useSelector((s) => s.settings.defaultLabel);\r\n\r\n    const [task, setTask] = useState(\"\");\r\n    const [time, setTime] = useState(defaultTime);\r\n\r\n    const [generateFeedbackForTask, setGenerateFeedbackForTask] = useState(undefined);\r\n    const [generateFeedbackForTime, setGenerateFeedbackForTime] = useState(undefined);\r\n    const [isInputValid,setInputValid] = useState(false);\r\n\r\n    let taskContentInputRef, taskTimeInputRef;\r\n    const meta = useSelector((s) => s.tasks.meta);\r\n    const labels = useSelector((s) => s.tasks.labels);\r\n    const dispatch = useDispatch();\r\n\r\n    function submitTask(e) {\r\n        if (e.key === \"Enter\" && task.trim().length >= 1 && isInputValid) {\r\n            let temp = task.trim().split(\" \");\r\n            // add a max time limit\r\n            let taskTime = time;\r\n            let label = defaultLabel;\r\n            if (temp.length !== 1) {\r\n                if (!isNaN(parseInt(temp[temp.length - 1]))) {\r\n                    taskTime = parseInt(temp.pop());\r\n                } else if (temp[temp.length - 1][0] === \"#\" && temp[temp.length - 1].length > 1 && \"wpfmeWPFME\".includes(temp[temp.length - 1][1])) {\r\n                    let userLabel = temp[temp.length - 1].substring(1).toLowerCase();\r\n                    let found = false;\r\n                    for (let validLabel in labels) {\r\n                        found = validLabel.includes(userLabel);\r\n                        console.log(userLabel, validLabel);\r\n                        if (found) {\r\n                            label = validLabel;\r\n                            temp.pop();\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            temp = temp.join(\" \");\r\n            let newTask = {\r\n                id: Math.floor(Math.random() * 10000),\r\n                globalKey: meta.globalKey,\r\n                content: temp,\r\n                time: taskTime,\r\n                remainingTime: taskTime,\r\n                isRunning: false,\r\n                isCompleted: false,\r\n                createdAt: new Date().toISOString(),\r\n                label: label,\r\n            };\r\n            if (meta.focussedTaskIndex !== -1) dispatch(focusOnTask(meta.focussedTaskIndex + 1));\r\n            dispatch(create(newTask));\r\n            dispatch(incrementGlobalKey());\r\n            if (label !== null) dispatch(updateLabelCount({ oldLabel: null, newLabel: label }));\r\n            setTask(\"\");\r\n            setTime(defaultTime);\r\n            taskContentInputRef.value = \"\";\r\n            taskTimeInputRef.value = \"\";\r\n            taskContentInputRef.focus();\r\n        }\r\n    }\r\n\r\n    const debouncedGenerateInputFeedback = useCallback(\r\n        debounce((task, time) => {\r\n            if (task !== undefined) setGenerateFeedbackForTask(task);\r\n            if (time !== undefined) setGenerateFeedbackForTime(time);\r\n        }, 150),\r\n        []\r\n    );\r\n\r\n    function onTaskInputChangeHandler(task) {\r\n        setTask(task);\r\n        debouncedGenerateInputFeedback(task, undefined);\r\n    }\r\n\r\n    function onTimeInputChangeHandler(time) {\r\n        setTime(time);\r\n        debouncedGenerateInputFeedback(undefined, time);\r\n    }\r\n\r\n    // improve logic - both onKeyDown and onChange executing - combining will be better.\r\n    return (\r\n        <>\r\n            <TaskInputContainer>\r\n                <TaskContentInputDiv>\r\n                    <AiFillPlusCircle onClick={() => taskContentInputRef.focus()} />\r\n                    <TaskContentInputField\r\n                        type=\"text\"\r\n                        placeholder=\"i have to focus on ...\"\r\n                        ref={(el) => (taskContentInputRef = el)}\r\n                        onChange={(e) => onTaskInputChangeHandler(e.target.value)}\r\n                        onKeyDown={submitTask}\r\n                    />\r\n                </TaskContentInputDiv>\r\n                <TaskTimeInputDiv>\r\n                    <AiFillClockCircle onClick={() => taskTimeInputRef.focus()} />\r\n                    <TaskTimeInputField\r\n                        type=\"number\"\r\n                        placeholder={defaultTime}\r\n                        ref={(el) => (taskTimeInputRef = el)}\r\n                        onChange={(e) => onTimeInputChangeHandler(e.target.value)}\r\n                        onKeyDown={submitTask}\r\n                    />\r\n                    <span>mins</span>\r\n                </TaskTimeInputDiv>\r\n            </TaskInputContainer>\r\n            <TaskFeedback task={generateFeedbackForTask} time={generateFeedbackForTime} setInputValid={setInputValid}/>\r\n        </>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\src\\containers\\settings\\AutoMarkDone.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\notes\\NotesListArea.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\TaskBoard\\TaskLabelSelect.js",["215"],"import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TaskSelectInput = styled.select`\r\n    font-weight: bold;\r\n    text-align: center;\r\n    border:0;\r\n    background-color:${p=>p.theme.backgroundSecondary};\r\n    color:${p=>p.theme.primaryText};\r\n    option{\r\n        font-weight:bold;\r\n    }\r\n`;\r\n\r\nexport default function TaskLabel(p) {\r\n    const labels = useSelector((s) => s.tasks.labels);\r\n    const [updatedLabel, setUpdatedLabel] = useState(p.taskLabel);\r\n\r\n    return (\r\n        // <div style={{ height: \"100%\", width: 80 }}>\r\n        <TaskSelectInput\r\n        autoFocus\r\n            name=\"labels\"\r\n            onBlur={() => p.onBlur(p.taskId,p.taskLabel, updatedLabel)}\r\n            defaultValue={updatedLabel}\r\n            onChange={(e) => setUpdatedLabel(e.target.value)}\r\n            onKeyDown={(e) => (e.key === \"Enter\" ? p.onBlur(p.taskId,p.taskLabel, updatedLabel) : null)}\r\n        >\r\n            <option value=\"none\">none</option> \r\n            {/* keeping option:none at top makes it show up if taskLabel is null which is desired */}\r\n            {Object.keys(labels).map((e, idx) => (\r\n                <option style={{color:`${labels[e].color}`}} key={idx} value={e}>\r\n                    {e}\r\n                </option>\r\n            ))}\r\n        </TaskSelectInput>\r\n        // </div>\r\n    );\r\n}\r\n","C:\\fokus3\\Productivity-App\\src\\components\\notes\\NewNoteButton.js",[],["216","217"],"C:\\fokus3\\Productivity-App\\src\\helpers\\quotes.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\MiscBoard\\LabelPie.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\MiscBoard\\TimeProgressCard.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\MusicBox\\musicUtils.js",[],"C:\\fokus3\\Productivity-App\\src\\containers\\settings\\index.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\TaskBoard\\Divider.js",[],"C:\\fokus3\\Productivity-App\\src\\helpers\\fokusUsageTips.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\FocusBoard\\FocussedTask.js",["218","219","220","221"],"C:\\fokus3\\Productivity-App\\src\\containers\\App.js",[],"C:\\fokus3\\Productivity-App\\src\\containers\\settings\\NotesViewToggle.js",["222"],"C:\\fokus3\\Productivity-App\\src\\components\\notes\\NoteSearchInput.js",[],"C:\\fokus3\\Productivity-App\\src\\components\\MusicBox\\MusicVolumeControl.js",[],{"ruleId":"223","severity":1,"message":"224","line":7,"column":13,"nodeType":"225","messageId":"226","endLine":7,"endColumn":26},{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","replacedBy":"230"},{"ruleId":"227","replacedBy":"231"},{"ruleId":"229","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":6,"column":14,"nodeType":"235","messageId":"236","endLine":6,"endColumn":16},{"ruleId":"233","severity":1,"message":"234","line":11,"column":14,"nodeType":"235","messageId":"236","endLine":11,"endColumn":16},{"ruleId":"233","severity":1,"message":"234","line":25,"column":14,"nodeType":"235","messageId":"236","endLine":25,"endColumn":16},{"ruleId":"233","severity":1,"message":"234","line":30,"column":14,"nodeType":"235","messageId":"236","endLine":30,"endColumn":16},{"ruleId":"233","severity":1,"message":"234","line":56,"column":14,"nodeType":"235","messageId":"236","endLine":56,"endColumn":16},{"ruleId":"233","severity":1,"message":"234","line":61,"column":15,"nodeType":"235","messageId":"236","endLine":61,"endColumn":17},{"ruleId":"233","severity":1,"message":"234","line":85,"column":11,"nodeType":"235","messageId":"236","endLine":85,"endColumn":13},{"ruleId":"233","severity":1,"message":"237","line":85,"column":21,"nodeType":"235","messageId":"236","endLine":85,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":88,"column":11,"nodeType":"235","messageId":"236","endLine":88,"endColumn":13},{"ruleId":"233","severity":1,"message":"237","line":88,"column":21,"nodeType":"235","messageId":"236","endLine":88,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":91,"column":11,"nodeType":"235","messageId":"236","endLine":91,"endColumn":13},{"ruleId":"233","severity":1,"message":"237","line":91,"column":21,"nodeType":"235","messageId":"236","endLine":91,"endColumn":23},{"ruleId":"223","severity":1,"message":"238","line":7,"column":10,"nodeType":"225","messageId":"226","endLine":7,"endColumn":26},{"ruleId":"223","severity":1,"message":"239","line":32,"column":7,"nodeType":"225","messageId":"226","endLine":32,"endColumn":21},{"ruleId":"223","severity":1,"message":"240","line":47,"column":7,"nodeType":"225","messageId":"226","endLine":47,"endColumn":14},{"ruleId":"223","severity":1,"message":"241","line":2,"column":23,"nodeType":"225","messageId":"226","endLine":2,"endColumn":34},{"ruleId":"223","severity":1,"message":"242","line":6,"column":24,"nodeType":"225","messageId":"226","endLine":6,"endColumn":30},{"ruleId":"223","severity":1,"message":"243","line":4,"column":10,"nodeType":"225","messageId":"226","endLine":4,"endColumn":18},{"ruleId":"223","severity":1,"message":"244","line":2,"column":23,"nodeType":"225","messageId":"226","endLine":2,"endColumn":34},{"ruleId":"223","severity":1,"message":"245","line":1,"column":17,"nodeType":"225","messageId":"226","endLine":1,"endColumn":25},{"ruleId":"223","severity":1,"message":"246","line":103,"column":36,"nodeType":"225","messageId":"226","endLine":103,"endColumn":61},{"ruleId":"233","severity":1,"message":"237","line":55,"column":52,"nodeType":"235","messageId":"236","endLine":55,"endColumn":54},{"ruleId":"233","severity":1,"message":"237","line":62,"column":64,"nodeType":"235","messageId":"236","endLine":62,"endColumn":66},{"ruleId":"233","severity":1,"message":"234","line":65,"column":64,"nodeType":"235","messageId":"236","endLine":65,"endColumn":66},{"ruleId":"233","severity":1,"message":"234","line":275,"column":56,"nodeType":"235","messageId":"236","endLine":275,"endColumn":58},{"ruleId":"233","severity":1,"message":"234","line":318,"column":56,"nodeType":"235","messageId":"236","endLine":318,"endColumn":58},{"ruleId":"247","severity":1,"message":"248","line":157,"column":44,"nodeType":"225","endLine":157,"endColumn":55},{"ruleId":"223","severity":1,"message":"244","line":2,"column":23,"nodeType":"225","messageId":"226","endLine":2,"endColumn":34},{"ruleId":"227","replacedBy":"249"},{"ruleId":"229","replacedBy":"250"},{"ruleId":"223","severity":1,"message":"251","line":241,"column":13,"nodeType":"225","messageId":"226","endLine":241,"endColumn":21},{"ruleId":"223","severity":1,"message":"252","line":242,"column":13,"nodeType":"225","messageId":"226","endLine":242,"endColumn":21},{"ruleId":"223","severity":1,"message":"253","line":243,"column":13,"nodeType":"225","messageId":"226","endLine":243,"endColumn":21},{"ruleId":"223","severity":1,"message":"254","line":244,"column":13,"nodeType":"225","messageId":"226","endLine":244,"endColumn":21},{"ruleId":"223","severity":1,"message":"245","line":1,"column":17,"nodeType":"225","messageId":"226","endLine":1,"endColumn":25},"no-unused-vars","'serviceWorker' is defined but never used.","Identifier","unusedVar","no-native-reassign",["255"],"no-negated-in-lhs",["256"],["255"],["256"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'getFokusUsageTip' is defined but never used.","'FokusUsageTips' is assigned a value but never used.","'TipIcon' is assigned a value but never used.","'useSelector' is defined but never used.","'create' is defined but never used.","'debounce' is defined but never used.","'useDispatch' is defined but never used.","'useState' is defined but never used.","'setSoundscapeAudioElement' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.",["255"],["256"],"'timeout1' is assigned a value but never used.","'timeout2' is assigned a value but never used.","'timeout3' is assigned a value but never used.","'timeout4' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]