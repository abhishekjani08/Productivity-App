{"id":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","dependencies":[{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/package.json","includedInParent":true,"mtime":1604545244226},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/.babelrc","includedInParent":true,"mtime":1604545244206},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/package.json","includedInParent":true,"mtime":1604360732682},{"name":"@sinonjs/commons","loc":{"line":3,"column":22},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/is-subset.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/commons/lib/index.js"}],"generated":{"js":"\"use strict\";\n\nvar forEach = require(\"@sinonjs/commons\").prototypes.set.forEach;\n\n/**\n * Returns `true` when `s1` is a subset of `s2`, `false` otherwise\n *\n * @private\n * @param  {Array|Set}  s1      The target value\n * @param  {Array|Set}  s2      The containing value\n * @param  {Function}  compare A comparison function, should return `true` when\n *                             values are considered equal\n * @returns {boolean} Returns `true` when `s1` is a subset of `s2`, `false`` otherwise\n */\nfunction isSubset(s1, s2, compare) {\n    var allContained = true;\n    forEach(s1, function(v1) {\n        var includes = false;\n        forEach(s2, function(v2) {\n            if (compare(v2, v1)) {\n                includes = true;\n            }\n        });\n        allContained = allContained && includes;\n    });\n\n    return allContained;\n}\n\nmodule.exports = isSubset;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/is-subset.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}}],"sources":{"../../../node_modules/@sinonjs/samsam/lib/is-subset.js":"\"use strict\";\n\nvar forEach = require(\"@sinonjs/commons\").prototypes.set.forEach;\n\n/**\n * Returns `true` when `s1` is a subset of `s2`, `false` otherwise\n *\n * @private\n * @param  {Array|Set}  s1      The target value\n * @param  {Array|Set}  s2      The containing value\n * @param  {Function}  compare A comparison function, should return `true` when\n *                             values are considered equal\n * @returns {boolean} Returns `true` when `s1` is a subset of `s2`, `false`` otherwise\n */\nfunction isSubset(s1, s2, compare) {\n    var allContained = true;\n    forEach(s1, function(v1) {\n        var includes = false;\n        forEach(s2, function(v2) {\n            if (compare(v2, v1)) {\n                includes = true;\n            }\n        });\n        allContained = allContained && includes;\n    });\n\n    return allContained;\n}\n\nmodule.exports = isSubset;\n"},"lineCount":31}},"error":null,"hash":"b3faaba0cac750215f1b3c2548994adb","cacheData":{"env":{}}}