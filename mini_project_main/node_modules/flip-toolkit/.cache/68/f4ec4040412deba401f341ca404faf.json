{"id":"../../../node_modules/sinon/lib/sinon/assert.js","dependencies":[{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/package.json","includedInParent":true,"mtime":1604545244226},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/.babelrc","includedInParent":true,"mtime":1604545244206},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/sinon/package.json","includedInParent":true,"mtime":1604360730717},{"name":"@sinonjs/commons","loc":{"line":10,"column":27},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/sinon/lib/sinon/assert.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/sinon/node_modules/@sinonjs/commons/lib/index.js"},{"name":"@sinonjs/samsam","loc":{"line":5,"column":28},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/sinon/lib/sinon/assert.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/samsam.js"},{"name":"./util/core/times-in-words","loc":{"line":7,"column":27},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/sinon/lib/sinon/assert.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/sinon/lib/sinon/util/core/times-in-words.js"},{"name":"./util/core/format","loc":{"line":8,"column":21},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/sinon/lib/sinon/assert.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/sinon/lib/sinon/util/core/format.js"}],"generated":{"js":"\"use strict\";\n\nvar arrayProto = require(\"@sinonjs/commons\").prototypes.array;\nvar calledInOrder = require(\"@sinonjs/commons\").calledInOrder;\nvar createMatcher = require(\"@sinonjs/samsam\").createMatcher;\nvar orderByFirstCall = require(\"@sinonjs/commons\").orderByFirstCall;\nvar timesInWords = require(\"./util/core/times-in-words\");\nvar format = require(\"./util/core/format\");\nvar stringSlice = require(\"@sinonjs/commons\").prototypes.string.slice;\nvar globalObject = require(\"@sinonjs/commons\").global;\n\nvar arraySlice = arrayProto.slice;\nvar concat = arrayProto.concat;\nvar forEach = arrayProto.forEach;\nvar join = arrayProto.join;\nvar splice = arrayProto.splice;\n\nfunction createAssertObject() {\n    var assert;\n\n    function verifyIsStub() {\n        var args = arraySlice(arguments);\n\n        forEach(args, function(method) {\n            if (!method) {\n                assert.fail(\"fake is not a spy\");\n            }\n\n            if (method.proxy && method.proxy.isSinonProxy) {\n                verifyIsStub(method.proxy);\n            } else {\n                if (typeof method !== \"function\") {\n                    assert.fail(method + \" is not a function\");\n                }\n\n                if (typeof method.getCall !== \"function\") {\n                    assert.fail(method + \" is not stubbed\");\n                }\n            }\n        });\n    }\n\n    function verifyIsValidAssertion(assertionMethod, assertionArgs) {\n        switch (assertionMethod) {\n            case \"notCalled\":\n            case \"called\":\n            case \"calledOnce\":\n            case \"calledTwice\":\n            case \"calledThrice\":\n                if (assertionArgs.length !== 0) {\n                    assert.fail(\n                        assertionMethod +\n                            \" takes 1 argument but was called with \" +\n                            (assertionArgs.length + 1) +\n                            \" arguments\"\n                    );\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    function failAssertion(object, msg) {\n        var obj = object || globalObject;\n        var failMethod = obj.fail || assert.fail;\n        failMethod.call(obj, msg);\n    }\n\n    function mirrorPropAsAssertion(name, method, message) {\n        var msg = message;\n        var meth = method;\n        if (arguments.length === 2) {\n            msg = method;\n            meth = name;\n        }\n\n        assert[name] = function(fake) {\n            verifyIsStub(fake);\n\n            var args = arraySlice(arguments, 1);\n            var failed = false;\n\n            verifyIsValidAssertion(name, args);\n\n            if (typeof meth === \"function\") {\n                failed = !meth(fake);\n            } else {\n                failed = typeof fake[meth] === \"function\" ? !fake[meth].apply(fake, args) : !fake[meth];\n            }\n\n            if (failed) {\n                failAssertion(this, (fake.printf || fake.proxy.printf).apply(fake, concat([msg], args)));\n            } else {\n                assert.pass(name);\n            }\n        };\n    }\n\n    function exposedName(prefix, prop) {\n        return !prefix || /^fail/.test(prop)\n            ? prop\n            : prefix + stringSlice(prop, 0, 1).toUpperCase() + stringSlice(prop, 1);\n    }\n\n    assert = {\n        failException: \"AssertError\",\n\n        fail: function fail(message) {\n            var error = new Error(message);\n            error.name = this.failException || assert.failException;\n\n            throw error;\n        },\n\n        pass: function pass() {\n            return;\n        },\n\n        callOrder: function assertCallOrder() {\n            verifyIsStub.apply(null, arguments);\n            var expected = \"\";\n            var actual = \"\";\n\n            if (!calledInOrder(arguments)) {\n                try {\n                    expected = join(arguments, \", \");\n                    var calls = arraySlice(arguments);\n                    var i = calls.length;\n                    while (i) {\n                        if (!calls[--i].called) {\n                            splice(calls, i, 1);\n                        }\n                    }\n                    actual = join(orderByFirstCall(calls), \", \");\n                } catch (e) {\n                    // If this fails, we'll just fall back to the blank string\n                }\n\n                failAssertion(this, \"expected \" + expected + \" to be called in order but were called as \" + actual);\n            } else {\n                assert.pass(\"callOrder\");\n            }\n        },\n\n        callCount: function assertCallCount(method, count) {\n            verifyIsStub(method);\n\n            if (method.callCount !== count) {\n                var msg = \"expected %n to be called \" + timesInWords(count) + \" but was called %c%C\";\n                failAssertion(this, method.printf(msg));\n            } else {\n                assert.pass(\"callCount\");\n            }\n        },\n\n        expose: function expose(target, options) {\n            if (!target) {\n                throw new TypeError(\"target is null or undefined\");\n            }\n\n            var o = options || {};\n            var prefix = (typeof o.prefix === \"undefined\" && \"assert\") || o.prefix;\n            var includeFail = typeof o.includeFail === \"undefined\" || Boolean(o.includeFail);\n            var instance = this;\n\n            forEach(Object.keys(instance), function(method) {\n                if (method !== \"expose\" && (includeFail || !/^(fail)/.test(method))) {\n                    target[exposedName(prefix, method)] = instance[method];\n                }\n            });\n\n            return target;\n        },\n\n        match: function match(actual, expectation) {\n            var matcher = createMatcher(expectation);\n            if (matcher.test(actual)) {\n                assert.pass(\"match\");\n            } else {\n                var formatted = [\n                    \"expected value to match\",\n                    \"    expected = \" + format(expectation),\n                    \"    actual = \" + format(actual)\n                ];\n\n                failAssertion(this, join(formatted, \"\\n\"));\n            }\n        }\n    };\n\n    mirrorPropAsAssertion(\"called\", \"expected %n to have been called at least once but was never called\");\n    mirrorPropAsAssertion(\n        \"notCalled\",\n        function(spy) {\n            return !spy.called;\n        },\n        \"expected %n to not have been called but was called %c%C\"\n    );\n    mirrorPropAsAssertion(\"calledOnce\", \"expected %n to be called once but was called %c%C\");\n    mirrorPropAsAssertion(\"calledTwice\", \"expected %n to be called twice but was called %c%C\");\n    mirrorPropAsAssertion(\"calledThrice\", \"expected %n to be called thrice but was called %c%C\");\n    mirrorPropAsAssertion(\"calledOn\", \"expected %n to be called with %1 as this but was called with %t\");\n    mirrorPropAsAssertion(\"alwaysCalledOn\", \"expected %n to always be called with %1 as this but was called with %t\");\n    mirrorPropAsAssertion(\"calledWithNew\", \"expected %n to be called with new\");\n    mirrorPropAsAssertion(\"alwaysCalledWithNew\", \"expected %n to always be called with new\");\n    mirrorPropAsAssertion(\"calledWith\", \"expected %n to be called with arguments %D\");\n    mirrorPropAsAssertion(\"calledWithMatch\", \"expected %n to be called with match %D\");\n    mirrorPropAsAssertion(\"alwaysCalledWith\", \"expected %n to always be called with arguments %D\");\n    mirrorPropAsAssertion(\"alwaysCalledWithMatch\", \"expected %n to always be called with match %D\");\n    mirrorPropAsAssertion(\"calledWithExactly\", \"expected %n to be called with exact arguments %D\");\n    mirrorPropAsAssertion(\"calledOnceWithExactly\", \"expected %n to be called once and with exact arguments %D\");\n    mirrorPropAsAssertion(\"calledOnceWithMatch\", \"expected %n to be called once and with match %D\");\n    mirrorPropAsAssertion(\"alwaysCalledWithExactly\", \"expected %n to always be called with exact arguments %D\");\n    mirrorPropAsAssertion(\"neverCalledWith\", \"expected %n to never be called with arguments %*%C\");\n    mirrorPropAsAssertion(\"neverCalledWithMatch\", \"expected %n to never be called with match %*%C\");\n    mirrorPropAsAssertion(\"threw\", \"%n did not throw exception%C\");\n    mirrorPropAsAssertion(\"alwaysThrew\", \"%n did not always throw exception%C\");\n\n    return assert;\n}\n\nmodule.exports = createAssertObject();\nmodule.exports.createAssertObject = createAssertObject;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../../../node_modules/sinon/lib/sinon/assert.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}}],"sources":{"../../../node_modules/sinon/lib/sinon/assert.js":"\"use strict\";\n\nvar arrayProto = require(\"@sinonjs/commons\").prototypes.array;\nvar calledInOrder = require(\"@sinonjs/commons\").calledInOrder;\nvar createMatcher = require(\"@sinonjs/samsam\").createMatcher;\nvar orderByFirstCall = require(\"@sinonjs/commons\").orderByFirstCall;\nvar timesInWords = require(\"./util/core/times-in-words\");\nvar format = require(\"./util/core/format\");\nvar stringSlice = require(\"@sinonjs/commons\").prototypes.string.slice;\nvar globalObject = require(\"@sinonjs/commons\").global;\n\nvar arraySlice = arrayProto.slice;\nvar concat = arrayProto.concat;\nvar forEach = arrayProto.forEach;\nvar join = arrayProto.join;\nvar splice = arrayProto.splice;\n\nfunction createAssertObject() {\n    var assert;\n\n    function verifyIsStub() {\n        var args = arraySlice(arguments);\n\n        forEach(args, function(method) {\n            if (!method) {\n                assert.fail(\"fake is not a spy\");\n            }\n\n            if (method.proxy && method.proxy.isSinonProxy) {\n                verifyIsStub(method.proxy);\n            } else {\n                if (typeof method !== \"function\") {\n                    assert.fail(method + \" is not a function\");\n                }\n\n                if (typeof method.getCall !== \"function\") {\n                    assert.fail(method + \" is not stubbed\");\n                }\n            }\n        });\n    }\n\n    function verifyIsValidAssertion(assertionMethod, assertionArgs) {\n        switch (assertionMethod) {\n            case \"notCalled\":\n            case \"called\":\n            case \"calledOnce\":\n            case \"calledTwice\":\n            case \"calledThrice\":\n                if (assertionArgs.length !== 0) {\n                    assert.fail(\n                        assertionMethod +\n                            \" takes 1 argument but was called with \" +\n                            (assertionArgs.length + 1) +\n                            \" arguments\"\n                    );\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    function failAssertion(object, msg) {\n        var obj = object || globalObject;\n        var failMethod = obj.fail || assert.fail;\n        failMethod.call(obj, msg);\n    }\n\n    function mirrorPropAsAssertion(name, method, message) {\n        var msg = message;\n        var meth = method;\n        if (arguments.length === 2) {\n            msg = method;\n            meth = name;\n        }\n\n        assert[name] = function(fake) {\n            verifyIsStub(fake);\n\n            var args = arraySlice(arguments, 1);\n            var failed = false;\n\n            verifyIsValidAssertion(name, args);\n\n            if (typeof meth === \"function\") {\n                failed = !meth(fake);\n            } else {\n                failed = typeof fake[meth] === \"function\" ? !fake[meth].apply(fake, args) : !fake[meth];\n            }\n\n            if (failed) {\n                failAssertion(this, (fake.printf || fake.proxy.printf).apply(fake, concat([msg], args)));\n            } else {\n                assert.pass(name);\n            }\n        };\n    }\n\n    function exposedName(prefix, prop) {\n        return !prefix || /^fail/.test(prop)\n            ? prop\n            : prefix + stringSlice(prop, 0, 1).toUpperCase() + stringSlice(prop, 1);\n    }\n\n    assert = {\n        failException: \"AssertError\",\n\n        fail: function fail(message) {\n            var error = new Error(message);\n            error.name = this.failException || assert.failException;\n\n            throw error;\n        },\n\n        pass: function pass() {\n            return;\n        },\n\n        callOrder: function assertCallOrder() {\n            verifyIsStub.apply(null, arguments);\n            var expected = \"\";\n            var actual = \"\";\n\n            if (!calledInOrder(arguments)) {\n                try {\n                    expected = join(arguments, \", \");\n                    var calls = arraySlice(arguments);\n                    var i = calls.length;\n                    while (i) {\n                        if (!calls[--i].called) {\n                            splice(calls, i, 1);\n                        }\n                    }\n                    actual = join(orderByFirstCall(calls), \", \");\n                } catch (e) {\n                    // If this fails, we'll just fall back to the blank string\n                }\n\n                failAssertion(this, \"expected \" + expected + \" to be called in order but were called as \" + actual);\n            } else {\n                assert.pass(\"callOrder\");\n            }\n        },\n\n        callCount: function assertCallCount(method, count) {\n            verifyIsStub(method);\n\n            if (method.callCount !== count) {\n                var msg = \"expected %n to be called \" + timesInWords(count) + \" but was called %c%C\";\n                failAssertion(this, method.printf(msg));\n            } else {\n                assert.pass(\"callCount\");\n            }\n        },\n\n        expose: function expose(target, options) {\n            if (!target) {\n                throw new TypeError(\"target is null or undefined\");\n            }\n\n            var o = options || {};\n            var prefix = (typeof o.prefix === \"undefined\" && \"assert\") || o.prefix;\n            var includeFail = typeof o.includeFail === \"undefined\" || Boolean(o.includeFail);\n            var instance = this;\n\n            forEach(Object.keys(instance), function(method) {\n                if (method !== \"expose\" && (includeFail || !/^(fail)/.test(method))) {\n                    target[exposedName(prefix, method)] = instance[method];\n                }\n            });\n\n            return target;\n        },\n\n        match: function match(actual, expectation) {\n            var matcher = createMatcher(expectation);\n            if (matcher.test(actual)) {\n                assert.pass(\"match\");\n            } else {\n                var formatted = [\n                    \"expected value to match\",\n                    \"    expected = \" + format(expectation),\n                    \"    actual = \" + format(actual)\n                ];\n\n                failAssertion(this, join(formatted, \"\\n\"));\n            }\n        }\n    };\n\n    mirrorPropAsAssertion(\"called\", \"expected %n to have been called at least once but was never called\");\n    mirrorPropAsAssertion(\n        \"notCalled\",\n        function(spy) {\n            return !spy.called;\n        },\n        \"expected %n to not have been called but was called %c%C\"\n    );\n    mirrorPropAsAssertion(\"calledOnce\", \"expected %n to be called once but was called %c%C\");\n    mirrorPropAsAssertion(\"calledTwice\", \"expected %n to be called twice but was called %c%C\");\n    mirrorPropAsAssertion(\"calledThrice\", \"expected %n to be called thrice but was called %c%C\");\n    mirrorPropAsAssertion(\"calledOn\", \"expected %n to be called with %1 as this but was called with %t\");\n    mirrorPropAsAssertion(\"alwaysCalledOn\", \"expected %n to always be called with %1 as this but was called with %t\");\n    mirrorPropAsAssertion(\"calledWithNew\", \"expected %n to be called with new\");\n    mirrorPropAsAssertion(\"alwaysCalledWithNew\", \"expected %n to always be called with new\");\n    mirrorPropAsAssertion(\"calledWith\", \"expected %n to be called with arguments %D\");\n    mirrorPropAsAssertion(\"calledWithMatch\", \"expected %n to be called with match %D\");\n    mirrorPropAsAssertion(\"alwaysCalledWith\", \"expected %n to always be called with arguments %D\");\n    mirrorPropAsAssertion(\"alwaysCalledWithMatch\", \"expected %n to always be called with match %D\");\n    mirrorPropAsAssertion(\"calledWithExactly\", \"expected %n to be called with exact arguments %D\");\n    mirrorPropAsAssertion(\"calledOnceWithExactly\", \"expected %n to be called once and with exact arguments %D\");\n    mirrorPropAsAssertion(\"calledOnceWithMatch\", \"expected %n to be called once and with match %D\");\n    mirrorPropAsAssertion(\"alwaysCalledWithExactly\", \"expected %n to always be called with exact arguments %D\");\n    mirrorPropAsAssertion(\"neverCalledWith\", \"expected %n to never be called with arguments %*%C\");\n    mirrorPropAsAssertion(\"neverCalledWithMatch\", \"expected %n to never be called with match %*%C\");\n    mirrorPropAsAssertion(\"threw\", \"%n did not throw exception%C\");\n    mirrorPropAsAssertion(\"alwaysThrew\", \"%n did not always throw exception%C\");\n\n    return assert;\n}\n\nmodule.exports = createAssertObject();\nmodule.exports.createAssertObject = createAssertObject;\n"},"lineCount":225}},"error":null,"hash":"0ecd6bd6b153c1175d17e4916ee713c3","cacheData":{"env":{}}}