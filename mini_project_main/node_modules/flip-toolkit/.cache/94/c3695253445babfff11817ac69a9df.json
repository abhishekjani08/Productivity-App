{"id":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","dependencies":[{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/package.json","includedInParent":true,"mtime":1604545244226},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/.babelrc","includedInParent":true,"mtime":1604545244206},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/package.json","includedInParent":true,"mtime":1604360732682},{"name":"@sinonjs/commons","loc":{"line":8,"column":25},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/deep-equal.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/commons/lib/index.js"},{"name":"./get-class","loc":{"line":10,"column":23},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/deep-equal.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/get-class.js"},{"name":"./identical","loc":{"line":11,"column":24},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/deep-equal.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/identical.js"},{"name":"./is-arguments","loc":{"line":12,"column":26},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/deep-equal.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/is-arguments.js"},{"name":"./is-date","loc":{"line":13,"column":21},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/deep-equal.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/is-date.js"},{"name":"./is-element","loc":{"line":14,"column":24},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/deep-equal.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/is-element.js"},{"name":"./is-map","loc":{"line":15,"column":20},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/deep-equal.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/is-map.js"},{"name":"./is-nan","loc":{"line":16,"column":20},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/deep-equal.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/is-nan.js"},{"name":"./is-object","loc":{"line":17,"column":23},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/deep-equal.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/is-object.js"},{"name":"./is-set","loc":{"line":18,"column":20},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/deep-equal.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/is-set.js"},{"name":"./is-subset","loc":{"line":19,"column":23},"parent":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/deep-equal.js","resolved":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/@sinonjs/samsam/lib/is-subset.js"}],"generated":{"js":"\"use strict\";\n\nvar valueToString = require(\"@sinonjs/commons\").valueToString;\nvar className = require(\"@sinonjs/commons\").className;\nvar typeOf = require(\"@sinonjs/commons\").typeOf;\nvar arrayProto = require(\"@sinonjs/commons\").prototypes.array;\nvar objectProto = require(\"@sinonjs/commons\").prototypes.object;\nvar mapForEach = require(\"@sinonjs/commons\").prototypes.map.forEach;\n\nvar getClass = require(\"./get-class\");\nvar identical = require(\"./identical\");\nvar isArguments = require(\"./is-arguments\");\nvar isDate = require(\"./is-date\");\nvar isElement = require(\"./is-element\");\nvar isMap = require(\"./is-map\");\nvar isNaN = require(\"./is-nan\");\nvar isObject = require(\"./is-object\");\nvar isSet = require(\"./is-set\");\nvar isSubset = require(\"./is-subset\");\n\nvar concat = arrayProto.concat;\nvar every = arrayProto.every;\nvar push = arrayProto.push;\n\nvar getTime = Date.prototype.getTime;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar indexOf = arrayProto.indexOf;\nvar keys = Object.keys;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\n/**\n * Deep equal comparison. Two values are \"deep equal\" when:\n *\n *   - They are equal, according to samsam.identical\n *   - They are both date objects representing the same time\n *   - They are both arrays containing elements that are all deepEqual\n *   - They are objects with the same set of properties, and each property\n *     in ``actual`` is deepEqual to the corresponding property in ``expectation``\n *\n * Supports cyclic objects.\n *\n * @alias module:samsam.deepEqual\n * @param {*} actual The object to examine\n * @param {*} expectation The object actual is expected to be equal to\n * @param {object} match A value to match on\n * @returns {boolean} Returns true when actual and expectation are considered equal\n */\nfunction deepEqualCyclic(actual, expectation, match) {\n    // used for cyclic comparison\n    // contain already visited objects\n    var actualObjects = [];\n    var expectationObjects = [];\n    // contain pathes (position in the object structure)\n    // of the already visited objects\n    // indexes same as in objects arrays\n    var actualPaths = [];\n    var expectationPaths = [];\n    // contains combinations of already compared objects\n    // in the manner: { \"$1['ref']$2['ref']\": true }\n    var compared = {};\n\n    // does the recursion for the deep equal check\n    // eslint-disable-next-line complexity\n    return (function deepEqual(\n        actualObj,\n        expectationObj,\n        actualPath,\n        expectationPath\n    ) {\n        // If both are matchers they must be the same instance in order to be\n        // considered equal If we didn't do that we would end up running one\n        // matcher against the other\n        if (match && match.isMatcher(expectationObj)) {\n            if (match.isMatcher(actualObj)) {\n                return actualObj === expectationObj;\n            }\n            return expectationObj.test(actualObj);\n        }\n\n        var actualType = typeof actualObj;\n        var expectationType = typeof expectationObj;\n\n        if (\n            actualObj === expectationObj ||\n            isNaN(actualObj) ||\n            isNaN(expectationObj) ||\n            actualObj === null ||\n            expectationObj === null ||\n            actualObj === undefined ||\n            expectationObj === undefined ||\n            actualType !== \"object\" ||\n            expectationType !== \"object\"\n        ) {\n            return identical(actualObj, expectationObj);\n        }\n\n        // Elements are only equal if identical(expected, actual)\n        if (isElement(actualObj) || isElement(expectationObj)) {\n            return false;\n        }\n\n        var isActualDate = isDate(actualObj);\n        var isExpectationDate = isDate(expectationObj);\n        if (isActualDate || isExpectationDate) {\n            if (\n                !isActualDate ||\n                !isExpectationDate ||\n                getTime.call(actualObj) !== getTime.call(expectationObj)\n            ) {\n                return false;\n            }\n        }\n\n        if (actualObj instanceof RegExp && expectationObj instanceof RegExp) {\n            if (valueToString(actualObj) !== valueToString(expectationObj)) {\n                return false;\n            }\n        }\n\n        if (actualObj instanceof Error && expectationObj instanceof Error) {\n            return actualObj === expectationObj;\n        }\n\n        var actualClass = getClass(actualObj);\n        var expectationClass = getClass(expectationObj);\n        var actualKeys = keys(actualObj);\n        var expectationKeys = keys(expectationObj);\n        var actualName = className(actualObj);\n        var expectationName = className(expectationObj);\n        var expectationSymbols =\n            typeOf(getOwnPropertySymbols) === \"function\"\n                ? getOwnPropertySymbols(expectationObj)\n                : /* istanbul ignore next: cannot collect coverage for engine that doesn't support Symbol */\n                  [];\n        var expectationKeysAndSymbols = concat(\n            expectationKeys,\n            expectationSymbols\n        );\n\n        if (isArguments(actualObj) || isArguments(expectationObj)) {\n            if (actualObj.length !== expectationObj.length) {\n                return false;\n            }\n        } else {\n            if (\n                actualType !== expectationType ||\n                actualClass !== expectationClass ||\n                actualKeys.length !== expectationKeys.length ||\n                (actualName &&\n                    expectationName &&\n                    actualName !== expectationName)\n            ) {\n                return false;\n            }\n        }\n\n        if (isSet(actualObj) || isSet(expectationObj)) {\n            if (\n                !isSet(actualObj) ||\n                !isSet(expectationObj) ||\n                actualObj.size !== expectationObj.size\n            ) {\n                return false;\n            }\n\n            return isSubset(actualObj, expectationObj, deepEqual);\n        }\n\n        if (isMap(actualObj) || isMap(expectationObj)) {\n            if (\n                !isMap(actualObj) ||\n                !isMap(expectationObj) ||\n                actualObj.size !== expectationObj.size\n            ) {\n                return false;\n            }\n\n            var mapsDeeplyEqual = true;\n            mapForEach(actualObj, function(value, key) {\n                mapsDeeplyEqual =\n                    mapsDeeplyEqual &&\n                    deepEqualCyclic(value, expectationObj.get(key));\n            });\n\n            return mapsDeeplyEqual;\n        }\n\n        return every(expectationKeysAndSymbols, function(key) {\n            if (!hasOwnProperty(actualObj, key)) {\n                return false;\n            }\n\n            var actualValue = actualObj[key];\n            var expectationValue = expectationObj[key];\n            var actualObject = isObject(actualValue);\n            var expectationObject = isObject(expectationValue);\n            // determines, if the objects were already visited\n            // (it's faster to check for isObject first, than to\n            // get -1 from getIndex for non objects)\n            var actualIndex = actualObject\n                ? indexOf(actualObjects, actualValue)\n                : -1;\n            var expectationIndex = expectationObject\n                ? indexOf(expectationObjects, expectationValue)\n                : -1;\n            // determines the new paths of the objects\n            // - for non cyclic objects the current path will be extended\n            //   by current property name\n            // - for cyclic objects the stored path is taken\n            var newActualPath =\n                actualIndex !== -1\n                    ? actualPaths[actualIndex]\n                    : actualPath + \"[\" + JSON.stringify(key) + \"]\";\n            var newExpectationPath =\n                expectationIndex !== -1\n                    ? expectationPaths[expectationIndex]\n                    : expectationPath + \"[\" + JSON.stringify(key) + \"]\";\n            var combinedPath = newActualPath + newExpectationPath;\n\n            // stop recursion if current objects are already compared\n            if (compared[combinedPath]) {\n                return true;\n            }\n\n            // remember the current objects and their paths\n            if (actualIndex === -1 && actualObject) {\n                push(actualObjects, actualValue);\n                push(actualPaths, newActualPath);\n            }\n            if (expectationIndex === -1 && expectationObject) {\n                push(expectationObjects, expectationValue);\n                push(expectationPaths, newExpectationPath);\n            }\n\n            // remember that the current objects are already compared\n            if (actualObject && expectationObject) {\n                compared[combinedPath] = true;\n            }\n\n            // End of cyclic logic\n\n            // neither actualValue nor expectationValue is a cycle\n            // continue with next level\n            return deepEqual(\n                actualValue,\n                expectationValue,\n                newActualPath,\n                newExpectationPath\n            );\n        });\n    })(actual, expectation, \"$1\", \"$2\");\n}\n\ndeepEqualCyclic.use = function(match) {\n    return function deepEqual(a, b) {\n        return deepEqualCyclic(a, b, match);\n    };\n};\n\nmodule.exports = deepEqualCyclic;\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}}],"sources":{"../../../node_modules/@sinonjs/samsam/lib/deep-equal.js":"\"use strict\";\n\nvar valueToString = require(\"@sinonjs/commons\").valueToString;\nvar className = require(\"@sinonjs/commons\").className;\nvar typeOf = require(\"@sinonjs/commons\").typeOf;\nvar arrayProto = require(\"@sinonjs/commons\").prototypes.array;\nvar objectProto = require(\"@sinonjs/commons\").prototypes.object;\nvar mapForEach = require(\"@sinonjs/commons\").prototypes.map.forEach;\n\nvar getClass = require(\"./get-class\");\nvar identical = require(\"./identical\");\nvar isArguments = require(\"./is-arguments\");\nvar isDate = require(\"./is-date\");\nvar isElement = require(\"./is-element\");\nvar isMap = require(\"./is-map\");\nvar isNaN = require(\"./is-nan\");\nvar isObject = require(\"./is-object\");\nvar isSet = require(\"./is-set\");\nvar isSubset = require(\"./is-subset\");\n\nvar concat = arrayProto.concat;\nvar every = arrayProto.every;\nvar push = arrayProto.push;\n\nvar getTime = Date.prototype.getTime;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar indexOf = arrayProto.indexOf;\nvar keys = Object.keys;\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\n/**\n * Deep equal comparison. Two values are \"deep equal\" when:\n *\n *   - They are equal, according to samsam.identical\n *   - They are both date objects representing the same time\n *   - They are both arrays containing elements that are all deepEqual\n *   - They are objects with the same set of properties, and each property\n *     in ``actual`` is deepEqual to the corresponding property in ``expectation``\n *\n * Supports cyclic objects.\n *\n * @alias module:samsam.deepEqual\n * @param {*} actual The object to examine\n * @param {*} expectation The object actual is expected to be equal to\n * @param {object} match A value to match on\n * @returns {boolean} Returns true when actual and expectation are considered equal\n */\nfunction deepEqualCyclic(actual, expectation, match) {\n    // used for cyclic comparison\n    // contain already visited objects\n    var actualObjects = [];\n    var expectationObjects = [];\n    // contain pathes (position in the object structure)\n    // of the already visited objects\n    // indexes same as in objects arrays\n    var actualPaths = [];\n    var expectationPaths = [];\n    // contains combinations of already compared objects\n    // in the manner: { \"$1['ref']$2['ref']\": true }\n    var compared = {};\n\n    // does the recursion for the deep equal check\n    // eslint-disable-next-line complexity\n    return (function deepEqual(\n        actualObj,\n        expectationObj,\n        actualPath,\n        expectationPath\n    ) {\n        // If both are matchers they must be the same instance in order to be\n        // considered equal If we didn't do that we would end up running one\n        // matcher against the other\n        if (match && match.isMatcher(expectationObj)) {\n            if (match.isMatcher(actualObj)) {\n                return actualObj === expectationObj;\n            }\n            return expectationObj.test(actualObj);\n        }\n\n        var actualType = typeof actualObj;\n        var expectationType = typeof expectationObj;\n\n        if (\n            actualObj === expectationObj ||\n            isNaN(actualObj) ||\n            isNaN(expectationObj) ||\n            actualObj === null ||\n            expectationObj === null ||\n            actualObj === undefined ||\n            expectationObj === undefined ||\n            actualType !== \"object\" ||\n            expectationType !== \"object\"\n        ) {\n            return identical(actualObj, expectationObj);\n        }\n\n        // Elements are only equal if identical(expected, actual)\n        if (isElement(actualObj) || isElement(expectationObj)) {\n            return false;\n        }\n\n        var isActualDate = isDate(actualObj);\n        var isExpectationDate = isDate(expectationObj);\n        if (isActualDate || isExpectationDate) {\n            if (\n                !isActualDate ||\n                !isExpectationDate ||\n                getTime.call(actualObj) !== getTime.call(expectationObj)\n            ) {\n                return false;\n            }\n        }\n\n        if (actualObj instanceof RegExp && expectationObj instanceof RegExp) {\n            if (valueToString(actualObj) !== valueToString(expectationObj)) {\n                return false;\n            }\n        }\n\n        if (actualObj instanceof Error && expectationObj instanceof Error) {\n            return actualObj === expectationObj;\n        }\n\n        var actualClass = getClass(actualObj);\n        var expectationClass = getClass(expectationObj);\n        var actualKeys = keys(actualObj);\n        var expectationKeys = keys(expectationObj);\n        var actualName = className(actualObj);\n        var expectationName = className(expectationObj);\n        var expectationSymbols =\n            typeOf(getOwnPropertySymbols) === \"function\"\n                ? getOwnPropertySymbols(expectationObj)\n                : /* istanbul ignore next: cannot collect coverage for engine that doesn't support Symbol */\n                  [];\n        var expectationKeysAndSymbols = concat(\n            expectationKeys,\n            expectationSymbols\n        );\n\n        if (isArguments(actualObj) || isArguments(expectationObj)) {\n            if (actualObj.length !== expectationObj.length) {\n                return false;\n            }\n        } else {\n            if (\n                actualType !== expectationType ||\n                actualClass !== expectationClass ||\n                actualKeys.length !== expectationKeys.length ||\n                (actualName &&\n                    expectationName &&\n                    actualName !== expectationName)\n            ) {\n                return false;\n            }\n        }\n\n        if (isSet(actualObj) || isSet(expectationObj)) {\n            if (\n                !isSet(actualObj) ||\n                !isSet(expectationObj) ||\n                actualObj.size !== expectationObj.size\n            ) {\n                return false;\n            }\n\n            return isSubset(actualObj, expectationObj, deepEqual);\n        }\n\n        if (isMap(actualObj) || isMap(expectationObj)) {\n            if (\n                !isMap(actualObj) ||\n                !isMap(expectationObj) ||\n                actualObj.size !== expectationObj.size\n            ) {\n                return false;\n            }\n\n            var mapsDeeplyEqual = true;\n            mapForEach(actualObj, function(value, key) {\n                mapsDeeplyEqual =\n                    mapsDeeplyEqual &&\n                    deepEqualCyclic(value, expectationObj.get(key));\n            });\n\n            return mapsDeeplyEqual;\n        }\n\n        return every(expectationKeysAndSymbols, function(key) {\n            if (!hasOwnProperty(actualObj, key)) {\n                return false;\n            }\n\n            var actualValue = actualObj[key];\n            var expectationValue = expectationObj[key];\n            var actualObject = isObject(actualValue);\n            var expectationObject = isObject(expectationValue);\n            // determines, if the objects were already visited\n            // (it's faster to check for isObject first, than to\n            // get -1 from getIndex for non objects)\n            var actualIndex = actualObject\n                ? indexOf(actualObjects, actualValue)\n                : -1;\n            var expectationIndex = expectationObject\n                ? indexOf(expectationObjects, expectationValue)\n                : -1;\n            // determines the new paths of the objects\n            // - for non cyclic objects the current path will be extended\n            //   by current property name\n            // - for cyclic objects the stored path is taken\n            var newActualPath =\n                actualIndex !== -1\n                    ? actualPaths[actualIndex]\n                    : actualPath + \"[\" + JSON.stringify(key) + \"]\";\n            var newExpectationPath =\n                expectationIndex !== -1\n                    ? expectationPaths[expectationIndex]\n                    : expectationPath + \"[\" + JSON.stringify(key) + \"]\";\n            var combinedPath = newActualPath + newExpectationPath;\n\n            // stop recursion if current objects are already compared\n            if (compared[combinedPath]) {\n                return true;\n            }\n\n            // remember the current objects and their paths\n            if (actualIndex === -1 && actualObject) {\n                push(actualObjects, actualValue);\n                push(actualPaths, newActualPath);\n            }\n            if (expectationIndex === -1 && expectationObject) {\n                push(expectationObjects, expectationValue);\n                push(expectationPaths, newExpectationPath);\n            }\n\n            // remember that the current objects are already compared\n            if (actualObject && expectationObject) {\n                compared[combinedPath] = true;\n            }\n\n            // End of cyclic logic\n\n            // neither actualValue nor expectationValue is a cycle\n            // continue with next level\n            return deepEqual(\n                actualValue,\n                expectationValue,\n                newActualPath,\n                newExpectationPath\n            );\n        });\n    })(actual, expectation, \"$1\", \"$2\");\n}\n\ndeepEqualCyclic.use = function(match) {\n    return function deepEqual(a, b) {\n        return deepEqualCyclic(a, b, match);\n    };\n};\n\nmodule.exports = deepEqualCyclic;\n"},"lineCount":261}},"error":null,"hash":"a1c95b1c1034cd9c9b63103325195eff","cacheData":{"env":{}}}