{"id":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","dependencies":[{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/package.json","includedInParent":true,"mtime":1604545244226},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/.babelrc","includedInParent":true,"mtime":1604545244206},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/sinon/node_modules/@sinonjs/commons/package.json","includedInParent":true,"mtime":1604360732609}],"generated":{"js":"\"use strict\";\n\n/**\n * Returns a display name for a function\n *\n * @param  {Function} func\n * @returns {string}\n */\nmodule.exports = function functionName(func) {\n    if (!func) {\n        return \"\";\n    }\n\n    try {\n        return (\n            func.displayName ||\n            func.name ||\n            // Use function decomposition as a last resort to get function\n            // name. Does not rely on function decomposition to work - if it\n            // doesn't debugging will be slightly less informative\n            // (i.e. toString will say 'spy' rather than 'myFunc').\n            (String(func).match(/function ([^\\s(]+)/) || [])[1]\n        );\n    } catch (e) {\n        // Stringify may fail and we might get an exception, as a last-last\n        // resort fall back to empty string.\n        return \"\";\n    }\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}}],"sources":{"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/function-name.js":"\"use strict\";\n\n/**\n * Returns a display name for a function\n *\n * @param  {Function} func\n * @returns {string}\n */\nmodule.exports = function functionName(func) {\n    if (!func) {\n        return \"\";\n    }\n\n    try {\n        return (\n            func.displayName ||\n            func.name ||\n            // Use function decomposition as a last resort to get function\n            // name. Does not rely on function decomposition to work - if it\n            // doesn't debugging will be slightly less informative\n            // (i.e. toString will say 'spy' rather than 'myFunc').\n            (String(func).match(/function ([^\\s(]+)/) || [])[1]\n        );\n    } catch (e) {\n        // Stringify may fail and we might get an exception, as a last-last\n        // resort fall back to empty string.\n        return \"\";\n    }\n};\n"},"lineCount":30}},"error":null,"hash":"1715e772f9b1db0ed1e3e7915c03d932","cacheData":{"env":{}}}