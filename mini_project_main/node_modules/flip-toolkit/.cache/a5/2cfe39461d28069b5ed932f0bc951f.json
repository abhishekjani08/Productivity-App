{"id":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","dependencies":[{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/package.json","includedInParent":true,"mtime":1604545244226},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/.babelrc","includedInParent":true,"mtime":1604545244206},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/sinon/node_modules/@sinonjs/commons/package.json","includedInParent":true,"mtime":1604360732609}],"generated":{"js":"\"use strict\";\n\nvar call = Function.call;\n\nmodule.exports = function copyPrototypeMethods(prototype) {\n    /* eslint-disable local-rules/no-prototype-methods */\n    return Object.getOwnPropertyNames(prototype).reduce(function(result, name) {\n        // ignore size because it throws from Map\n        if (\n            name !== \"size\" &&\n            name !== \"caller\" &&\n            name !== \"callee\" &&\n            name !== \"arguments\" &&\n            typeof prototype[name] === \"function\"\n        ) {\n            result[name] = call.bind(prototype[name]);\n        }\n\n        return result;\n    }, Object.create(null));\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}}],"sources":{"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/prototypes/copy-prototype.js":"\"use strict\";\n\nvar call = Function.call;\n\nmodule.exports = function copyPrototypeMethods(prototype) {\n    /* eslint-disable local-rules/no-prototype-methods */\n    return Object.getOwnPropertyNames(prototype).reduce(function(result, name) {\n        // ignore size because it throws from Map\n        if (\n            name !== \"size\" &&\n            name !== \"caller\" &&\n            name !== \"callee\" &&\n            name !== \"arguments\" &&\n            typeof prototype[name] === \"function\"\n        ) {\n            result[name] = call.bind(prototype[name]);\n        }\n\n        return result;\n    }, Object.create(null));\n};\n"},"lineCount":22}},"error":null,"hash":"d818a76c6a8b0702e3251a65d52455b6","cacheData":{"env":{}}}