{"id":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","dependencies":[{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/package.json","includedInParent":true,"mtime":1604545244226},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/.babelrc","includedInParent":true,"mtime":1604545244206},{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/node_modules/sinon/node_modules/@sinonjs/commons/package.json","includedInParent":true,"mtime":1604360732609}],"generated":{"js":"\"use strict\";\n\n/**\n * Returns true when fn returns true for all members of obj.\n * This is an every implementation that works for all iterables\n *\n * @param  {object}   obj\n * @param  {Function} fn\n * @returns {boolean}\n */\nmodule.exports = function every(obj, fn) {\n    var pass = true;\n\n    try {\n        /* eslint-disable-next-line local-rules/no-prototype-methods */\n        obj.forEach(function() {\n            if (!fn.apply(this, arguments)) {\n                // Throwing an error is the only way to break `forEach`\n                throw new Error();\n            }\n        });\n    } catch (e) {\n        pass = false;\n    }\n\n    return pass;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}}],"sources":{"../../../node_modules/sinon/node_modules/@sinonjs/commons/lib/every.js":"\"use strict\";\n\n/**\n * Returns true when fn returns true for all members of obj.\n * This is an every implementation that works for all iterables\n *\n * @param  {object}   obj\n * @param  {Function} fn\n * @returns {boolean}\n */\nmodule.exports = function every(obj, fn) {\n    var pass = true;\n\n    try {\n        /* eslint-disable-next-line local-rules/no-prototype-methods */\n        obj.forEach(function() {\n            if (!fn.apply(this, arguments)) {\n                // Throwing an error is the only way to break `forEach`\n                throw new Error();\n            }\n        });\n    } catch (e) {\n        pass = false;\n    }\n\n    return pass;\n};\n"},"lineCount":28}},"error":null,"hash":"e55c323e4a46994a86e5ff13561bf488","cacheData":{"env":{}}}