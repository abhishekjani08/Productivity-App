{"code":"import animateUnflippedElements from './animateUnflippedElements';\r\nimport animateFlippedElements from './animateFlippedElements';\r\nimport getFlippedElementPositionsAfterUpdate from './getFlippedElementPositions/getFlippedElementPositionsAfterUpdate';\r\nimport * as constants from '../constants';\r\nimport { assign, toArray } from '../utilities';\r\nconst createPortalScopedSelector = (portalKey) => (selector) => {\r\n    return toArray(document.querySelectorAll(`[${constants.DATA_PORTAL_KEY}=\"${portalKey}\"]${selector}`));\r\n};\r\nconst createFlipperScopedSelector = (containerEl) => {\r\n    const tempFlipperId = Math.random().toFixed(5);\r\n    containerEl.dataset.flipperId = tempFlipperId;\r\n    return (selector) => {\r\n        return toArray(containerEl.querySelectorAll(`[data-flipper-id=\"${tempFlipperId}\"] ${selector}`));\r\n    };\r\n};\r\nconst createScopedSelector = ({ containerEl, portalKey }) => {\r\n    if (portalKey) {\r\n        return createPortalScopedSelector(portalKey);\r\n    }\r\n    else if (containerEl) {\r\n        return createFlipperScopedSelector(containerEl);\r\n    }\r\n    else {\r\n        return () => [];\r\n    }\r\n};\r\nconst createGetElementFunc = (scopedSelector) => {\r\n    return (id) => {\r\n        return scopedSelector(`[${constants.DATA_FLIP_ID}=\"${id}\"]`)[0];\r\n    };\r\n};\r\nconst onFlipKeyUpdate = ({ cachedOrderedFlipIds = [], inProgressAnimations = {}, flippedElementPositionsBeforeUpdate = {}, flipCallbacks = {}, containerEl, applyTransformOrigin, spring, debug, portalKey, staggerConfig = {}, decisionData = {}, handleEnterUpdateDelete, onComplete, onStart }) => {\r\n    const flippedElementPositionsAfterUpdate = getFlippedElementPositionsAfterUpdate({\r\n        element: containerEl,\r\n        portalKey\r\n    });\r\n    const scopedSelector = createScopedSelector({\r\n        containerEl,\r\n        portalKey\r\n    });\r\n    const getElement = createGetElementFunc(scopedSelector);\r\n    const isFlipped = (id) => flippedElementPositionsBeforeUpdate[id] &&\r\n        flippedElementPositionsAfterUpdate[id];\r\n    const unflippedIds = Object.keys(flippedElementPositionsBeforeUpdate)\r\n        .concat(Object.keys(flippedElementPositionsAfterUpdate))\r\n        .filter(id => !isFlipped(id));\r\n    const baseArgs = {\r\n        flipCallbacks,\r\n        getElement,\r\n        flippedElementPositionsBeforeUpdate,\r\n        flippedElementPositionsAfterUpdate,\r\n        inProgressAnimations,\r\n        decisionData\r\n    };\r\n    const animateUnFlippedElementsArgs = assign({}, baseArgs, {\r\n        unflippedIds\r\n    });\r\n    const { hideEnteringElements, animateEnteringElements, animateExitingElements } = animateUnflippedElements(animateUnFlippedElementsArgs);\r\n    const flippedIds = cachedOrderedFlipIds.filter(isFlipped);\r\n    // @ts-ignore\r\n    const animateFlippedElementsArgs = assign({}, baseArgs, {\r\n        containerEl,\r\n        flippedIds,\r\n        applyTransformOrigin,\r\n        spring,\r\n        debug,\r\n        staggerConfig,\r\n        scopedSelector,\r\n        onComplete\r\n    });\r\n    if (onStart)\r\n        onStart(containerEl, decisionData);\r\n    // the function handles putting flipped elements back in their original positions\r\n    // and returns another function to actually call the flip animation\r\n    const flip = animateFlippedElements(animateFlippedElementsArgs);\r\n    if (handleEnterUpdateDelete) {\r\n        handleEnterUpdateDelete({\r\n            hideEnteringElements,\r\n            animateEnteringElements,\r\n            animateExitingElements,\r\n            animateFlippedElements: flip\r\n        });\r\n    }\r\n    else {\r\n        hideEnteringElements();\r\n        animateExitingElements().then(animateEnteringElements);\r\n        flip();\r\n    }\r\n};\r\nexport default onFlipKeyUpdate;\r\n//# sourceMappingURL=index.js.map","map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/flip/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/flip/index.d.ts","writeByteOrderMark":false,"text":"import { OnFlipKeyUpdateArgs } from './types';\r\ndeclare const onFlipKeyUpdate: ({ cachedOrderedFlipIds, inProgressAnimations, flippedElementPositionsBeforeUpdate, flipCallbacks, containerEl, applyTransformOrigin, spring, debug, portalKey, staggerConfig, decisionData, handleEnterUpdateDelete, onComplete, onStart }: OnFlipKeyUpdateArgs) => void;\r\nexport default onFlipKeyUpdate;\r\n"}}
