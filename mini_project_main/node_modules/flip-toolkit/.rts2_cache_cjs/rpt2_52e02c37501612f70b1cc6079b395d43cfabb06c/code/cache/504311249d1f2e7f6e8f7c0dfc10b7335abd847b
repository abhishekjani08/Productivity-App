{"code":"import { SpringSystem } from '../../../forked-rebound';\r\n// this should get created only 1x\r\nconst springSystem = new SpringSystem();\r\nexport const createSuspendedSpring = (flipData) => {\r\n    const { springConfig: { stiffness, damping, overshootClamping }, getOnUpdateFunc, onAnimationEnd, onSpringActivate } = flipData;\r\n    const spring = springSystem.createSpring(stiffness, damping);\r\n    spring.setOvershootClampingEnabled(!!overshootClamping);\r\n    const onSpringAtRest = () => {\r\n        // prevent SpringSystem from caching unused springs\r\n        spring.destroy();\r\n        onAnimationEnd();\r\n    };\r\n    const springConfig = {\r\n        onSpringActivate,\r\n        onSpringAtRest,\r\n        onSpringUpdate: getOnUpdateFunc({\r\n            spring,\r\n            onAnimationEnd\r\n        })\r\n    };\r\n    spring.addListener(springConfig);\r\n    return spring;\r\n};\r\nexport const createSpring = (flipped) => {\r\n    const spring = createSuspendedSpring(flipped);\r\n    spring.setEndValue(1);\r\n    return spring;\r\n};\r\nexport const normalizeSpeed = (speedConfig) => {\r\n    if (typeof speedConfig !== 'number')\r\n        return 1.1;\r\n    return 1 + Math.min(Math.max(speedConfig * 5, 0), 5);\r\n};\r\nexport const createStaggeredSprings = (flippedArray, staggerConfig = {}) => {\r\n    if (!flippedArray || !flippedArray.length) {\r\n        return;\r\n    }\r\n    if (staggerConfig.reverse) {\r\n        flippedArray.reverse();\r\n    }\r\n    const normalizedSpeed = normalizeSpeed(staggerConfig.speed);\r\n    const nextThreshold = 1 / Math.max(Math.min(flippedArray.length, 100), 10);\r\n    const setEndValueFuncs = flippedArray\r\n        .map((flipped, i) => {\r\n        const cachedGetOnUpdate = flipped.getOnUpdateFunc;\r\n        // modify the update function to adjust\r\n        // the end value of the trailing Flipped component\r\n        flipped.getOnUpdateFunc = args => {\r\n            const onUpdate = cachedGetOnUpdate(args);\r\n            return spring => {\r\n                let currentValue = spring.getCurrentValue();\r\n                // make sure trailing animations complete\r\n                currentValue =\r\n                    currentValue < 0.01 ? 0 : currentValue > 0.99 ? 1 : currentValue;\r\n                const updateTrailingAnimation = currentValue >= nextThreshold;\r\n                if (updateTrailingAnimation) {\r\n                    if (setEndValueFuncs[i + 1]) {\r\n                        setEndValueFuncs[i + 1](Math.max(Math.min(currentValue * normalizedSpeed, 1), 0));\r\n                    }\r\n                }\r\n                // now call the actual update function\r\n                onUpdate(spring);\r\n            };\r\n        };\r\n        return flipped;\r\n    })\r\n        .map(flipped => {\r\n        const spring = createSuspendedSpring(flipped);\r\n        if (!spring) {\r\n            return;\r\n        }\r\n        return spring.setEndValue.bind(spring);\r\n    })\r\n        .filter(Boolean);\r\n    if (setEndValueFuncs[0]) {\r\n        setEndValueFuncs[0](1);\r\n    }\r\n};\r\n//# sourceMappingURL=index.js.map","map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/flip/animateFlippedElements/spring/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/flip/animateFlippedElements/spring/index.d.ts","writeByteOrderMark":false,"text":"import { StaggerConfigValue } from '../../../types';\r\nimport { FlipData } from '../types';\r\nexport declare const createSuspendedSpring: (flipData: FlipData) => import(\"../../../forked-rebound/types\").Spring;\r\nexport declare const createSpring: (flipped: FlipData) => import(\"../../../forked-rebound/types\").Spring;\r\nexport declare const normalizeSpeed: (speedConfig: number) => number;\r\nexport declare const createStaggeredSprings: (flippedArray: FlipData[], staggerConfig?: StaggerConfigValue) => void;\r\n"}}
