{"code":"import { toArray, assign } from '../../utilities';\r\nimport * as constants from '../../constants';\r\nexport const addTupleToObject = (acc, curr) => assign(acc, { [curr[0]]: curr[1] });\r\nexport const getAllElements = (element, portalKey) => {\r\n    if (portalKey) {\r\n        return toArray(document.querySelectorAll(`[${constants.DATA_PORTAL_KEY}=\"${portalKey}\"]`));\r\n    }\r\n    else {\r\n        return toArray(element.querySelectorAll(`[${constants.DATA_FLIP_ID}]`));\r\n    }\r\n};\r\nexport const getRects = (flippedElements) => {\r\n    return flippedElements.map((child) => [child, child.getBoundingClientRect()]);\r\n};\r\n//# sourceMappingURL=utilities.js.map","map":"{\"version\":3,\"file\":\"utilities.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/flip/getFlippedElementPositions/utilities.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAA;AACjD,OAAO,KAAK,SAAS,MAAM,iBAAiB,CAAA;AAG5C,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,GAAO,EAAE,IAAgB,EAAE,EAAE,CAC5D,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAA;AAErC,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,OAAqB,EACrB,SAAkB,EACH,EAAE;IACjB,IAAI,SAAS,EAAE;QACb,OAAO,OAAO,CACZ,QAAQ,CAAC,gBAAgB,CAAC,IAAI,SAAS,CAAC,eAAe,KAAK,SAAS,IAAI,CAAC,CAC3E,CAAA;KACF;SAAM;QACL,OAAO,OAAO,CAAC,OAAQ,CAAC,gBAAgB,CAAC,IAAI,SAAS,CAAC,YAAY,GAAG,CAAC,CAAC,CAAA;KACzE;AACH,CAAC,CAAA;AACD,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,eAA8B,EAAE,EAAE;IACzD,OAAO,eAAe,CAAC,GAAG,CAAC,CAAC,KAAkB,EAG5C,EAAE,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAA;AAC9C,CAAC,CAAA\"}","dts":{"name":"/Users/alex.holachek/Desktop/Projects/react-flip-toolkit/packages/flip-toolkit/flip/getFlippedElementPositions/utilities.d.ts","writeByteOrderMark":false,"text":"import { BoundingClientRect } from './types';\r\nexport declare const addTupleToObject: (acc: {}, curr: [any, any]) => object;\r\nexport declare const getAllElements: (element?: HTMLElement, portalKey?: string) => HTMLElement[];\r\nexport declare const getRects: (flippedElements: HTMLElement[]) => [HTMLElement, BoundingClientRect][];\r\n"}}
