{"version":3,"file":"index.modern.js","sources":["../src/utilities/index.ts","../src/constants.ts","../src/flip/animateUnflippedElements/index.ts","../src/springSettings/index.ts","../src/forked-rebound/onFrame.js","../src/forked-rebound/util.js","../src/forked-rebound/Loopers.js","../src/forked-rebound/Spring.js","../src/forked-rebound/SpringSystem.js","../src/flip/animateFlippedElements/spring/index.ts","../src/flip/animateFlippedElements/index.ts","../src/flip/getFlippedElementPositions/utilities.ts","../src/flip/index.ts","../src/flip/getFlippedElementPositions/getFlippedElementPositionsAfterUpdate/index.ts","../src/flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/index.ts","../src/Flipper.ts","../src/Spring/index.ts"],"sourcesContent":["import { IndexableObject } from './types'\n\nexport const isNumber = (x: any) => typeof x === 'number'\n\nexport const isFunction = (x: any) => typeof x === 'function'\n\nexport const isObject = (x: any) =>\n  Object.prototype.toString.call(x) === '[object Object]'\n\nexport const toArray = (arrayLike: ArrayLike<any>) =>\n  Array.prototype.slice.apply(arrayLike)\n\nexport const getDuplicateValsAsStrings = (arr: string[]): string[] => {\n  const baseObj: IndexableObject = {}\n  const obj = arr.reduce((acc, curr) => {\n    acc[curr] = (acc[curr] || 0) + 1\n    return acc\n  }, baseObj)\n  return Object.keys(obj).filter(val => obj[val] > 1)\n}\n\n// tslint only likes this with a regular function, not an arrow function\nexport function assign(target: IndexableObject, ...args: IndexableObject[]) {\n  args.forEach(arg => {\n    if (!arg) {\n      return\n    }\n    // Skip over if undefined or null\n    for (const nextKey in arg) {\n      // Avoid bugs when hasOwnProperty is shadowed\n      if (Object.prototype.hasOwnProperty.call(arg, nextKey)) {\n        target[nextKey] = arg[nextKey]\n      }\n    }\n  })\n  return target\n}\n\nexport const tweenProp = (start: number, end: number, position: number) =>\n  start + (end - start) * position\n","export const DATA_FLIP_ID = 'data-flip-id'\nexport const DATA_INVERSE_FLIP_ID = 'data-inverse-flip-id'\nexport const DATA_FLIP_COMPONENT_ID = 'data-flip-component-id'\nexport const DATA_FLIP_CONFIG = 'data-flip-config'\nexport const DATA_PORTAL_KEY = 'data-portal-key'\nexport const DATA_EXIT_CONTAINER = 'data-exit-container'\n","import { AnimateUnflippedElementsArgs, FragmentTuple } from './types'\n\nconst animateUnflippedElements = ({\n  unflippedIds,\n  flipCallbacks,\n  getElement,\n  flippedElementPositionsBeforeUpdate,\n  flippedElementPositionsAfterUpdate,\n  inProgressAnimations,\n  decisionData\n}: AnimateUnflippedElementsArgs) => {\n  const enteringElementIds = unflippedIds.filter(\n    id => flippedElementPositionsAfterUpdate[id]\n  )\n  const animatedEnteringElementIds = enteringElementIds.filter(\n    id => flipCallbacks[id] && flipCallbacks[id].onAppear\n  )\n\n  const animatedExitingElementIds = unflippedIds.filter(\n    id =>\n      flippedElementPositionsBeforeUpdate[id] &&\n      flipCallbacks[id] &&\n      flipCallbacks[id].onExit\n  )\n\n  const hideEnteringElements = () => {\n    animatedEnteringElementIds.forEach(id => {\n      const element = getElement(id)\n      if (element) {\n        element.style.opacity = '0'\n      }\n    })\n  }\n\n  const animateEnteringElements = () => {\n    animatedEnteringElementIds.forEach((id, i) => {\n      const element = getElement(id)\n      if (element) {\n        flipCallbacks[id].onAppear!(element, i, decisionData)\n      }\n    })\n  }\n\n  let closureResolve: () => void\n\n  const promiseToReturn: Promise<void> = new Promise(resolve => {\n    closureResolve = resolve\n  })\n\n  const fragmentTuples: FragmentTuple[] = []\n  let exitingElementCount = 0\n\n  const onExitCallbacks = animatedExitingElementIds.map((id, i) => {\n    const {\n      domDataForExitAnimations: {\n        element,\n        parent,\n        childPosition: { top, left, width, height }\n      }\n    } = flippedElementPositionsBeforeUpdate[id]\n    // insert back into dom\n    if (getComputedStyle(parent).position === 'static') {\n      parent.style.position = 'relative'\n    }\n    element.style.transform = 'matrix(1, 0, 0, 1, 0, 0)'\n    element.style.position = 'absolute'\n    element.style.top = top + 'px'\n    element.style.left = left + 'px'\n    // taken out of the dom flow, the element might have lost these dimensions\n    element.style.height = height + 'px'\n    element.style.width = width + 'px'\n    let fragmentTuple: FragmentTuple | undefined = fragmentTuples.filter(\n      t => t[0] === parent\n    )[0]\n    if (!fragmentTuple) {\n      fragmentTuple = [parent, document.createDocumentFragment()]\n      fragmentTuples.push(fragmentTuple)\n    }\n    fragmentTuple[1].appendChild(element)\n\n    exitingElementCount += 1\n\n    const stop = () => {\n      try {\n        parent.removeChild(element)\n      } catch (DOMException) {\n        // the element is already gone\n      } finally {\n        exitingElementCount -= 1\n        if (exitingElementCount === 0) {\n          closureResolve()\n        }\n      }\n    }\n    // @ts-ignore\n    inProgressAnimations[id] = { stop }\n    return () => flipCallbacks[id].onExit!(element, i, stop, decisionData)\n  })\n\n  // now append all the fragments from the onExit callbacks\n  // (we use fragments for performance)\n  fragmentTuples.forEach(t => {\n    t[0].appendChild(t[1])\n  })\n\n  if (!onExitCallbacks.length) {\n    closureResolve!()\n  }\n\n  const animateExitingElements = () => {\n    onExitCallbacks.forEach(c => c())\n    return promiseToReturn\n  }\n\n  return {\n    hideEnteringElements,\n    animateEnteringElements,\n    animateExitingElements\n  }\n}\n\nexport default animateUnflippedElements\n","import { isObject, assign } from '../utilities'\nimport { SpringPresets, SpringConfig, SpringOption } from './types'\n\n// adapted from\n// https://github.com/chenglou/react-motion/blob/master/src/presets.js\nexport const springPresets: SpringPresets = {\n  noWobble: { stiffness: 200, damping: 26 },\n  gentle: { stiffness: 120, damping: 14 },\n  veryGentle: { stiffness: 130, damping: 17 },\n  wobbly: { stiffness: 180, damping: 12 },\n  stiff: { stiffness: 260, damping: 26 }\n}\n\nfunction argIsSpringConfig(\n  arg: SpringConfig | keyof SpringPresets | undefined\n): arg is SpringConfig {\n  return isObject(arg)\n}\n\nexport const normalizeSpring = (\n  spring?: SpringConfig | keyof SpringPresets | any\n) => {\n  if (argIsSpringConfig(spring)) {\n    return spring\n  } else if (Object.keys(springPresets).indexOf(spring) > -1) {\n    return springPresets[spring]\n  } else {\n    return {}\n  }\n}\n\nexport const getSpringConfig = ({\n  flipperSpring,\n  flippedSpring\n}: { flipperSpring?: SpringOption; flippedSpring?: SpringOption } = {}) => {\n  return assign(\n    {},\n    springPresets.noWobble,\n    normalizeSpring(flipperSpring),\n    normalizeSpring(flippedSpring)\n  )\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nlet _onFrame\nif (typeof window !== \"undefined\") {\n  _onFrame = window.requestAnimationFrame\n}\n\n_onFrame =\n  _onFrame ||\n  function(callback) {\n    window.setTimeout(callback, 1000 / 60)\n  }\n\nexport default _onFrame\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nexport { default as onFrame } from './onFrame'\n\nconst start = Date.now()\nexport const performanceNow =\n  typeof performance === 'object' && typeof performance.now === 'function'\n    ? () => performance.now()\n    : () => Date.now() - start\n\n// Lop off the first occurence of the reference in the Array.\nexport function removeFirst(array, item) {\n  const idx = array.indexOf(item)\n  idx !== -1 && array.splice(idx, 1)\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nimport { onFrame, performanceNow } from \"./util\"\n\n/**\n * Plays each frame of the SpringSystem on animation\n * timing loop. This is the default type of looper for a new spring system\n * as it is the most common when developing UI.\n * @public\n */\nexport class AnimationLooper {\n  run() {\n    onFrame(() => {\n      this.springSystem.loop(performanceNow())\n    })\n  }\n}\n","/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n *\n */\n\nimport { removeFirst } from './util'\n\nclass PhysicsState {\n  constructor() {\n    this.position = 0\n    this.velocity = 0\n  }\n}\n\nlet ID = 0\nconst MAX_DELTA_TIME_SEC = 0.064\nconst SOLVER_TIMESTEP_SEC = 0.001\n\n/**\n * Provides a model of a classical spring acting to\n * resolve a body to equilibrium. Springs have configurable\n * tension which is a force multipler on the displacement of the\n * spring from its rest point or `endValue` as defined by [Hooke's\n * law](http://en.wikipedia.org/wiki/Hooke's_law). Springs also have\n * configurable friction, which ensures that they do not oscillate\n * infinitely. When a Spring is displaced by updating it's resting\n * or `currentValue`, the SpringSystems that contain that Spring\n * will automatically start looping to solve for equilibrium. As each\n * timestep passes, `SpringListener` objects attached to the Spring\n * will be notified of the updates providing a way to drive an\n * animation off of the spring's resolution curve.\n * @public\n */\nclass Spring {\n  constructor(springSystem) {\n    this._id = `s${ID++}`\n    this._springSystem = springSystem\n\n    this.listeners = []\n    this._startValue = 0\n\n    this._currentState = new PhysicsState()\n    this._displacementFromRestThreshold = 0.001\n    this._endValue = 0\n    this._overshootClampingEnabled = false\n    this._previousState = new PhysicsState()\n    this._restSpeedThreshold = 0.001\n\n    this._tempState = new PhysicsState()\n    this._timeAccumulator = 0\n    this._wasAtRest = true\n    // hack from alex -- only call 1x\n    this._onActivateCalled\n    this._cachedSpringConfig = {}\n  }\n\n  getId() {\n    return this._id\n  }\n\n  /**\n   * Remove a Spring from simulation and clear its listeners.\n   * @public\n   */\n  destroy() {\n    this.listeners = []\n    this._springSystem.deregisterSpring(this)\n  }\n\n  /**\n   * Set the configuration values for this Spring. A SpringConfig\n   * contains the tension and friction values used to solve for the\n   * equilibrium of the Spring in the physics loop.\n   * @public\n   */\n  setSpringConfig(springConfig) {\n    this._springConfig = springConfig\n    return this\n  }\n  /**\n   * Retrieve the current value of the Spring.\n   * @public\n   */\n  getCurrentValue() {\n    return this._currentState.position\n  }\n\n  /**\n   * Get the absolute distance of the Spring from a given state value\n   */\n  getDisplacementDistanceForState(state) {\n    return Math.abs(this._endValue - state.position)\n  }\n\n  /**\n   * Set the endValue or resting position of the spring. If this\n   * value is different than the current value, the SpringSystem will\n   * be notified and will begin running its solver loop to resolve\n   * the Spring to equilibrium. Any listeners that are registered\n   * for onSpringEndStateChange will also be notified of this update\n   * immediately.\n   * @public\n   */\n\n  setEndValue(endValue) {\n    if (endValue === this._endValue) return this\n    this.prevEndValue = endValue\n    if (this._endValue === endValue && this.isAtRest()) {\n      return this\n    }\n    this._startValue = this.getCurrentValue()\n    this._endValue = endValue\n    this._springSystem.activateSpring(this.getId())\n    for (let i = 0, len = this.listeners.length; i < len; i++) {\n      const listener = this.listeners[i]\n      const onChange = listener.onSpringEndStateChange\n      onChange && onChange(this)\n    }\n    return this\n  }\n\n  /**\n   * Set the current velocity of the Spring, in pixels per second. As\n   * previously mentioned, this can be useful when you are performing\n   * a direct manipulation gesture. When a UI element is released you\n   * may call setVelocity on its animation Spring so that the Spring\n   * continues with the same velocity as the gesture ended with. The\n   * friction, tension, and displacement of the Spring will then\n   * govern its motion to return to rest on a natural feeling curve.\n   * @public\n   */\n  setVelocity(velocity) {\n    if (velocity === this._currentState.velocity) {\n      return this\n    }\n    this._currentState.velocity = velocity\n    this._springSystem.activateSpring(this.getId())\n    return this\n  }\n\n  setCurrentValue(currentValue) {\n    this._startValue = currentValue\n    this._currentState.position = currentValue\n    for (var i = 0, len = this.listeners.length; i < len; i++) {\n      var listener = this.listeners[i]\n      listener.onSpringUpdate && listener.onSpringUpdate(this)\n    }\n    return this\n  }\n\n  setAtRest() {\n    this._endValue = this._currentState.position\n    this._tempState.position = this._currentState.position\n    this._currentState.velocity = 0\n    return this\n  }\n\n  /**\n   * Enable overshoot clamping. This means that the Spring will stop\n   * immediately when it reaches its resting position regardless of\n   * any existing momentum it may have. This can be useful for certain\n   * types of animations that should not oscillate such as a scale\n   * down to 0 or alpha fade.\n   * @public\n   */\n  setOvershootClampingEnabled(enabled) {\n    this._overshootClampingEnabled = enabled\n    return this\n  }\n\n  /**\n   * Check if the Spring has gone past its end point by comparing\n   * the direction it was moving in when it started to the current\n   * position and end value.\n   * @public\n   */\n  isOvershooting() {\n    const start = this._startValue\n    const end = this._endValue\n    return (\n      this._springConfig.tension > 0 &&\n      ((start < end && this.getCurrentValue() > end) ||\n        (start > end && this.getCurrentValue() < end))\n    )\n  }\n\n  /**\n   * The main solver method for the Spring. It takes\n   * the current time and delta since the last time step and performs\n   * an RK4 integration to get the new position and velocity state\n   * for the Spring based on the tension, friction, velocity, and\n   * displacement of the Spring.\n   * @public\n   */\n  advance(time, realDeltaTime) {\n    let isAtRest = this.isAtRest()\n\n    if (isAtRest && this._wasAtRest) {\n      return\n    }\n\n    let adjustedDeltaTime = realDeltaTime\n    if (realDeltaTime > MAX_DELTA_TIME_SEC) {\n      adjustedDeltaTime = MAX_DELTA_TIME_SEC\n    }\n\n    this._timeAccumulator += adjustedDeltaTime\n\n    const tension = this._springConfig.tension\n    const friction = this._springConfig.friction\n    let position = this._currentState.position\n    let velocity = this._currentState.velocity\n    let tempPosition = this._tempState.position\n    let tempVelocity = this._tempState.velocity\n    let aVelocity\n    let aAcceleration\n    let bVelocity\n    let bAcceleration\n    let cVelocity\n    let cAcceleration\n    let dVelocity\n    let dAcceleration\n    let dxdt\n    let dvdt\n\n    while (this._timeAccumulator >= SOLVER_TIMESTEP_SEC) {\n      this._timeAccumulator -= SOLVER_TIMESTEP_SEC\n\n      if (this._timeAccumulator < SOLVER_TIMESTEP_SEC) {\n        this._previousState.position = position\n        this._previousState.velocity = velocity\n      }\n\n      aVelocity = velocity\n      aAcceleration =\n        tension * (this._endValue - tempPosition) - friction * velocity\n\n      tempPosition = position + aVelocity * SOLVER_TIMESTEP_SEC * 0.5\n      tempVelocity = velocity + aAcceleration * SOLVER_TIMESTEP_SEC * 0.5\n      bVelocity = tempVelocity\n      bAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      tempPosition = position + bVelocity * SOLVER_TIMESTEP_SEC * 0.5\n      tempVelocity = velocity + bAcceleration * SOLVER_TIMESTEP_SEC * 0.5\n      cVelocity = tempVelocity\n      cAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      tempPosition = position + cVelocity * SOLVER_TIMESTEP_SEC\n      tempVelocity = velocity + cAcceleration * SOLVER_TIMESTEP_SEC\n      dVelocity = tempVelocity\n      dAcceleration =\n        tension * (this._endValue - tempPosition) - friction * tempVelocity\n\n      dxdt =\n        (1.0 / 6.0) * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity)\n      dvdt =\n        (1.0 / 6.0) *\n        (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration)\n\n      position += dxdt * SOLVER_TIMESTEP_SEC\n      velocity += dvdt * SOLVER_TIMESTEP_SEC\n    }\n\n    this._tempState.position = tempPosition\n    this._tempState.velocity = tempVelocity\n\n    this._currentState.position = position\n    this._currentState.velocity = velocity\n\n    if (this._timeAccumulator > 0) {\n      this._interpolate(this._timeAccumulator / SOLVER_TIMESTEP_SEC)\n    }\n\n    if (\n      this.isAtRest() ||\n      (this._overshootClampingEnabled && this.isOvershooting())\n    ) {\n      if (this._springConfig.tension > 0) {\n        this._startValue = this._endValue\n        this._currentState.position = this._endValue\n      } else {\n        this._endValue = this._currentState.position\n        this._startValue = this._endValue\n      }\n      this.setVelocity(0)\n      isAtRest = true\n    }\n\n    let notifyActivate = false\n    if (this._wasAtRest) {\n      this._wasAtRest = false\n      notifyActivate = true\n    }\n\n    let notifyAtRest = false\n    if (isAtRest) {\n      this._wasAtRest = true\n      notifyAtRest = true\n    }\n\n    this.notifyPositionUpdated(notifyActivate, notifyAtRest)\n  }\n\n  notifyPositionUpdated(notifyActivate, notifyAtRest) {\n    this.listeners.filter(Boolean).forEach(listener => {\n      if (\n        notifyActivate &&\n        listener.onSpringActivate &&\n        !this._onActivateCalled\n      ) {\n        listener.onSpringActivate(this)\n        this._onActivateCalled = true\n      }\n\n      if (listener.onSpringUpdate) {\n        listener.onSpringUpdate(this)\n      }\n\n      if (notifyAtRest && listener.onSpringAtRest) {\n        listener.onSpringAtRest(this)\n      }\n    })\n  }\n\n  /**\n   * Check if the SpringSystem should advance. Springs are advanced\n   * a final frame after they reach equilibrium to ensure that the\n   * currentValue is exactly the requested endValue regardless of the\n   * displacement threshold.\n   * @public\n   */\n  systemShouldAdvance() {\n    return !this.isAtRest() || !this.wasAtRest()\n  }\n\n  wasAtRest() {\n    return this._wasAtRest\n  }\n\n  /**\n   * Check if the Spring is atRest meaning that it's currentValue and\n   * endValue are the same and that it has no velocity. The previously\n   * described thresholds for speed and displacement define the bounds\n   * of this equivalence check. If the Spring has 0 tension, then it will\n   * be considered at rest whenever its absolute velocity drops below the\n   * restSpeedThreshold.\n   * @public\n   */\n  isAtRest() {\n    const isAtRest =\n      Math.abs(this._currentState.velocity) < this._restSpeedThreshold &&\n      (this.getDisplacementDistanceForState(this._currentState) <=\n        this._displacementFromRestThreshold ||\n        this._springConfig.tension === 0)\n    return isAtRest\n  }\n\n  _interpolate(alpha) {\n    this._currentState.position =\n      this._currentState.position * alpha +\n      this._previousState.position * (1 - alpha)\n    this._currentState.velocity =\n      this._currentState.velocity * alpha +\n      this._previousState.velocity * (1 - alpha)\n  }\n\n  addListener(newListener) {\n    this.listeners.push(newListener)\n    return this\n  }\n\n  addOneTimeListener(newListener) {\n    const oneTimeFunc = func => (...args) => {\n      func(...args)\n      this.removeListener(newListener)\n    }\n    Object.keys(newListener).forEach(key => {\n      newListener[key] = oneTimeFunc(newListener[key])\n    })\n    this.listeners.push(newListener)\n    return this\n  }\n\n  removeListener(listenerToRemove) {\n    removeFirst(this.listeners, listenerToRemove)\n    return this\n  }\n}\n\nexport default Spring\n","//\n/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n *\n */\n\nimport { AnimationLooper } from './Loopers'\nimport Spring from './Spring'\nimport { removeFirst } from './util'\n\n/**\n * A set of Springs that all run on the same physics\n * timing loop. To get started with a Rebound animation, first\n * create a new SpringSystem and then add springs to it.\n * @public\n */\nclass SpringSystem {\n  constructor(looper) {\n    this.looper = looper || new AnimationLooper()\n    this.looper.springSystem = this\n\n    this.listeners = []\n    this._activeSprings = []\n    this._idleSpringIndices = []\n    this._isIdle = true\n    this._lastTimeMillis = -1\n    this._springRegistry = {}\n  }\n\n  /**\n   * Add a new spring to this SpringSystem. This Spring will now be solved for\n   * during the physics iteration loop. By default the spring will use the\n   * default Origami spring config with 40 tension and 7 friction, but you can\n   * also provide your own values here.\n   * @public\n   */\n  createSpring(tension, friction) {\n    return this.createSpringWithConfig({ tension, friction })\n  }\n  /**\n   * Add a spring with the provided SpringConfig.\n   * @public\n   */\n  createSpringWithConfig(springConfig) {\n    const spring = new Spring(this)\n    this.registerSpring(spring)\n    spring.setSpringConfig(springConfig)\n    return spring\n  }\n\n  /**\n   * Check if a SpringSystem is idle or active. If all of the Springs in the\n   * SpringSystem are at rest, i.e. the physics forces have reached equilibrium,\n   * then this method will return true.\n   * @public\n   */\n  getIsIdle() {\n    return this._isIdle\n  }\n\n  /**\n   * Manually add a spring to this system. This is called automatically\n   * if a Spring is created with SpringSystem#createSpring.\n   *\n   * This method sets the spring up in the registry so that it can be solved\n   * in the solver loop.\n   * @public\n   */\n  registerSpring(spring) {\n    this._springRegistry[spring.getId()] = spring\n  }\n\n  /**\n   * Deregister a spring with this SpringSystem. The SpringSystem will\n   * no longer consider this Spring during its integration loop once\n   * this is called. This is normally done automatically for you when\n   * you call Spring#destroy.\n   * @public\n   */\n  deregisterSpring(spring) {\n    removeFirst(this._activeSprings, spring)\n    delete this._springRegistry[spring.getId()]\n  }\n\n  advance(time, deltaTime) {\n    while (this._idleSpringIndices.length > 0) {\n      this._idleSpringIndices.pop()\n    }\n    this._activeSprings.filter(Boolean).forEach(spring => {\n      if (spring.systemShouldAdvance()) {\n        spring.advance(time / 1000.0, deltaTime / 1000.0)\n      } else {\n        this._idleSpringIndices.push(this._activeSprings.indexOf(spring))\n      }\n    })\n\n    while (this._idleSpringIndices.length > 0) {\n      const idx = this._idleSpringIndices.pop()\n      idx >= 0 && this._activeSprings.splice(idx, 1)\n    }\n  }\n\n  /**\n   * This is the main solver loop called to move the simulation\n   * forward through time. Before each pass in the solver loop\n   * onBeforeIntegrate is called on an any listeners that have\n   * registered themeselves with the SpringSystem. This gives you\n   * an opportunity to apply any constraints or adjustments to\n   * the springs that should be enforced before each iteration\n   * loop. Next the advance method is called to move each Spring in\n   * the systemShouldAdvance forward to the current time. After the\n   * integration step runs in advance, onAfterIntegrate is called\n   * on any listeners that have registered themselves with the\n   * SpringSystem. This gives you an opportunity to run any post\n   * integration constraints or adjustments on the Springs in the\n   * SpringSystem.\n   * @public\n   */\n  loop(currentTimeMillis) {\n    let listener\n    if (this._lastTimeMillis === -1) {\n      this._lastTimeMillis = currentTimeMillis - 1\n    }\n    const ellapsedMillis = currentTimeMillis - this._lastTimeMillis\n    this._lastTimeMillis = currentTimeMillis\n\n    let i = 0\n    const len = this.listeners.length\n    for (i = 0; i < len; i++) {\n      listener = this.listeners[i]\n      listener.onBeforeIntegrate && listener.onBeforeIntegrate(this)\n    }\n\n    this.advance(currentTimeMillis, ellapsedMillis)\n    if (this._activeSprings.length === 0) {\n      this._isIdle = true\n      this._lastTimeMillis = -1\n    }\n\n    for (i = 0; i < len; i++) {\n      listener = this.listeners[i]\n      listener.onAfterIntegrate && listener.onAfterIntegrate(this)\n    }\n\n    if (!this._isIdle) {\n      this.looper.run()\n    }\n  }\n\n  /**\n   * Used to notify the SpringSystem that a Spring has become displaced.\n   * The system responds by starting its solver loop up if it is currently idle.\n   */\n  activateSpring(springId) {\n    const spring = this._springRegistry[springId]\n    if (this._activeSprings.indexOf(spring) === -1) {\n      this._activeSprings.push(spring)\n    }\n    if (this.getIsIdle()) {\n      this._isIdle = false\n      this.looper.run()\n    }\n  }\n}\n\nexport default SpringSystem\n","import { SpringSystem } from '../../../forked-rebound'\nimport { StaggerConfigValue } from '../../../types'\nimport { FlipData, FlipDataArray } from '../types'\nimport {\n  SpringSystemInterface,\n  AddListenerArgs\n} from '../../../forked-rebound/types'\n\n// this should get created only 1x\nconst springSystem: SpringSystemInterface = new SpringSystem()\n\nexport const createSuspendedSpring = (flipData: FlipData) => {\n  const {\n    springConfig: { stiffness, damping, overshootClamping },\n    getOnUpdateFunc,\n    onAnimationEnd,\n    onSpringActivate\n  } = flipData\n\n  const spring = springSystem.createSpring(stiffness!, damping!)\n  spring.setOvershootClampingEnabled(!!overshootClamping)\n  const onSpringAtRest = () => {\n    // prevent SpringSystem from caching unused springs\n    spring.destroy()\n    onAnimationEnd()\n  }\n\n  const springConfig: AddListenerArgs = {\n    onSpringActivate,\n    onSpringAtRest,\n    onSpringUpdate: getOnUpdateFunc({\n      spring,\n      onAnimationEnd\n    })\n  }\n\n  spring.addListener(springConfig)\n  return spring\n}\n\nexport const createSpring = (flipped: FlipData) => {\n  const spring = createSuspendedSpring(flipped)\n  spring.setEndValue(1)\n  return spring\n}\n\nexport const normalizeSpeed = (speedConfig: number | undefined) => {\n  if (typeof speedConfig !== 'number') return 1.1\n  return 1 + Math.min(Math.max(speedConfig * 5, 0), 5)\n}\n\nexport const createStaggeredSprings = (\n  flippedArray: FlipDataArray,\n  staggerConfig: StaggerConfigValue = {}\n) => {\n  if (!flippedArray || !flippedArray.length) {\n    return\n  }\n\n  if (staggerConfig.reverse) {\n    flippedArray.reverse()\n  }\n\n  const normalizedSpeed = normalizeSpeed(staggerConfig.speed)\n\n  const nextThreshold = 1 / Math.max(Math.min(flippedArray.length, 100), 10)\n\n  const setEndValueFuncs = flippedArray\n    .map((flipped, i) => {\n      const cachedGetOnUpdate = flipped.getOnUpdateFunc\n\n      // modify the update function to adjust\n      // the end value of the trailing Flipped component\n      flipped.getOnUpdateFunc = args => {\n        const onUpdate = cachedGetOnUpdate(args)\n        return spring => {\n          let currentValue = spring.getCurrentValue()\n          // make sure trailing animations complete\n          currentValue =\n            currentValue < 0.01 ? 0 : currentValue > 0.99 ? 1 : currentValue\n\n          const updateTrailingAnimation = currentValue >= nextThreshold\n          if (updateTrailingAnimation) {\n            if (setEndValueFuncs[i + 1]) {\n              setEndValueFuncs[i + 1]!(\n                Math.max(Math.min(currentValue * normalizedSpeed, 1), 0)\n              )\n            }\n          }\n          // now call the actual update function\n          onUpdate(spring)\n        }\n      }\n      return flipped\n    })\n    .map(flipped => {\n      const spring = createSuspendedSpring(flipped)\n      if (!spring) {\n        return\n      }\n      return spring.setEndValue.bind(spring)\n    })\n    .filter(Boolean)\n\n  if (setEndValueFuncs[0]) {\n    setEndValueFuncs[0]!(1)\n  }\n}\n","import * as Rematrix from 'rematrix'\nimport { getSpringConfig } from '../../springSettings'\nimport {\n  toArray,\n  isFunction,\n  isNumber,\n  getDuplicateValsAsStrings,\n  assign,\n  tweenProp\n} from '../../utilities'\nimport * as constants from '../../constants'\nimport {\n  GetOnUpdateFunc,\n  OnUpdate,\n  Matrix,\n  InvertedChildren,\n  AnimateFlippedElementsArgs,\n  AnimatedVals,\n  FlipDataArray,\n  FlipData,\n  InitializeFlip\n} from './types'\nimport { BoundingClientRect } from '../getFlippedElementPositions/types'\nimport { FlippedIds } from '../types'\nimport { createSpring, createStaggeredSprings } from './spring'\nimport { IndexableObject } from '../../utilities/types'\nimport { FlipId } from '../../types'\n\n// 3d transforms were causing weird issues in chrome,\n// especially when opacity was also being tweened,\n// so convert to a 2d matrix\nexport const convertMatrix3dArrayTo2dArray = (matrix: Matrix): Matrix =>\n  [0, 1, 4, 5, 12, 13].map(index => matrix[index])\n\nexport const convertMatrix2dArrayToString = (matrix: Matrix) =>\n  `matrix(${matrix.join(', ')})`\n\nexport const invertTransformsForChildren = ({\n  invertedChildren,\n  matrix,\n  body\n}: {\n  matrix: Matrix\n  body: HTMLBodyElement\n  invertedChildren: InvertedChildren\n}) => {\n  invertedChildren.forEach(([child, childFlipConfig]) => {\n    if (!body.contains(child)) {\n      return\n    }\n    const scaleX = matrix[0]\n    const scaleY = matrix[3]\n    const translateX = matrix[4]\n    const translateY = matrix[5]\n\n    const inverseVals = { translateX: 0, translateY: 0, scaleX: 1, scaleY: 1 }\n    let transformString = ''\n    if (childFlipConfig.translate) {\n      inverseVals.translateX = -translateX / scaleX\n      inverseVals.translateY = -translateY / scaleY\n      transformString += `translate(${inverseVals.translateX}px, ${inverseVals.translateY}px)`\n    }\n    if (childFlipConfig.scale) {\n      inverseVals.scaleX = 1 / scaleX\n      inverseVals.scaleY = 1 / scaleY\n      transformString += ` scale(${inverseVals.scaleX}, ${inverseVals.scaleY})`\n    }\n    child.style.transform = transformString\n  })\n}\n\nexport const createApplyStylesFunc = ({\n  element,\n  invertedChildren,\n  body\n}: {\n  element: HTMLElement\n  invertedChildren: InvertedChildren\n  body: HTMLBodyElement\n}) => ({\n  matrix,\n  opacity,\n  forceMinVals\n}: {\n  matrix: Matrix\n  opacity?: number\n  forceMinVals?: boolean\n}) => {\n  if (isNumber(opacity)) {\n    element.style.opacity = opacity + ''\n  }\n\n  if (forceMinVals) {\n    element.style.minHeight = '1px'\n    element.style.minWidth = '1px'\n  }\n\n  if (!matrix) {\n    return\n  }\n\n  const stringTransform = convertMatrix2dArrayToString(matrix)\n\n  // always apply transform, even if identity,\n  // because identity might be the starting state in a FLIP\n  // transition, if the element's position is controlled by transforms\n  element.style.transform = stringTransform\n\n  if (invertedChildren) {\n    invertTransformsForChildren({\n      invertedChildren,\n      matrix,\n      body\n    })\n  }\n}\n\nexport const rectInViewport = ({\n  top,\n  bottom,\n  left,\n  right\n}: BoundingClientRect) => {\n  return (\n    top < window.innerHeight &&\n    bottom > 0 &&\n    left < window.innerWidth &&\n    right > 0\n  )\n}\n\nconst getInvertedChildren = (element: HTMLElement, id: string) =>\n  toArray(\n    element.querySelectorAll(`[${constants.DATA_INVERSE_FLIP_ID}=\"${id}\"]`)\n  )\n\nfunction extractFlipConfig(element: HTMLElement) {\n  const flipConfig = JSON.parse(element.dataset.flipConfig || '{}')\n  return flipConfig\n}\n\nexport default ({\n  flippedIds,\n  flipCallbacks,\n  inProgressAnimations,\n  flippedElementPositionsBeforeUpdate,\n  flippedElementPositionsAfterUpdate,\n  applyTransformOrigin,\n  spring,\n  getElement,\n  debug,\n  staggerConfig = {},\n  decisionData = {},\n  onComplete,\n  containerEl\n}: AnimateFlippedElementsArgs) => {\n  // the stuff below is used so we can return a promise that resolves when all FLIP animations have\n  // completed\n  let closureResolve: (flipIds: FlippedIds) => void\n\n  const flipCompletedPromise: Promise<FlippedIds> = new Promise(resolve => {\n    closureResolve = resolve\n  })\n  // hook for users of lib to attach logic when all flip animations have completed\n  if (onComplete) {\n    flipCompletedPromise.then(() => onComplete(containerEl, decisionData))\n  }\n  if (!flippedIds.length) {\n    return () => {\n      closureResolve!([])\n      return flipCompletedPromise\n    }\n  }\n\n  const completedAnimationIds: FlippedIds = []\n\n  const firstElement: HTMLElement = getElement(flippedIds[0])\n  // special handling for iframes\n  const body = firstElement\n    ? firstElement.ownerDocument!.querySelector('body')!\n    : document.querySelector('body')!\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (debug) {\n      // eslint-disable-next-line no-console\n      console.error(\n        '[react-flip-toolkit]\\nThe \"debug\" prop is set to true. All FLIP animations will return at the beginning of the transition.'\n      )\n    }\n  }\n\n  const duplicateFlipIds = getDuplicateValsAsStrings(flippedIds)\n  if (process.env.NODE_ENV !== 'production') {\n    if (duplicateFlipIds.length) {\n      // eslint-disable-next-line no-console\n      console.error(\n        `[react-flip-toolkit]\\nThere are currently multiple elements with the same flipId on the page.\\nThe animation will only work if each Flipped component has a unique flipId.\\nDuplicate flipId${\n          duplicateFlipIds.length > 1 ? 's' : ''\n        }: ${duplicateFlipIds.join('\\n')}`\n      )\n    }\n  }\n\n  const flipDataArray: FlipDataArray = flippedIds\n\n    // take all the measurements we need\n    // and return an object with animation functions + necessary data\n    .map(id => {\n      const prevRect = flippedElementPositionsBeforeUpdate[id].rect\n      const currentRect = flippedElementPositionsAfterUpdate[id].rect\n      const prevOpacity = flippedElementPositionsBeforeUpdate[id].opacity\n      const currentOpacity = flippedElementPositionsAfterUpdate[id].opacity\n      const needsForcedMinVals = currentRect.width < 1 || currentRect.height < 1\n      const element = flippedElementPositionsAfterUpdate[id].element\n\n      // don't animate elements outside of the user's viewport\n      if (!rectInViewport(prevRect) && !rectInViewport(currentRect)) {\n        return false\n      }\n\n      // this might happen if we are rapidly adding & removing elements(?)\n      if (!element) {\n        return false\n      }\n\n      const flipConfig = extractFlipConfig(element)\n\n      const springConfig = getSpringConfig({\n        flipperSpring: spring,\n        flippedSpring: flipConfig.spring\n      })\n\n      const stagger =\n        flipConfig.stagger === true ? 'default' : flipConfig.stagger\n\n      const toReturn = {\n        element,\n        id,\n        stagger,\n        springConfig\n      }\n\n      if (flipCallbacks[id] && flipCallbacks[id].shouldFlip) {\n        const elementShouldFlip = flipCallbacks[id].shouldFlip!(\n          decisionData.previous,\n          decisionData.current\n        )\n        if (!elementShouldFlip) {\n          return false\n        }\n      }\n\n      // don't animate elements that didn't visibly change\n      // but possibly animate their children\n\n      const translateXDifference = Math.abs(prevRect.left - currentRect.left)\n      const translateYDifference = Math.abs(prevRect.top - currentRect.top)\n\n      const translateDifference = translateXDifference + translateYDifference\n\n      const scaleXDifference = Math.abs(prevRect.width - currentRect.width)\n      const scaleYDifference = Math.abs(prevRect.height - currentRect.height)\n\n      const scaleDifference = scaleXDifference + scaleYDifference\n\n      const opacityDifference = Math.abs(currentOpacity - prevOpacity)\n      const differenceTooSmall =\n        translateDifference < 0.5 &&\n        scaleDifference < 0.5 &&\n        opacityDifference < 0.01\n\n      const hiddenDueToDimensions =\n        (prevRect.height === 0 && currentRect.height === 0) ||\n        (prevRect.width === 0 && currentRect.width === 0)\n      if (hiddenDueToDimensions || differenceTooSmall) {\n        return false\n      }\n\n      const currentTransform = Rematrix.parse(\n        flippedElementPositionsAfterUpdate[id].transform\n      )\n\n      const toVals: AnimatedVals = { matrix: currentTransform }\n\n      const fromVals: AnimatedVals = { matrix: [] }\n      const transformsArray = [currentTransform]\n\n      // we're only going to animate the values that the child wants animated\n      if (flipConfig.translate) {\n        transformsArray.push(\n          Rematrix.translateX(prevRect.left - currentRect.left)\n        )\n        transformsArray.push(\n          Rematrix.translateY(prevRect.top - currentRect.top)\n        )\n      }\n      // going any smaller than 1px breaks transitions in Chrome\n      if (flipConfig.scale) {\n        transformsArray.push(\n          Rematrix.scaleX(\n            Math.max(prevRect.width, 1) / Math.max(currentRect.width, 1)\n          )\n        )\n        transformsArray.push(\n          Rematrix.scaleY(\n            Math.max(prevRect.height, 1) / Math.max(currentRect.height, 1)\n          )\n        )\n      }\n\n      if (flipConfig.opacity) {\n        fromVals.opacity = prevOpacity\n        toVals.opacity = currentOpacity\n      }\n\n      let invertedChildren: InvertedChildren = []\n\n      if (\n        !flipCallbacks[id] ||\n        !flipCallbacks[id].shouldInvert ||\n        flipCallbacks[id].shouldInvert!(\n          decisionData.previous,\n          decisionData.current\n        )\n      ) {\n        const invertedChildElements = getInvertedChildren(element, id)\n        invertedChildren = invertedChildElements.map(c => [\n          c,\n          extractFlipConfig(c)\n        ]) as InvertedChildren\n      }\n\n      fromVals.matrix = convertMatrix3dArrayTo2dArray(\n        transformsArray.reduce(Rematrix.multiply)\n      )\n\n      toVals.matrix = convertMatrix3dArrayTo2dArray(toVals.matrix)\n\n      const applyStyles = createApplyStylesFunc({\n        element,\n        invertedChildren,\n        body\n      })\n\n      let onComplete: () => void\n      if (flipCallbacks[id] && flipCallbacks[id].onComplete) {\n        // must cache or else this could cause an error\n        const cachedOnComplete = flipCallbacks[id].onComplete\n        onComplete = () => cachedOnComplete!(element, decisionData)\n      }\n\n      // this should be called when animation ends naturally\n      // but also when it is interrupted\n      // when it is called, the animation has already been cancelled\n      const onAnimationEnd = (isCancellation: boolean) => {\n        delete inProgressAnimations[id]\n        if (isFunction(onComplete)) {\n          onComplete()\n        }\n        // remove identity transform -- this should have no effect on layout\n        element.style.transform = ''\n        invertedChildren.forEach(([element]) => {\n          element.style.transform = ''\n        })\n        if (needsForcedMinVals && element) {\n          element.style.minHeight = ''\n          element.style.minWidth = ''\n        }\n        if (isCancellation) return\n\n        completedAnimationIds.push(id)\n\n        if (completedAnimationIds.length >= flipDataArray.length) {\n          // we can theoretically call multiple times since a promise only resolves 1x\n          // but that shouldnt happen\n          closureResolve(completedAnimationIds)\n        }\n      }\n\n      const animateOpacity =\n        isNumber(fromVals.opacity) &&\n        isNumber(toVals.opacity) &&\n        fromVals.opacity !== toVals.opacity\n\n      let onStartCalled = false\n\n      const getOnUpdateFunc: GetOnUpdateFunc = ({ spring, onAnimationEnd }) => {\n        inProgressAnimations[id] = {\n          destroy: spring.destroy.bind(spring),\n          onAnimationEnd\n        }\n        const onUpdate: OnUpdate = spring => {\n          if (flipCallbacks[id] && flipCallbacks[id].onSpringUpdate) {\n            flipCallbacks[id].onSpringUpdate!(spring.getCurrentValue())\n          }\n          // trigger the user provided onStart function\n          if (!onStartCalled) {\n            onStartCalled = true\n            if (flipCallbacks[id] && flipCallbacks[id].onStart) {\n              flipCallbacks[id].onStart!(element, decisionData)\n            }\n          }\n\n          const currentValue = spring.getCurrentValue()\n          if (!body.contains(element)) {\n            spring.destroy()\n            return\n          }\n\n          const vals: AnimatedVals = { matrix: [] }\n\n          vals.matrix = fromVals.matrix.map((fromVal, index) =>\n            tweenProp(fromVal, toVals.matrix[index], currentValue)\n          )\n\n          if (animateOpacity) {\n            vals.opacity = tweenProp(\n              fromVals.opacity!,\n              toVals.opacity!,\n              currentValue\n            )\n          }\n          applyStyles(vals)\n        }\n        return onUpdate\n      }\n\n      const initializeFlip: InitializeFlip = () => {\n        // before animating, immediately apply FLIP styles to prevent flicker\n        applyStyles({\n          matrix: fromVals.matrix,\n          opacity: animateOpacity ? fromVals.opacity : undefined,\n          forceMinVals: needsForcedMinVals\n        })\n\n        if (flipCallbacks[id] && flipCallbacks[id].onStartImmediate) {\n          flipCallbacks[id].onStartImmediate!(element, decisionData)\n        }\n        // and batch any other style updates if necessary\n        if (flipConfig.transformOrigin) {\n          element.style.transformOrigin = flipConfig.transformOrigin\n        } else if (applyTransformOrigin) {\n          element.style.transformOrigin = '0 0'\n        }\n\n        invertedChildren.forEach(([child, childFlipConfig]) => {\n          if (childFlipConfig.transformOrigin) {\n            child.style.transformOrigin = childFlipConfig.transformOrigin\n          } else if (applyTransformOrigin) {\n            child.style.transformOrigin = '0 0'\n          }\n        })\n      }\n\n      return assign({}, toReturn, {\n        stagger,\n        springConfig,\n        getOnUpdateFunc,\n        initializeFlip,\n        onAnimationEnd,\n        delayUntil: flipConfig.delayUntil\n      }) as FlipData\n    })\n    // filter out data for all non-animated elements first\n    .filter(Boolean) as FlipDataArray\n\n  flipDataArray.forEach(({ initializeFlip }) => initializeFlip())\n\n  if (debug) {\n    return () => {}\n  }\n\n  const elementIsFlipped = (flipId: FlipId) =>\n    flipDataArray.filter(f => f.id === flipId).length\n\n  const delayedFlip = flipDataArray.filter(\n    f => f.delayUntil && elementIsFlipped(f.delayUntil)\n  )\n\n  // key: flipId value: flip to delay until key is called\n  const delayUntilSprings = {} as IndexableObject\n  // key: flipId value: stagger to delay until key is called\n  const delayUntilStaggers = {} as IndexableObject\n  // key: stagger value: true\n  const delayedStaggerKeys = {} as IndexableObject\n\n  delayedFlip.forEach(flip => {\n    if (flip.stagger) {\n      delayedStaggerKeys[flip.stagger] = true\n      if (delayUntilStaggers[flip.delayUntil!])\n        delayUntilStaggers[flip.delayUntil!].push(flip.stagger)\n      else delayUntilStaggers[flip.delayUntil!] = [flip.stagger]\n    } else {\n      if (delayUntilSprings[flip.delayUntil!])\n        delayUntilSprings[flip.delayUntil!].push(flip)\n      else delayUntilSprings[flip.delayUntil!] = [flip]\n    }\n  })\n\n  const staggerDict = flipDataArray\n    .filter(flipData => flipData.stagger)\n    .reduce((acc, curr) => {\n      if (acc[curr.stagger]) {\n        acc[curr.stagger].push(curr)\n      } else {\n        acc[curr.stagger] = [curr]\n      }\n      return acc\n    }, {} as IndexableObject)\n\n  const immediateFlip = flipDataArray.filter(f => delayedFlip.indexOf(f) === -1)\n\n  immediateFlip.forEach(flipData => {\n    flipData.onSpringActivate = () => {\n      if (delayUntilSprings[flipData.id]) {\n        delayUntilSprings[flipData.id].forEach(createSpring)\n      }\n      if (delayUntilStaggers[flipData.id]) {\n        const uniqueStaggerKeys = Object.keys(\n          delayUntilStaggers[flipData.id].reduce(\n            (acc: IndexableObject, curr: string) =>\n              assign(acc, { [curr]: true }),\n            {}\n          )\n        )\n        uniqueStaggerKeys.forEach((staggerKey: string) => {\n          createStaggeredSprings(\n            staggerDict[staggerKey],\n            staggerConfig[staggerKey]\n          )\n        })\n      }\n    }\n  })\n\n  return () => {\n    // if there are no active FLIP animations, immediately resolve the\n    // returned promise\n    if (!flipDataArray.length) {\n      closureResolve([])\n    }\n    // animate non-staggered elements\n    immediateFlip\n      .filter(flipData => {\n        return !flipData.stagger\n      })\n      .forEach(createSpring)\n\n    // animate staggered elements\n    Object.keys(staggerDict).forEach(staggerKey => {\n      if (delayedStaggerKeys[staggerKey]) return\n      createStaggeredSprings(staggerDict[staggerKey], staggerConfig[staggerKey])\n    })\n    return flipCompletedPromise\n  }\n}\n","import { toArray, assign } from '../../utilities'\nimport * as constants from '../../constants'\nimport { BoundingClientRect } from './types'\n\nexport const addTupleToObject = <T>(\n  acc: Record<string, T>,\n  curr: [string, T]\n): Record<string, T> => assign(acc, { [curr[0]]: curr[1] })\n\nexport const getAllElements = (\n  element?: HTMLElement,\n  portalKey?: string\n): HTMLElement[] => {\n  if (portalKey) {\n    return toArray(\n      document.querySelectorAll(`[${constants.DATA_PORTAL_KEY}=\"${portalKey}\"]`)\n    )\n  } else {\n    return toArray(element!.querySelectorAll(`[${constants.DATA_FLIP_ID}]`))\n  }\n}\nexport const getRects = (\n  flippedElements: HTMLElement[]\n): [HTMLElement, BoundingClientRect][] => {\n  return flippedElements.map((child: HTMLElement): [\n    HTMLElement,\n    BoundingClientRect\n  ] => [child, child.getBoundingClientRect()])\n}\n","import animateUnflippedElements from './animateUnflippedElements'\nimport animateFlippedElements from './animateFlippedElements'\nimport getFlippedElementPositionsAfterUpdate from './getFlippedElementPositions/getFlippedElementPositionsAfterUpdate'\nimport * as constants from '../constants'\nimport { assign, toArray } from '../utilities'\nimport {\n  GetElement,\n  BaseFlipArgs,\n  OnFlipKeyUpdateArgs,\n  FlippedIds\n} from './types'\nimport { AnimateUnflippedElementsArgs } from './animateUnflippedElements/types'\nimport {\n  AnimateFlippedElementsArgs,\n  ScopedSelector\n} from './animateFlippedElements/types'\n\nconst createPortalScopedSelector = (portalKey: string) => (\n  selector: string\n) => {\n  return toArray(\n    document.querySelectorAll(\n      `[${constants.DATA_PORTAL_KEY}=\"${portalKey}\"]${selector}`\n    )\n  )\n}\nconst createFlipperScopedSelector = (containerEl: HTMLElement) => {\n  const tempFlipperId = Math.random().toFixed(5)\n  containerEl.dataset.flipperId = tempFlipperId\n\n  return (selector: string) => {\n    return toArray(\n      containerEl.querySelectorAll(\n        `[data-flipper-id=\"${tempFlipperId}\"] ${selector}`\n      )\n    )\n  }\n}\nconst createScopedSelector = ({\n  containerEl,\n  portalKey\n}: {\n  containerEl?: HTMLElement\n  portalKey?: string\n}): ScopedSelector => {\n  if (portalKey) {\n    return createPortalScopedSelector(portalKey)\n  } else if (containerEl) {\n    return createFlipperScopedSelector(containerEl)\n  } else {\n    return () => []\n  }\n}\n\nconst createGetElementFunc = (scopedSelector: ScopedSelector): GetElement => {\n  return (id: string) => {\n    return scopedSelector(`[${constants.DATA_FLIP_ID}=\"${id}\"]`)[0]\n  }\n}\n\nconst onFlipKeyUpdate = ({\n  cachedOrderedFlipIds = [],\n  inProgressAnimations = {},\n  flippedElementPositionsBeforeUpdate = {},\n  flipCallbacks = {},\n  containerEl,\n  applyTransformOrigin,\n  spring,\n  debug,\n  portalKey,\n  staggerConfig = {},\n  decisionData = {},\n  handleEnterUpdateDelete,\n  onComplete,\n  onStart\n}: OnFlipKeyUpdateArgs) => {\n  const flippedElementPositionsAfterUpdate = getFlippedElementPositionsAfterUpdate(\n    {\n      element: containerEl,\n      portalKey\n    }\n  )\n\n  const scopedSelector = createScopedSelector({\n    containerEl,\n    portalKey\n  })\n  const getElement = createGetElementFunc(scopedSelector)\n\n  const isFlipped = (id: string) =>\n    flippedElementPositionsBeforeUpdate[id] &&\n    flippedElementPositionsAfterUpdate[id]\n\n  const unflippedIds = Object.keys(flippedElementPositionsBeforeUpdate)\n    .concat(Object.keys(flippedElementPositionsAfterUpdate))\n    .filter(id => !isFlipped(id))\n\n  const baseArgs: BaseFlipArgs = {\n    flipCallbacks,\n    getElement,\n    flippedElementPositionsBeforeUpdate,\n    flippedElementPositionsAfterUpdate,\n    inProgressAnimations,\n    decisionData\n  }\n\n  const animateUnFlippedElementsArgs = assign({}, baseArgs, {\n    unflippedIds\n  }) as AnimateUnflippedElementsArgs\n\n  const {\n    hideEnteringElements,\n    animateEnteringElements,\n    animateExitingElements\n  } = animateUnflippedElements(animateUnFlippedElementsArgs)\n\n  const flippedIds: FlippedIds = cachedOrderedFlipIds.filter(isFlipped)\n  // @ts-ignore\n  const animateFlippedElementsArgs: AnimateFlippedElementsArgs = assign(\n    {},\n    baseArgs,\n    {\n      containerEl,\n      flippedIds,\n      applyTransformOrigin,\n      spring,\n      debug,\n      staggerConfig,\n      scopedSelector,\n      onComplete\n    }\n  )\n  if (onStart) onStart(containerEl, decisionData)\n\n  // the function handles putting flipped elements back in their original positions\n  // and returns another function to actually call the flip animation\n  const flip = animateFlippedElements(animateFlippedElementsArgs)\n\n  if (handleEnterUpdateDelete) {\n    handleEnterUpdateDelete({\n      hideEnteringElements,\n      animateEnteringElements,\n      animateExitingElements,\n      animateFlippedElements: flip\n    })\n  } else {\n    hideEnteringElements()\n    animateExitingElements().then(animateEnteringElements)\n    flip()\n  }\n}\n\nexport default onFlipKeyUpdate\n","import { addTupleToObject, getRects, getAllElements } from '../utilities'\nimport {\n  FlippedElementPositionsAfterUpdate,\n  FlippedElementPositionDatumAfterUpdate\n} from './types'\n\nconst getFlippedElementPositionsAfterUpdate = ({\n  element,\n  portalKey\n}: {\n  element: HTMLElement\n  portalKey?: string\n}): FlippedElementPositionsAfterUpdate => {\n  const positionArray = getRects(getAllElements(element, portalKey)).map(\n    ([child, childBCR]) => {\n      const computedStyle = window.getComputedStyle(child)\n      return [\n        child.dataset.flipId,\n        {\n          element: child,\n          rect: childBCR,\n          opacity: parseFloat(computedStyle.opacity!),\n          transform: computedStyle.transform\n        }\n      ]\n    }\n  ) as [string, FlippedElementPositionDatumAfterUpdate][]\n\n  return positionArray.reduce(addTupleToObject, {})\n}\n\nexport default getFlippedElementPositionsAfterUpdate\n","import { addTupleToObject, getAllElements, getRects } from '../utilities'\nimport * as constants from '../../../constants'\nimport { toArray, assign } from '../../../utilities'\nimport {\n  FlippedElementPositionsBeforeUpdateReturnVals,\n  FlippedElementPositionDatumBeforeUpdate,\n  GetFlippedElementPositionsBeforeUpdateArgs,\n  ParentBCRs,\n  ChildIdsToParentBCRs,\n  ChildIdsToParents\n} from './types'\nimport { InProgressAnimations } from '../../../types'\n\nexport const cancelInProgressAnimations = (\n  inProgressAnimations: InProgressAnimations,\n  animatingElements: HTMLElement[]\n) => {\n  Object.keys(inProgressAnimations).forEach(id => {\n    if (inProgressAnimations[id].destroy) {\n      inProgressAnimations[id].destroy!()\n    }\n    if (inProgressAnimations[id].onAnimationEnd) {\n      inProgressAnimations[id].onAnimationEnd!(true)\n    }\n    delete inProgressAnimations[id]\n  })\n  animatingElements.forEach(el => {\n    el.style.transform = ''\n    el.style.opacity = ''\n  })\n}\n\nconst getFlippedElementPositionsBeforeUpdate = ({\n  element,\n  flipCallbacks = {},\n  inProgressAnimations = {},\n  portalKey\n}: GetFlippedElementPositionsBeforeUpdateArgs): FlippedElementPositionsBeforeUpdateReturnVals => {\n  const flippedElements = getAllElements(element, portalKey)\n\n  const inverseFlippedElements = toArray(\n    element.querySelectorAll(`[${constants.DATA_INVERSE_FLIP_ID}]`)\n  )\n\n  const childIdsToParentBCRs: ChildIdsToParentBCRs = {}\n  const parentBCRs: ParentBCRs = []\n  const childIdsToParents: ChildIdsToParents = {}\n  // this is for exit animations so we can re-insert exiting elements in the\n  // DOM later\n  flippedElements\n    .filter(\n      el =>\n        flipCallbacks &&\n        flipCallbacks[el.dataset.flipId!] &&\n        flipCallbacks[el.dataset.flipId!].onExit\n    )\n    .forEach(el => {\n      let parent = el.parentNode as HTMLElement\n      // this won't work for IE11\n      if (el.closest) {\n        const exitContainer = el.closest(\n          `[${constants.DATA_EXIT_CONTAINER}]`\n        ) as HTMLElement\n        if (exitContainer) {\n          parent = exitContainer\n        }\n      }\n      let bcrIndex = parentBCRs.findIndex(n => n[0] === parent)\n      if (bcrIndex === -1) {\n        parentBCRs.push([parent, parent.getBoundingClientRect()])\n        bcrIndex = parentBCRs.length - 1\n      }\n      childIdsToParentBCRs[el.dataset.flipId!] = parentBCRs[bcrIndex][1]\n      childIdsToParents[el.dataset.flipId!] = parent\n    })\n\n  const filteredFlippedElements = getRects(flippedElements)\n\n  const flippedElementPositionsTupleArray: [\n    string,\n    FlippedElementPositionDatumBeforeUpdate\n  ][] = filteredFlippedElements.map(([child, childBCR]) => {\n    const domDataForExitAnimations = {}\n\n    // only cache extra data for exit animations\n    // if the element has an onExit listener\n    if (\n      flipCallbacks &&\n      flipCallbacks[child.dataset.flipId!] &&\n      flipCallbacks[child.dataset.flipId!].onExit\n    ) {\n      const parentBCR = childIdsToParentBCRs[child.dataset.flipId!]\n\n      assign(domDataForExitAnimations, {\n        element: child,\n        parent: childIdsToParents[child.dataset.flipId!],\n        childPosition: {\n          top: childBCR.top - parentBCR.top,\n          left: childBCR.left - parentBCR.left,\n          width: childBCR.width,\n          height: childBCR.height\n        }\n      })\n    }\n\n    return [\n      child.dataset.flipId!,\n      {\n        rect: childBCR,\n        opacity: parseFloat(window.getComputedStyle(child).opacity || '1'),\n        domDataForExitAnimations\n      }\n    ]\n  }) as [string, FlippedElementPositionDatumBeforeUpdate][]\n\n  const flippedElementPositions = flippedElementPositionsTupleArray.reduce(\n    addTupleToObject,\n    {}\n  )\n\n  // do this at the very end since we want to cache positions of elements\n  // while they are mid-transition\n  cancelInProgressAnimations(\n    inProgressAnimations,\n    flippedElements.concat(inverseFlippedElements)\n  )\n\n  return {\n    flippedElementPositions,\n    cachedOrderedFlipIds: filteredFlippedElements.map(\n      ([el]) => el.dataset.flipId!\n    )\n  }\n}\n\nexport default getFlippedElementPositionsBeforeUpdate\n","import onFlipKeyUpdate from './flip'\nimport getFlippedElementPositionsBeforeUpdate from './flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate'\nimport { assign } from './utilities'\nimport {\n  StaggerConfig,\n  HandleEnterUpdateDelete,\n  InProgressAnimations,\n  FlipCallbacks,\n  OnFlipperComplete,\n  FlippedProps,\n  OnFlipperStart\n} from './types'\nimport { SpringOption } from './springSettings/types'\nimport { FlippedElementPositionsBeforeUpdate } from './flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/types'\nimport { FlippedIds } from './flip/types'\n\ninterface Options {\n  element: HTMLElement\n  staggerConfig?: StaggerConfig\n  spring?: SpringOption\n  applyTransformOrigin?: boolean\n  handleEnterUpdateDelete?: HandleEnterUpdateDelete\n  debug?: boolean\n  onComplete?: OnFlipperComplete\n}\n\nclass Flipper {\n  private element!: HTMLElement\n  private staggerConfig!: StaggerConfig\n  private applyTransformOrigin = true\n  private handleEnterUpdateDelete!: HandleEnterUpdateDelete\n  private debug?: boolean\n  private spring!: SpringOption\n  private inProgressAnimations: InProgressAnimations\n  private flipCallbacks: FlipCallbacks\n  private snapshot!: {\n    flippedElementPositions: FlippedElementPositionsBeforeUpdate\n    cachedOrderedFlipIds: FlippedIds\n  }\n  private onComplete?: OnFlipperComplete\n  private onStart?: OnFlipperStart\n\n  constructor(options: Options) {\n    assign(this, options)\n\n    this.inProgressAnimations = {}\n    this.flipCallbacks = {}\n\n    this.recordBeforeUpdate = this.recordBeforeUpdate.bind(this)\n    this.update = this.update.bind(this)\n    this.addFlipped = this.addFlipped.bind(this)\n    this.addInverted = this.addInverted.bind(this)\n  }\n\n  recordBeforeUpdate() {\n    this.snapshot = getFlippedElementPositionsBeforeUpdate({\n      element: this.element,\n      flipCallbacks: this.flipCallbacks,\n      inProgressAnimations: this.inProgressAnimations\n    })\n  }\n  update(prevDecisionData: any, currentDecisionData: any) {\n    if (this.snapshot) {\n      onFlipKeyUpdate({\n        flippedElementPositionsBeforeUpdate: this.snapshot\n          .flippedElementPositions,\n        cachedOrderedFlipIds: this.snapshot.cachedOrderedFlipIds,\n        containerEl: this.element,\n        inProgressAnimations: this.inProgressAnimations,\n        flipCallbacks: this.flipCallbacks,\n        applyTransformOrigin: this.applyTransformOrigin,\n        spring: this.spring,\n        debug: this.debug,\n        staggerConfig: this.staggerConfig,\n        handleEnterUpdateDelete: this.handleEnterUpdateDelete,\n        decisionData: {\n          previous: prevDecisionData,\n          current: currentDecisionData\n        },\n        onComplete: this.onComplete,\n        onStart: this.onStart\n      })\n      delete this.snapshot\n    }\n  }\n\n  addFlipped({\n    element,\n    flipId,\n    opacity,\n    translate,\n    scale,\n    transformOrigin,\n    spring,\n    stagger,\n    delayUntil,\n    onAppear,\n    onStart,\n    onSpringUpdate,\n    onComplete,\n    onExit,\n    shouldFlip,\n    shouldInvert\n  }: FlippedProps & { element: HTMLElement }) {\n    if (!element) {\n      throw new Error('no element provided')\n    }\n    if (!flipId) {\n      throw new Error('No flipId provided')\n    }\n    const flipConfig = {\n      scale,\n      translate,\n      opacity,\n      transformOrigin,\n      spring,\n      stagger,\n      delayUntil\n    }\n    if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {\n      assign(flipConfig, {\n        translate: true,\n        scale: true,\n        opacity: true\n      })\n    }\n    if (flipId) {\n      element.dataset.flipId = String(flipId)\n    }\n    element.dataset.flipConfig = JSON.stringify(flipConfig)\n    // finally, add callbacks\n    this.flipCallbacks[flipId] = {\n      shouldFlip,\n      shouldInvert,\n      onAppear,\n      onStart,\n      onSpringUpdate,\n      onComplete,\n      onExit\n    }\n  }\n\n  addInverted({\n    element,\n    parent,\n    opacity,\n    translate,\n    scale,\n    transformOrigin\n  }: {\n    element: HTMLElement\n    parent: HTMLElement\n    opacity: boolean\n    translate: boolean\n    scale: boolean\n    transformOrigin: string\n  }) {\n    if (!element) {\n      throw new Error('no element provided')\n    }\n    if (!parent) {\n      throw new Error('parent must be provided')\n    }\n\n    const inverseFlipId = parent.dataset.flipId\n    const flipConfig = {\n      scale,\n      translate,\n      opacity,\n      transformOrigin\n    }\n    if (!flipConfig.scale && !flipConfig.translate && !flipConfig.opacity) {\n      assign(flipConfig, {\n        translate: true,\n        scale: true,\n        opacity: true\n      })\n    }\n    element.dataset.inverseFlipId = inverseFlipId\n    element.dataset.flipConfig = JSON.stringify(flipConfig)\n  }\n}\n\nexport default Flipper\n","// this is exclusively for users of the library to create their own enter + exit animations\nimport { SpringSystem } from '../forked-rebound'\nimport { SpringSystemInterface } from '../forked-rebound/types.d'\nimport { tweenProp, assign } from '../utilities'\nimport { normalizeSpring, springPresets } from '../springSettings'\nimport { SimpleSpringOptions } from './types'\nimport { SpringConfig } from '../springSettings/types'\n\n// this should get created only 1x\nconst springSystem: SpringSystemInterface = new SpringSystem()\n\n/**\n * A simple spring function for animating DOM properties.\n * Returns a function that will immediately cancel the in-progress animation.\n * */\nconst createSimpleSpring = ({\n  config,\n  values,\n  onUpdate,\n  delay = 0,\n  onComplete\n}: SimpleSpringOptions) => {\n  const { stiffness, damping, overshootClamping } = assign(\n    {},\n    springPresets.noWobble,\n    normalizeSpring(config)\n  ) as SpringConfig\n  const spring = springSystem.createSpring(stiffness!, damping!)\n  spring.setOvershootClampingEnabled(!!overshootClamping)\n  spring.addListener({\n    onSpringAtRest: spring => {\n      if (onComplete) onComplete()\n      spring.destroy()\n    },\n    onSpringUpdate: spring => {\n      const springVal = spring.getCurrentValue()\n      if (!values) return onUpdate(springVal)\n      const currentValues = Object.keys(values)\n        .map(value => [\n          value,\n          tweenProp(values[value][0], values[value][1], springVal)\n        ])\n        .reduce((acc, curr) => {\n          return Object.assign(acc, { [curr[0]]: curr[1] })\n        }, {})\n      onUpdate(currentValues)\n    }\n  })\n  if (delay) {\n    setTimeout(() => {\n      spring.setEndValue(1)\n    }, delay)\n  } else {\n    spring.setEndValue(1)\n  }\n  return spring\n}\n\nexport default createSimpleSpring\n"],"names":["isNumber","x","isFunction","isObject","Object","prototype","toString","call","toArray","arrayLike","Array","slice","apply","getDuplicateValsAsStrings","arr","obj","reduce","acc","curr","keys","filter","val","assign","target","args","forEach","arg","nextKey","hasOwnProperty","tweenProp","start","end","position","springPresets","noWobble","stiffness","damping","gentle","veryGentle","wobbly","stiff","normalizeSpring","spring","indexOf","_onFrame","window","requestAnimationFrame","callback","setTimeout","Date","now","performanceNow","performance","removeFirst","array","item","idx","splice","AnimationLooper","run","onFrame","this","springSystem","loop","PhysicsState","constructor","velocity","ID","Spring","_id","_springSystem","listeners","_startValue","_currentState","_displacementFromRestThreshold","_endValue","_overshootClampingEnabled","_previousState","_restSpeedThreshold","_tempState","_timeAccumulator","_wasAtRest","_cachedSpringConfig","getId","destroy","deregisterSpring","setSpringConfig","springConfig","_springConfig","getCurrentValue","getDisplacementDistanceForState","state","Math","abs","setEndValue","endValue","prevEndValue","isAtRest","activateSpring","i","len","length","onChange","onSpringEndStateChange","setVelocity","setCurrentValue","currentValue","listener","onSpringUpdate","setAtRest","setOvershootClampingEnabled","enabled","isOvershooting","tension","advance","time","realDeltaTime","adjustedDeltaTime","friction","aVelocity","aAcceleration","bVelocity","bAcceleration","cVelocity","cAcceleration","dVelocity","dAcceleration","dxdt","dvdt","tempPosition","tempVelocity","_interpolate","notifyActivate","notifyAtRest","notifyPositionUpdated","Boolean","onSpringActivate","_onActivateCalled","onSpringAtRest","systemShouldAdvance","wasAtRest","alpha","addListener","newListener","push","addOneTimeListener","oneTimeFunc","func","removeListener","key","listenerToRemove","SpringSystem","looper","_activeSprings","_idleSpringIndices","_isIdle","_lastTimeMillis","_springRegistry","createSpring","createSpringWithConfig","registerSpring","getIsIdle","deltaTime","pop","currentTimeMillis","ellapsedMillis","onBeforeIntegrate","onAfterIntegrate","springId","createSuspendedSpring","flipData","overshootClamping","getOnUpdateFunc","onAnimationEnd","flipped","createStaggeredSprings","flippedArray","staggerConfig","reverse","normalizedSpeed","speedConfig","speed","min","max","nextThreshold","setEndValueFuncs","map","cachedGetOnUpdate","onUpdate","bind","convertMatrix3dArrayTo2dArray","matrix","index","rectInViewport","top","bottom","left","right","innerHeight","innerWidth","extractFlipConfig","element","JSON","parse","dataset","flipConfig","addTupleToObject","[object Object]","getAllElements","portalKey","document","querySelectorAll","getRects","flippedElements","child","getBoundingClientRect","onFlipKeyUpdate","cachedOrderedFlipIds","inProgressAnimations","flippedElementPositionsBeforeUpdate","flipCallbacks","containerEl","applyTransformOrigin","debug","decisionData","handleEnterUpdateDelete","onComplete","onStart","flippedElementPositionsAfterUpdate","childBCR","computedStyle","getComputedStyle","flipId","rect","opacity","parseFloat","transform","getFlippedElementPositionsAfterUpdate","scopedSelector","selector","createPortalScopedSelector","tempFlipperId","random","toFixed","flipperId","createFlipperScopedSelector","createScopedSelector","getElement","id","createGetElementFunc","isFlipped","unflippedIds","concat","baseArgs","animateUnFlippedElementsArgs","hideEnteringElements","animateEnteringElements","animateExitingElements","animatedEnteringElementIds","onAppear","animatedExitingElementIds","onExit","closureResolve","promiseToReturn","Promise","resolve","fragmentTuples","exitingElementCount","onExitCallbacks","domDataForExitAnimations","parent","childPosition","width","height","style","fragmentTuple","t","createDocumentFragment","appendChild","stop","removeChild","DOMException","c","animateUnflippedElements","animateFlippedElementsArgs","flippedIds","flip","flipCompletedPromise","then","completedAnimationIds","firstElement","body","ownerDocument","querySelector","flipDataArray","prevRect","currentRect","prevOpacity","currentOpacity","needsForcedMinVals","flipperSpring","flippedSpring","getSpringConfig","stagger","toReturn","shouldFlip","previous","current","translateDifference","scaleDifference","opacityDifference","currentTransform","Rematrix","toVals","fromVals","transformsArray","translate","scale","invertedChildren","shouldInvert","invertedChildElements","getInvertedChildren","applyStyles","forceMinVals","minHeight","minWidth","stringTransform","join","convertMatrix2dArrayToString","childFlipConfig","contains","scaleX","scaleY","translateY","inverseVals","translateX","transformString","invertTransformsForChildren","createApplyStylesFunc","cachedOnComplete","animateOpacity","onStartCalled","vals","fromVal","initializeFlip","undefined","onStartImmediate","transformOrigin","isCancellation","delayUntil","delayedFlip","f","delayUntilSprings","delayUntilStaggers","delayedStaggerKeys","staggerDict","immediateFlip","staggerKey","animateFlippedElements","getFlippedElementPositionsBeforeUpdate","inverseFlippedElements","childIdsToParentBCRs","parentBCRs","childIdsToParents","el","parentNode","closest","exitContainer","bcrIndex","findIndex","n","filteredFlippedElements","flippedElementPositions","parentBCR","animatingElements","Flipper","options","recordBeforeUpdate","update","addFlipped","addInverted","snapshot","prevDecisionData","currentDecisionData","Error","String","stringify","inverseFlipId","createSimpleSpring","config","values","delay","springVal","currentValues","value"],"mappings":"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"}