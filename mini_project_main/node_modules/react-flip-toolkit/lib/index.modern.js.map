{"version":3,"file":"index.modern.js","sources":["../src/Flipper/context.ts","../src/Flipper/index.tsx","../src/Flipped/index.tsx","../src/ExitContainer/index.tsx"],"sourcesContent":["import { createContext } from 'react'\nimport { FlipCallbacks } from 'flip-toolkit/lib/types'\n\nexport const FlipContext = createContext({} as FlipCallbacks)\nexport const PortalContext = createContext('portal')\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  getFlippedElementPositionsBeforeUpdate,\n  onFlipKeyUpdate\n} from 'flip-toolkit'\nimport {\n  FlipperProps,\n  InProgressAnimations,\n  FlipCallbacks\n} from 'flip-toolkit/lib/types'\nimport { FlippedElementPositionsBeforeUpdateReturnVals } from 'flip-toolkit/lib/flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/types'\nimport { FlipContext, PortalContext } from './context'\n\nclass Flipper extends Component<FlipperProps> {\n  static defaultProps = {\n    applyTransformOrigin: true,\n    element: 'div'\n  }\n\n  private inProgressAnimations: InProgressAnimations = {}\n  private flipCallbacks: FlipCallbacks = {}\n  private el?: HTMLElement = undefined\n\n  getSnapshotBeforeUpdate(prevProps: FlipperProps) {\n    if (prevProps.flipKey !== this.props.flipKey && this.el) {\n      return getFlippedElementPositionsBeforeUpdate({\n        element: this.el,\n        // if onExit callbacks exist here, we'll cache the DOM node\n        flipCallbacks: this.flipCallbacks,\n        inProgressAnimations: this.inProgressAnimations,\n        portalKey: this.props.portalKey\n      })\n    }\n    return null\n  }\n\n  componentDidUpdate(\n    prevProps: FlipperProps,\n    _prevState: any,\n    cachedData: FlippedElementPositionsBeforeUpdateReturnVals\n  ) {\n    if (this.props.flipKey !== prevProps.flipKey && this.el) {\n      onFlipKeyUpdate({\n        flippedElementPositionsBeforeUpdate: cachedData.flippedElementPositions,\n        cachedOrderedFlipIds: cachedData.cachedOrderedFlipIds,\n        containerEl: this.el,\n        inProgressAnimations: this.inProgressAnimations,\n        flipCallbacks: this.flipCallbacks,\n        applyTransformOrigin: this.props.applyTransformOrigin,\n        spring: this.props.spring,\n        debug: this.props.debug,\n        portalKey: this.props.portalKey,\n        staggerConfig: this.props.staggerConfig,\n        handleEnterUpdateDelete: this.props.handleEnterUpdateDelete,\n        decisionData: {\n          previous: prevProps.decisionData,\n          current: this.props.decisionData\n        },\n        onComplete: this.props.onComplete,\n        onStart: this.props.onStart\n      })\n    }\n  }\n\n  public render() {\n    const { element, className, portalKey } = this.props\n    const Element = element\n\n    let flipperMarkup = (\n      <FlipContext.Provider value={this.flipCallbacks}>\n        {/*\n        // @ts-ignore */}\n        <Element\n          className={className}\n          ref={(el: HTMLElement) => (this.el = el)}\n        >\n          {this.props.children}\n        </Element>\n      </FlipContext.Provider>\n    )\n\n    if (portalKey) {\n      flipperMarkup = (\n        <PortalContext.Provider value={portalKey}>\n          {flipperMarkup}\n        </PortalContext.Provider>\n      )\n    }\n\n    return flipperMarkup\n  }\n}\n// @ts-ignore\n\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-ignore\n  Flipper.propTypes = {\n    flipKey: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.bool\n    ]),\n    children: PropTypes.node.isRequired,\n    spring: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    applyTransformOrigin: PropTypes.bool,\n    debug: PropTypes.bool,\n    element: PropTypes.string,\n    className: PropTypes.string,\n    portalKey: PropTypes.string,\n    staggerConfig: PropTypes.object,\n    decisionData: PropTypes.any,\n    handleEnterUpdateDelete: PropTypes.func,\n    onComplete: PropTypes.func,\n    onStart: PropTypes.func\n  }\n}\n\nexport default Flipper\n","import React, {\n  FunctionComponent,\n  Children,\n  cloneElement,\n  ReactElement\n} from 'react'\nimport PropTypes from 'prop-types'\nimport { utilities, constants } from 'flip-toolkit'\nimport { FlippedProps, SerializableFlippedProps } from 'flip-toolkit/lib/types'\nimport { FlipContext, PortalContext } from '../Flipper/context'\n\nfunction isFunction(child: any): child is Function {\n  return typeof child === 'function'\n}\n\n// This wrapper creates child components for the main Flipper component\nexport const Flipped: FunctionComponent<SerializableFlippedProps> = ({\n  children,\n  flipId,\n  inverseFlipId,\n  portalKey,\n  ...rest\n}) => {\n  let child = children\n  const isFunctionAsChildren = isFunction(child)\n\n  if (!isFunctionAsChildren) {\n    try {\n      child = Children.only(children)\n    } catch (e) {\n      throw new Error('Each Flipped component must wrap a single child')\n    }\n  }\n\n  // if nothing is being animated, assume everything is being animated\n  if (!rest.scale && !rest.translate && !rest.opacity) {\n    utilities.assign(rest, {\n      translate: true,\n      scale: true,\n      opacity: true\n    })\n  }\n\n  const dataAttributes: Record<string, string | undefined> = {\n    [constants.DATA_FLIP_CONFIG]: JSON.stringify(rest)\n  }\n\n  if (flipId !== undefined)\n    dataAttributes[constants.DATA_FLIP_ID] = String(flipId)\n  else if (inverseFlipId)\n    dataAttributes[constants.DATA_INVERSE_FLIP_ID] = String(inverseFlipId)\n  if (portalKey !== undefined) {\n    dataAttributes[constants.DATA_PORTAL_KEY] = portalKey\n  }\n  if (isFunctionAsChildren) {\n    return (child as Function)(dataAttributes)\n  }\n  return cloneElement(child as ReactElement<any>, dataAttributes)\n}\n// @ts-ignore\nexport const FlippedWithContext: FunctionComponent<FlippedProps> = ({\n  children,\n  flipId,\n  shouldFlip,\n  shouldInvert,\n  onAppear,\n  onStart,\n  onStartImmediate,\n  onComplete,\n  onExit,\n  onSpringUpdate,\n  ...rest\n}) => {\n  if (!children) {\n    return null\n  }\n  if (rest.inverseFlipId) {\n    return <Flipped {...rest}>{children}</Flipped>\n  }\n\n  return (\n    <PortalContext.Consumer>\n      {portalKey => (\n        <FlipContext.Consumer>\n          {data => {\n            // if there is no surrounding Flipper component,\n            // we don't want to throw an error, so check\n            // that data exists and is not the default string\n            if (utilities.isObject(data) && flipId) {\n              data[flipId] = {\n                shouldFlip,\n                shouldInvert,\n                onAppear,\n                onStart,\n                onStartImmediate,\n                onComplete,\n                onExit,\n                onSpringUpdate\n              }\n            }\n            return (\n              <Flipped flipId={flipId} {...rest} portalKey={portalKey}>\n                {children}\n              </Flipped>\n            )\n          }}\n        </FlipContext.Consumer>\n      )}\n    </PortalContext.Consumer>\n  )\n}\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-ignore\n  FlippedWithContext.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n    inverseFlipId: PropTypes.string,\n    flipId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    opacity: PropTypes.bool,\n    translate: PropTypes.bool,\n    scale: PropTypes.bool,\n    transformOrigin: PropTypes.string,\n    spring: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    onStart: PropTypes.func,\n    onStartImmediate: PropTypes.func,\n    onComplete: PropTypes.func,\n    onAppear: PropTypes.func,\n    onSpringUpdate: PropTypes.func,\n    shouldFlip: PropTypes.func,\n    shouldInvert: PropTypes.func,\n    onExit: PropTypes.func,\n    portalKey: PropTypes.string,\n    stagger: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n  }\n}\n\nFlippedWithContext.displayName = 'Flipped'\n\nexport default FlippedWithContext\n","import { FunctionComponent, cloneElement, ReactElement } from 'react'\nimport { constants } from 'flip-toolkit'\n\nconst ExitContainer: FunctionComponent = ({ children }) => {\n  return cloneElement(children as ReactElement<any>, {\n    [constants.DATA_EXIT_CONTAINER]: true\n  })\n}\n\nexport default ExitContainer\n"],"names":["FlipContext","createContext","PortalContext","Flipper","Component","constructor","this","undefined","getSnapshotBeforeUpdate","prevProps","flipKey","props","el","getFlippedElementPositionsBeforeUpdate","element","flipCallbacks","inProgressAnimations","portalKey","componentDidUpdate","_prevState","cachedData","onFlipKeyUpdate","flippedElementPositionsBeforeUpdate","flippedElementPositions","cachedOrderedFlipIds","containerEl","applyTransformOrigin","spring","debug","staggerConfig","handleEnterUpdateDelete","decisionData","previous","current","onComplete","onStart","render","className","flipperMarkup","React","Provider","value","ref","children","Flipped","flipId","inverseFlipId","rest","child","isFunctionAsChildren","isFunction","Children","only","e","Error","scale","translate","opacity","utilities","assign","dataAttributes","[object Object]","constants","DATA_FLIP_CONFIG","JSON","stringify","DATA_FLIP_ID","String","DATA_INVERSE_FLIP_ID","DATA_PORTAL_KEY","cloneElement","FlippedWithContext","shouldFlip","shouldInvert","onAppear","onStartImmediate","onExit","onSpringUpdate","Consumer","data","isObject","displayName","ExitContainer","DATA_EXIT_CONTAINER"],"mappings":"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"}