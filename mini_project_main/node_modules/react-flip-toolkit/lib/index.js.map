{"version":3,"file":"index.js","sources":["../src/Flipper/context.ts","../src/Flipper/index.tsx","../src/Flipped/index.tsx","../src/ExitContainer/index.tsx"],"sourcesContent":["import { createContext } from 'react'\nimport { FlipCallbacks } from 'flip-toolkit/lib/types'\n\nexport const FlipContext = createContext({} as FlipCallbacks)\nexport const PortalContext = createContext('portal')\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  getFlippedElementPositionsBeforeUpdate,\n  onFlipKeyUpdate\n} from 'flip-toolkit'\nimport {\n  FlipperProps,\n  InProgressAnimations,\n  FlipCallbacks\n} from 'flip-toolkit/lib/types'\nimport { FlippedElementPositionsBeforeUpdateReturnVals } from 'flip-toolkit/lib/flip/getFlippedElementPositions/getFlippedElementPositionsBeforeUpdate/types'\nimport { FlipContext, PortalContext } from './context'\n\nclass Flipper extends Component<FlipperProps> {\n  static defaultProps = {\n    applyTransformOrigin: true,\n    element: 'div'\n  }\n\n  private inProgressAnimations: InProgressAnimations = {}\n  private flipCallbacks: FlipCallbacks = {}\n  private el?: HTMLElement = undefined\n\n  getSnapshotBeforeUpdate(prevProps: FlipperProps) {\n    if (prevProps.flipKey !== this.props.flipKey && this.el) {\n      return getFlippedElementPositionsBeforeUpdate({\n        element: this.el,\n        // if onExit callbacks exist here, we'll cache the DOM node\n        flipCallbacks: this.flipCallbacks,\n        inProgressAnimations: this.inProgressAnimations,\n        portalKey: this.props.portalKey\n      })\n    }\n    return null\n  }\n\n  componentDidUpdate(\n    prevProps: FlipperProps,\n    _prevState: any,\n    cachedData: FlippedElementPositionsBeforeUpdateReturnVals\n  ) {\n    if (this.props.flipKey !== prevProps.flipKey && this.el) {\n      onFlipKeyUpdate({\n        flippedElementPositionsBeforeUpdate: cachedData.flippedElementPositions,\n        cachedOrderedFlipIds: cachedData.cachedOrderedFlipIds,\n        containerEl: this.el,\n        inProgressAnimations: this.inProgressAnimations,\n        flipCallbacks: this.flipCallbacks,\n        applyTransformOrigin: this.props.applyTransformOrigin,\n        spring: this.props.spring,\n        debug: this.props.debug,\n        portalKey: this.props.portalKey,\n        staggerConfig: this.props.staggerConfig,\n        handleEnterUpdateDelete: this.props.handleEnterUpdateDelete,\n        decisionData: {\n          previous: prevProps.decisionData,\n          current: this.props.decisionData\n        },\n        onComplete: this.props.onComplete,\n        onStart: this.props.onStart\n      })\n    }\n  }\n\n  public render() {\n    const { element, className, portalKey } = this.props\n    const Element = element\n\n    let flipperMarkup = (\n      <FlipContext.Provider value={this.flipCallbacks}>\n        {/*\n        // @ts-ignore */}\n        <Element\n          className={className}\n          ref={(el: HTMLElement) => (this.el = el)}\n        >\n          {this.props.children}\n        </Element>\n      </FlipContext.Provider>\n    )\n\n    if (portalKey) {\n      flipperMarkup = (\n        <PortalContext.Provider value={portalKey}>\n          {flipperMarkup}\n        </PortalContext.Provider>\n      )\n    }\n\n    return flipperMarkup\n  }\n}\n// @ts-ignore\n\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-ignore\n  Flipper.propTypes = {\n    flipKey: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n      PropTypes.bool\n    ]),\n    children: PropTypes.node.isRequired,\n    spring: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    applyTransformOrigin: PropTypes.bool,\n    debug: PropTypes.bool,\n    element: PropTypes.string,\n    className: PropTypes.string,\n    portalKey: PropTypes.string,\n    staggerConfig: PropTypes.object,\n    decisionData: PropTypes.any,\n    handleEnterUpdateDelete: PropTypes.func,\n    onComplete: PropTypes.func,\n    onStart: PropTypes.func\n  }\n}\n\nexport default Flipper\n","import React, {\n  FunctionComponent,\n  Children,\n  cloneElement,\n  ReactElement\n} from 'react'\nimport PropTypes from 'prop-types'\nimport { utilities, constants } from 'flip-toolkit'\nimport { FlippedProps, SerializableFlippedProps } from 'flip-toolkit/lib/types'\nimport { FlipContext, PortalContext } from '../Flipper/context'\n\nfunction isFunction(child: any): child is Function {\n  return typeof child === 'function'\n}\n\n// This wrapper creates child components for the main Flipper component\nexport const Flipped: FunctionComponent<SerializableFlippedProps> = ({\n  children,\n  flipId,\n  inverseFlipId,\n  portalKey,\n  ...rest\n}) => {\n  let child = children\n  const isFunctionAsChildren = isFunction(child)\n\n  if (!isFunctionAsChildren) {\n    try {\n      child = Children.only(children)\n    } catch (e) {\n      throw new Error('Each Flipped component must wrap a single child')\n    }\n  }\n\n  // if nothing is being animated, assume everything is being animated\n  if (!rest.scale && !rest.translate && !rest.opacity) {\n    utilities.assign(rest, {\n      translate: true,\n      scale: true,\n      opacity: true\n    })\n  }\n\n  const dataAttributes: Record<string, string | undefined> = {\n    [constants.DATA_FLIP_CONFIG]: JSON.stringify(rest)\n  }\n\n  if (flipId !== undefined)\n    dataAttributes[constants.DATA_FLIP_ID] = String(flipId)\n  else if (inverseFlipId)\n    dataAttributes[constants.DATA_INVERSE_FLIP_ID] = String(inverseFlipId)\n  if (portalKey !== undefined) {\n    dataAttributes[constants.DATA_PORTAL_KEY] = portalKey\n  }\n  if (isFunctionAsChildren) {\n    return (child as Function)(dataAttributes)\n  }\n  return cloneElement(child as ReactElement<any>, dataAttributes)\n}\n// @ts-ignore\nexport const FlippedWithContext: FunctionComponent<FlippedProps> = ({\n  children,\n  flipId,\n  shouldFlip,\n  shouldInvert,\n  onAppear,\n  onStart,\n  onStartImmediate,\n  onComplete,\n  onExit,\n  onSpringUpdate,\n  ...rest\n}) => {\n  if (!children) {\n    return null\n  }\n  if (rest.inverseFlipId) {\n    return <Flipped {...rest}>{children}</Flipped>\n  }\n\n  return (\n    <PortalContext.Consumer>\n      {portalKey => (\n        <FlipContext.Consumer>\n          {data => {\n            // if there is no surrounding Flipper component,\n            // we don't want to throw an error, so check\n            // that data exists and is not the default string\n            if (utilities.isObject(data) && flipId) {\n              data[flipId] = {\n                shouldFlip,\n                shouldInvert,\n                onAppear,\n                onStart,\n                onStartImmediate,\n                onComplete,\n                onExit,\n                onSpringUpdate\n              }\n            }\n            return (\n              <Flipped flipId={flipId} {...rest} portalKey={portalKey}>\n                {children}\n              </Flipped>\n            )\n          }}\n        </FlipContext.Consumer>\n      )}\n    </PortalContext.Consumer>\n  )\n}\nif (process.env.NODE_ENV !== 'production') {\n  // @ts-ignore\n  FlippedWithContext.propTypes = {\n    children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]).isRequired,\n    inverseFlipId: PropTypes.string,\n    flipId: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    opacity: PropTypes.bool,\n    translate: PropTypes.bool,\n    scale: PropTypes.bool,\n    transformOrigin: PropTypes.string,\n    spring: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    onStart: PropTypes.func,\n    onStartImmediate: PropTypes.func,\n    onComplete: PropTypes.func,\n    onAppear: PropTypes.func,\n    onSpringUpdate: PropTypes.func,\n    shouldFlip: PropTypes.func,\n    shouldInvert: PropTypes.func,\n    onExit: PropTypes.func,\n    portalKey: PropTypes.string,\n    stagger: PropTypes.oneOfType([PropTypes.string, PropTypes.bool])\n  }\n}\n\nFlippedWithContext.displayName = 'Flipped'\n\nexport default FlippedWithContext\n","import { FunctionComponent, cloneElement, ReactElement } from 'react'\nimport { constants } from 'flip-toolkit'\n\nconst ExitContainer: FunctionComponent = ({ children }) => {\n  return cloneElement(children as ReactElement<any>, {\n    [constants.DATA_EXIT_CONTAINER]: true\n  })\n}\n\nexport default ExitContainer\n"],"names":["FlipContext","createContext","PortalContext","Flipper","_this","undefined","getSnapshotBeforeUpdate","prevProps","flipKey","this","props","el","getFlippedElementPositionsBeforeUpdate","element","flipCallbacks","inProgressAnimations","portalKey","componentDidUpdate","_prevState","cachedData","onFlipKeyUpdate","flippedElementPositionsBeforeUpdate","flippedElementPositions","cachedOrderedFlipIds","containerEl","applyTransformOrigin","spring","debug","staggerConfig","handleEnterUpdateDelete","decisionData","previous","current","onComplete","onStart","render","flipperMarkup","React","Provider","value","className","ref","_this2","children","Component","Flipped","flipId","inverseFlipId","rest","child","isFunctionAsChildren","isFunction","Children","only","e","Error","scale","translate","opacity","utilities","assign","dataAttributes","constants","DATA_FLIP_CONFIG","JSON","stringify","DATA_FLIP_ID","String","DATA_INVERSE_FLIP_ID","DATA_PORTAL_KEY","cloneElement","FlippedWithContext","shouldFlip","shouldInvert","onAppear","onStartImmediate","onExit","onSpringUpdate","Consumer","data","isObject","displayName","DATA_EXIT_CONTAINER"],"mappings":"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"}